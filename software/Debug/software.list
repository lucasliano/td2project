
software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009958  08009958  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009958  08009958  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009958  08009958  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e40  20000074  080099d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eb4  080099d4  00023eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027af9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057a9  00000000  00000000  00047b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0004d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  0004efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020303  00000000  00000000  00050a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024db5  00000000  00000000  00070d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b9b  00000000  00000000  00095ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007834  00000000  00000000  001366d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080097c4 	.word	0x080097c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080097c4 	.word	0x080097c4

08000150 <rfid_add_id>:
static SPI_HandleTypeDef *spi;
/* ===========================================*/


uint8_t rfid_add_id(uint32_t id)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	static uint8_t current_index = 0;
	uint8_t wbuff[4];
	uint8_t status = CARD_NOT_ADDED;
 8000158:	2301      	movs	r3, #1
 800015a:	75fb      	strb	r3, [r7, #23]
 800015c:	687b      	ldr	r3, [r7, #4]

	memcpy(wbuff, &id , 4);
 800015e:	613b      	str	r3, [r7, #16]


	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <rfid_add_id+0x94>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000168:	4618      	mov	r0, r3
 800016a:	f007 fc0f 	bl	800798c <xQueueSemaphoreTake>
	status = eeprom_write_page(RFID_INIT_PAGE, 4*current_index, wbuff, 4);
 800016e:	4b1e      	ldr	r3, [pc, #120]	; (80001e8 <rfid_add_id+0x98>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	b2d9      	uxtb	r1, r3
 8000176:	f107 0210 	add.w	r2, r7, #16
 800017a:	2304      	movs	r3, #4
 800017c:	2003      	movs	r0, #3
 800017e:	f000 fef3 	bl	8000f68 <eeprom_write_page>
 8000182:	4603      	mov	r3, r0
 8000184:	75fb      	strb	r3, [r7, #23]
	xSemaphoreGive(sem_eeprom);
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <rfid_add_id+0x94>)
 8000188:	6818      	ldr	r0, [r3, #0]
 800018a:	2300      	movs	r3, #0
 800018c:	2200      	movs	r2, #0
 800018e:	2100      	movs	r1, #0
 8000190:	f007 fa70 	bl	8007674 <xQueueGenericSend>

	current_index++;
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <rfid_add_id+0x98>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	b2da      	uxtb	r2, r3
 800019c:	4b12      	ldr	r3, [pc, #72]	; (80001e8 <rfid_add_id+0x98>)
 800019e:	701a      	strb	r2, [r3, #0]
	current_index %= 2;
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <rfid_add_id+0x98>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <rfid_add_id+0x98>)
 80001ac:	701a      	strb	r2, [r3, #0]

	uint8_t valid_id[8];
	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <rfid_add_id+0x94>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80001b6:	4618      	mov	r0, r3
 80001b8:	f007 fbe8 	bl	800798c <xQueueSemaphoreTake>
	eeprom_read_page(RFID_INIT_PAGE, 0, valid_id, 8);
 80001bc:	f107 0208 	add.w	r2, r7, #8
 80001c0:	2308      	movs	r3, #8
 80001c2:	2100      	movs	r1, #0
 80001c4:	2003      	movs	r0, #3
 80001c6:	f000 fef8 	bl	8000fba <eeprom_read_page>
	xSemaphoreGive(sem_eeprom);
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <rfid_add_id+0x94>)
 80001cc:	6818      	ldr	r0, [r3, #0]
 80001ce:	2300      	movs	r3, #0
 80001d0:	2200      	movs	r2, #0
 80001d2:	2100      	movs	r1, #0
 80001d4:	f007 fa4e 	bl	8007674 <xQueueGenericSend>

	return CARD_ADDED;
 80001d8:	2300      	movs	r3, #0
}
 80001da:	4618      	mov	r0, r3
 80001dc:	3718      	adds	r7, #24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20003cb0 	.word	0x20003cb0
 80001e8:	2000009c 	.word	0x2000009c

080001ec <rfid_toggle_state>:
 * Input Parameters:
 * 					None.
 * Return value: None
 */
void rfid_toggle_state(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	if (rfid_debounce() == CARD_DETECTED)
 80001f0:	f000 f81a 	bl	8000228 <rfid_debounce>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d110      	bne.n	800021c <rfid_toggle_state+0x30>
	{
		// Toggle clave state
		xSemaphoreTake(sem_state,portMAX_DELAY);
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <rfid_toggle_state+0x34>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000202:	4618      	mov	r0, r3
 8000204:	f007 fbc2 	bl	800798c <xQueueSemaphoreTake>
		clave_ok = 1;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <rfid_toggle_state+0x38>)
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(sem_state);
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <rfid_toggle_state+0x34>)
 8000210:	6818      	ldr	r0, [r3, #0]
 8000212:	2300      	movs	r3, #0
 8000214:	2200      	movs	r2, #0
 8000216:	2100      	movs	r1, #0
 8000218:	f007 fa2c 	bl	8007674 <xQueueGenericSend>
	}
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20003d90 	.word	0x20003d90
 8000224:	20000298 	.word	0x20000298

08000228 <rfid_debounce>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not validated nor detected.
 *					CARD_DETECTED 	if card was detected and validated.
 */
uint8_t rfid_debounce(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	static uint8_t estado = WAITING_CARD;
	static uint32_t initial_time = 0;
	uint8_t return_value = CARD_NOT_FOUND;
 800022e:	2301      	movs	r3, #1
 8000230:	73fb      	strb	r3, [r7, #15]
	uint32_t current_time = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
	uint8_t id[4];	// Not important here

	switch(estado)
 8000236:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <rfid_debounce+0xc8>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d040      	beq.n	80002c0 <rfid_debounce+0x98>
 800023e:	2b02      	cmp	r3, #2
 8000240:	dc50      	bgt.n	80002e4 <rfid_debounce+0xbc>
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <rfid_debounce+0x24>
 8000246:	2b01      	cmp	r3, #1
 8000248:	d010      	beq.n	800026c <rfid_debounce+0x44>
 800024a:	e04b      	b.n	80002e4 <rfid_debounce+0xbc>
	{
		case WAITING_CARD:
			if (rfid_find_card(id) == CARD_DETECTED)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f892 	bl	8000378 <rfid_find_card>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d13f      	bne.n	80002da <rfid_debounce+0xb2>
			{
				initial_time = HAL_GetTick();
 800025a:	f002 fad9 	bl	8002810 <HAL_GetTick>
 800025e:	4603      	mov	r3, r0
 8000260:	4a24      	ldr	r2, [pc, #144]	; (80002f4 <rfid_debounce+0xcc>)
 8000262:	6013      	str	r3, [r2, #0]
				estado = VALIDATING_CARD;
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <rfid_debounce+0xc8>)
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
			}
			break;
 800026a:	e036      	b.n	80002da <rfid_debounce+0xb2>

		case VALIDATING_CARD:
			if (rfid_find_card(id) == CARD_NOT_FOUND)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f882 	bl	8000378 <rfid_find_card>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d103      	bne.n	8000282 <rfid_debounce+0x5a>
			{
				estado = WAITING_CARD;
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <rfid_debounce+0xc8>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
						initial_time = 0;
						estado = REMOVING_CARD;
					}
				}
			}
			break;
 8000280:	e02d      	b.n	80002de <rfid_debounce+0xb6>
				current_time = HAL_GetTick();
 8000282:	f002 fac5 	bl	8002810 <HAL_GetTick>
 8000286:	60b8      	str	r0, [r7, #8]
				if (current_time - initial_time >= DETECTION_TIMEOUT)
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <rfid_debounce+0xcc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000294:	d323      	bcc.n	80002de <rfid_debounce+0xb6>
					if (rfid_identify_card() == CARD_DETECTED)
 8000296:	f000 f82f 	bl	80002f8 <rfid_identify_card>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d108      	bne.n	80002b2 <rfid_debounce+0x8a>
						initial_time = 0;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <rfid_debounce+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
						estado = REMOVING_CARD;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <rfid_debounce+0xc8>)
 80002a8:	2202      	movs	r2, #2
 80002aa:	701a      	strb	r2, [r3, #0]
						return_value = CARD_DETECTED;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
			break;
 80002b0:	e015      	b.n	80002de <rfid_debounce+0xb6>
						initial_time = 0;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <rfid_debounce+0xcc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
						estado = REMOVING_CARD;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <rfid_debounce+0xc8>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
			break;
 80002be:	e00e      	b.n	80002de <rfid_debounce+0xb6>

		case REMOVING_CARD:
			return_value = CARD_NOT_FOUND;
 80002c0:	2301      	movs	r3, #1
 80002c2:	73fb      	strb	r3, [r7, #15]
			if (rfid_find_card(id) == CARD_NOT_FOUND)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f856 	bl	8000378 <rfid_find_card>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d107      	bne.n	80002e2 <rfid_debounce+0xba>
			{
				estado = WAITING_CARD;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <rfid_debounce+0xc8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80002d8:	e003      	b.n	80002e2 <rfid_debounce+0xba>
			break;
 80002da:	bf00      	nop
 80002dc:	e002      	b.n	80002e4 <rfid_debounce+0xbc>
			break;
 80002de:	bf00      	nop
 80002e0:	e000      	b.n	80002e4 <rfid_debounce+0xbc>
			break;
 80002e2:	bf00      	nop
	}
	return return_value;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000009d 	.word	0x2000009d
 80002f4:	200000a0 	.word	0x200000a0

080002f8 <rfid_identify_card>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not detected.
 *					CARD_DETECTED 	if card was detected.
 */
uint8_t rfid_identify_card(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t id[4];
	uint8_t valid_id[2*4];

	status = rfid_find_card(id);
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f838 	bl	8000378 <rfid_find_card>
 8000308:	4603      	mov	r3, r0
 800030a:	73bb      	strb	r3, [r7, #14]
	if (status == CARD_DETECTED)
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12b      	bne.n	800036a <rfid_identify_card+0x72>
	{

		xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <rfid_identify_card+0x7c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800031a:	4618      	mov	r0, r3
 800031c:	f007 fb36 	bl	800798c <xQueueSemaphoreTake>
		eeprom_read_page(RFID_INIT_PAGE, 0, valid_id, 8);
 8000320:	463a      	mov	r2, r7
 8000322:	2308      	movs	r3, #8
 8000324:	2100      	movs	r1, #0
 8000326:	2003      	movs	r0, #3
 8000328:	f000 fe47 	bl	8000fba <eeprom_read_page>
		xSemaphoreGive(sem_eeprom);
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <rfid_identify_card+0x7c>)
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	2300      	movs	r3, #0
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	f007 f99d 	bl	8007674 <xQueueGenericSend>

		for (uint8_t n = 0; n < 2; n++)
 800033a:	2300      	movs	r3, #0
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	e011      	b.n	8000364 <rfid_identify_card+0x6c>
		{
			if( memcmp(&valid_id[n*4], id, 4) == 0)
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	463a      	mov	r2, r7
 8000346:	4413      	add	r3, r2
 8000348:	f107 0108 	add.w	r1, r7, #8
 800034c:	2204      	movs	r2, #4
 800034e:	4618      	mov	r0, r3
 8000350:	f009 f952 	bl	80095f8 <memcmp>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d101      	bne.n	800035e <rfid_identify_card+0x66>
				return CARD_DETECTED;
 800035a:	2300      	movs	r3, #0
 800035c:	e006      	b.n	800036c <rfid_identify_card+0x74>
		for (uint8_t n = 0; n < 2; n++)
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	3301      	adds	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d9ea      	bls.n	8000340 <rfid_identify_card+0x48>
		}
	}

	// Si todavia no se retorno
	return CARD_NOT_FOUND;
 800036a:	2301      	movs	r3, #1
}
 800036c:	4618      	mov	r0, r3
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20003cb0 	.word	0x20003cb0

08000378 <rfid_find_card>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not detected.
 *					CARD_DETECTED 	if card was detected.
 */
uint8_t rfid_find_card( uint8_t* id)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t cardstr[MAX_LEN+1];

	status = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	77fb      	strb	r3, [r7, #31]
	memset(cardstr,0,sizeof(cardstr));
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	2211      	movs	r2, #17
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f009 f94f 	bl	8009630 <memset>
	status = (uint8_t) MFRC522_Request(PICC_REQIDL, cardstr);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	2026      	movs	r0, #38	; 0x26
 800039a:	f000 f917 	bl	80005cc <MFRC522_Request>
 800039e:	4603      	mov	r3, r0
 80003a0:	77fb      	strb	r3, [r7, #31]
	if (status == MI_OK)
 80003a2:	7ffb      	ldrb	r3, [r7, #31]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d111      	bne.n	80003cc <rfid_find_card+0x54>
	{
		HAL_Delay(2);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f002 fa3b 	bl	8002824 <HAL_Delay>
		MFRC522_Anticoll(cardstr);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f9f5 	bl	80007a2 <MFRC522_Anticoll>
 80003b8:	68fa      	ldr	r2, [r7, #12]
		memcpy(id, &cardstr , 4);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
		MFRC522_Halt();
 80003be:	f000 fa76 	bl	80008ae <MFRC522_Halt>
		HAL_Delay(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f002 fa2e 	bl	8002824 <HAL_Delay>
		return CARD_DETECTED;
 80003c8:	2300      	movs	r3, #0
 80003ca:	e000      	b.n	80003ce <rfid_find_card+0x56>
	}

	// Si todavia no se retorno
	return CARD_NOT_FOUND;
 80003cc:	2301      	movs	r3, #1
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <Write_MFRC522>:
 * Input Parameters:
 * 					addr - register address
 * 					val  - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	4613      	mov	r3, r2
 80003e6:	71bb      	strb	r3, [r7, #6]
	u_char addr_bits = ((addr<<1) & 0x7E);
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <Write_MFRC522+0x68>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <Write_MFRC522+0x6c>)
 80003fc:	8811      	ldrh	r1, [r2, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f003 fb0a 	bl	8003a1a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &addr_bits, 1, 500);
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <Write_MFRC522+0x70>)
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	f107 010f 	add.w	r1, r7, #15
 800040e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000412:	2201      	movs	r2, #1
 8000414:	f005 fefa 	bl	800620c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi, &val, 1, 500);
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <Write_MFRC522+0x70>)
 800041a:	6818      	ldr	r0, [r3, #0]
 800041c:	1db9      	adds	r1, r7, #6
 800041e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000422:	2201      	movs	r2, #1
 8000424:	f005 fef2 	bl	800620c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <Write_MFRC522+0x68>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <Write_MFRC522+0x6c>)
 800042e:	8811      	ldrh	r1, [r2, #0]
 8000430:	2201      	movs	r2, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f003 faf1 	bl	8003a1a <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000090 	.word	0x20000090
 8000444:	20000094 	.word	0x20000094
 8000448:	20000098 	.word	0x20000098

0800044c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters:
 * 					addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
    u_char rx_bits;
    u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	b25b      	sxtb	r3, r3
 800045c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000460:	b25b      	sxtb	r3, r3
 8000462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000466:	b25b      	sxtb	r3, r3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <Read_MFRC522+0x70>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <Read_MFRC522+0x74>)
 8000472:	8811      	ldrh	r1, [r2, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f003 facf 	bl	8003a1a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr_bits, 1, 500);
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <Read_MFRC522+0x78>)
 800047e:	6818      	ldr	r0, [r3, #0]
 8000480:	f107 010e 	add.w	r1, r7, #14
 8000484:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000488:	2201      	movs	r2, #1
 800048a:	f005 febf 	bl	800620c <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, &rx_bits, 1, 500);
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <Read_MFRC522+0x78>)
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f107 010f 	add.w	r1, r7, #15
 8000496:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800049a:	2201      	movs	r2, #1
 800049c:	f005 fff2 	bl	8006484 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <Read_MFRC522+0x70>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <Read_MFRC522+0x74>)
 80004a6:	8811      	ldrh	r1, [r2, #0]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fab5 	bl	8003a1a <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000090 	.word	0x20000090
 80004c0:	20000094 	.word	0x20000094
 80004c4:	20000098 	.word	0x20000098

080004c8 <SetBitMask>:
 * 					reg  - register address
 * 					mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffb6 	bl	800044c <Read_MFRC522>
 80004e0:	4603      	mov	r3, r0
 80004e2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff71 	bl	80003d8 <Write_MFRC522>
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <ClearBitMask>:
 * 					reg  - register address
 * 					mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b084      	sub	sp, #16
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	460a      	mov	r2, r1
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	4613      	mov	r3, r2
 800050c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff9b 	bl	800044c <Read_MFRC522>
 8000516:	4603      	mov	r3, r0
 8000518:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800051a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800051e:	43db      	mvns	r3, r3
 8000520:	b25a      	sxtb	r2, r3
 8000522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000526:	4013      	ands	r3, r2
 8000528:	b25b      	sxtb	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff51 	bl	80003d8 <Write_MFRC522>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 8000542:	2103      	movs	r1, #3
 8000544:	2014      	movs	r0, #20
 8000546:	f7ff ffbf 	bl	80004c8 <SetBitMask>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}

0800054e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000552:	210f      	movs	r1, #15
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ff3f 	bl	80003d8 <Write_MFRC522>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(SPI_HandleTypeDef *s, GPIO_TypeDef *g, uint16_t pin)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	4613      	mov	r3, r2
 800056c:	80fb      	strh	r3, [r7, #6]
	spi = s;
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <MFRC522_Init+0x60>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6013      	str	r3, [r2, #0]
	RC522_CS_GPIO_Port = g;
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MFRC522_Init+0x64>)
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6013      	str	r3, [r2, #0]
	RC522_CS_Pin = pin;
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <MFRC522_Init+0x68>)
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	8013      	strh	r3, [r2, #0]

	//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
    MFRC522_Reset();
 8000580:	f7ff ffe5 	bl	800054e <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	202a      	movs	r0, #42	; 0x2a
 8000588:	f7ff ff26 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 800058c:	21a9      	movs	r1, #169	; 0xa9
 800058e:	202b      	movs	r0, #43	; 0x2b
 8000590:	f7ff ff22 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TReloadRegL, 0x03); //30);
 8000594:	2103      	movs	r1, #3
 8000596:	202d      	movs	r0, #45	; 0x2d
 8000598:	f7ff ff1e 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TReloadRegH, 0xE8); //0);
 800059c:	21e8      	movs	r1, #232	; 0xe8
 800059e:	202c      	movs	r0, #44	; 0x2c
 80005a0:	f7ff ff1a 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	2015      	movs	r0, #21
 80005a8:	f7ff ff16 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80005ac:	213d      	movs	r1, #61	; 0x3d
 80005ae:	2011      	movs	r0, #17
 80005b0:	f7ff ff12 	bl	80003d8 <Write_MFRC522>

    // turn antenna on
    AntennaOn();
 80005b4:	f7ff ffc3 	bl	800053e <AntennaOn>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000098 	.word	0x20000098
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000094 	.word	0x20000094

080005cc <MFRC522_Request>:
 *    						0x0800 = Mifare_Pro(X)
 *    						0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
	u_char status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80005d8:	2107      	movs	r1, #7
 80005da:	200d      	movs	r0, #13
 80005dc:	f7ff fefc 	bl	80003d8 <Write_MFRC522>

	TagType[0] = reqMode;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2201      	movs	r2, #1
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	200c      	movs	r0, #12
 80005f4:	f000 f80f 	bl	8000616 <MFRC522_ToCard>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <MFRC522_Request+0x3c>
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b10      	cmp	r3, #16
 8000606:	d001      	beq.n	800060c <MFRC522_Request+0x40>
	status = MI_ERR;
 8000608:	2302      	movs	r3, #2
 800060a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <MFRC522_ToCard>:
 *			 		backData - Received the card returns data,
 *			 		backLen  - Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000616:	b590      	push	{r4, r7, lr}
 8000618:	b089      	sub	sp, #36	; 0x24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	4613      	mov	r3, r2
 8000626:	73bb      	strb	r3, [r7, #14]
	u_char status = MI_ERR;
 8000628:	2302      	movs	r3, #2
 800062a:	77fb      	strb	r3, [r7, #31]
	u_char irqEn = 0x00;
 800062c:	2300      	movs	r3, #0
 800062e:	77bb      	strb	r3, [r7, #30]
	u_char waitIRq = 0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	777b      	strb	r3, [r7, #29]
	u_char lastBits;
	u_char n;
	uint i;

	switch (command)
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b0c      	cmp	r3, #12
 8000638:	d006      	beq.n	8000648 <MFRC522_ToCard+0x32>
 800063a:	2b0e      	cmp	r3, #14
 800063c:	d109      	bne.n	8000652 <MFRC522_ToCard+0x3c>
	{
	case PCD_AUTHENT:     // Certification cards close
	  {
		irqEn = 0x12;
 800063e:	2312      	movs	r3, #18
 8000640:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8000642:	2310      	movs	r3, #16
 8000644:	777b      	strb	r3, [r7, #29]
		break;
 8000646:	e005      	b.n	8000654 <MFRC522_ToCard+0x3e>
	  }
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	  {
		irqEn = 0x77;
 8000648:	2377      	movs	r3, #119	; 0x77
 800064a:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 800064c:	2330      	movs	r3, #48	; 0x30
 800064e:	777b      	strb	r3, [r7, #29]
		break;
 8000650:	e000      	b.n	8000654 <MFRC522_ToCard+0x3e>
	  }
	default:
	  break;
 8000652:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8000654:	7fbb      	ldrb	r3, [r7, #30]
 8000656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	2002      	movs	r0, #2
 8000660:	f7ff feba 	bl	80003d8 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	2004      	movs	r0, #4
 8000668:	f7ff ff49 	bl	80004fe <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	200a      	movs	r0, #10
 8000670:	f7ff ff2a 	bl	80004c8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff feae 	bl	80003d8 <Write_MFRC522>

	// Writing data to the FIFO
	for (i=0; i<sendLen; i++)
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	e00a      	b.n	8000698 <MFRC522_ToCard+0x82>
	{
	Write_MFRC522(FIFODataReg, sendData[i]);
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2009      	movs	r0, #9
 800068e:	f7ff fea3 	bl	80003d8 <Write_MFRC522>
	for (i=0; i<sendLen; i++)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	3301      	adds	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3f0      	bcc.n	8000682 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4619      	mov	r1, r3
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fe97 	bl	80003d8 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE)
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	d103      	bne.n	80006b8 <MFRC522_ToCard+0xa2>
	{
	SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	200d      	movs	r0, #13
 80006b4:	f7ff ff08 	bl	80004c8 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006bc:	61bb      	str	r3, [r7, #24]
	do
	{
	// CommIrqReg[7..0]
	// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
	n = Read_MFRC522(CommIrqReg);
 80006be:	2004      	movs	r0, #4
 80006c0:	f7ff fec4 	bl	800044c <Read_MFRC522>
 80006c4:	4603      	mov	r3, r0
 80006c6:	773b      	strb	r3, [r7, #28]
	i--;
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <MFRC522_ToCard+0xd4>
 80006d4:	7f3b      	ldrb	r3, [r7, #28]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <MFRC522_ToCard+0xd4>
 80006de:	7f3a      	ldrb	r2, [r7, #28]
 80006e0:	7f7b      	ldrb	r3, [r7, #29]
 80006e2:	4013      	ands	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0e9      	beq.n	80006be <MFRC522_ToCard+0xa8>

	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	200d      	movs	r0, #13
 80006ee:	f7ff ff06 	bl	80004fe <ClearBitMask>

	if (i != 0)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d04f      	beq.n	8000798 <MFRC522_ToCard+0x182>
	{
		if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80006f8:	2006      	movs	r0, #6
 80006fa:	f7ff fea7 	bl	800044c <Read_MFRC522>
 80006fe:	4603      	mov	r3, r0
 8000700:	f003 031b 	and.w	r3, r3, #27
 8000704:	2b00      	cmp	r3, #0
 8000706:	d147      	bne.n	8000798 <MFRC522_ToCard+0x182>
		{
		  status = MI_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
		  if (n & irqEn & 0x01)
 800070c:	7f3a      	ldrb	r2, [r7, #28]
 800070e:	7fbb      	ldrb	r3, [r7, #30]
 8000710:	4013      	ands	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MFRC522_ToCard+0x10a>
		  {
			status = MI_NOTAGERR;             // ??
 800071c:	2301      	movs	r3, #1
 800071e:	77fb      	strb	r3, [r7, #31]
		  }

		  if (command == PCD_TRANSCEIVE)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b0c      	cmp	r3, #12
 8000724:	d138      	bne.n	8000798 <MFRC522_ToCard+0x182>
		  {
			n = Read_MFRC522(FIFOLevelReg);
 8000726:	200a      	movs	r0, #10
 8000728:	f7ff fe90 	bl	800044c <Read_MFRC522>
 800072c:	4603      	mov	r3, r0
 800072e:	773b      	strb	r3, [r7, #28]
			lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000730:	200c      	movs	r0, #12
 8000732:	f7ff fe8b 	bl	800044c <Read_MFRC522>
 8000736:	4603      	mov	r3, r0
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	75fb      	strb	r3, [r7, #23]
			if (lastBits)
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <MFRC522_ToCard+0x140>
			{
			  *backLen = (n-1)*8 + lastBits;
 8000744:	7f3b      	ldrb	r3, [r7, #28]
 8000746:	3b01      	subs	r3, #1
 8000748:	00da      	lsls	r2, r3, #3
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	4413      	add	r3, r2
 800074e:	461a      	mov	r2, r3
 8000750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e004      	b.n	8000760 <MFRC522_ToCard+0x14a>
			}
			else
			{
			  *backLen = n*8;
 8000756:	7f3b      	ldrb	r3, [r7, #28]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	461a      	mov	r2, r3
 800075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075e:	601a      	str	r2, [r3, #0]
			}

			if (n == 0)
 8000760:	7f3b      	ldrb	r3, [r7, #28]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <MFRC522_ToCard+0x154>
			{
			  n = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	773b      	strb	r3, [r7, #28]
			}
			if (n > MAX_LEN)
 800076a:	7f3b      	ldrb	r3, [r7, #28]
 800076c:	2b10      	cmp	r3, #16
 800076e:	d901      	bls.n	8000774 <MFRC522_ToCard+0x15e>
			{
			  n = MAX_LEN;
 8000770:	2310      	movs	r3, #16
 8000772:	773b      	strb	r3, [r7, #28]
			}

			// Reading the received data in FIFO
			for (i=0; i<n; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	e00a      	b.n	8000790 <MFRC522_ToCard+0x17a>
			{
			  backData[i] = Read_MFRC522(FIFODataReg);
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	18d4      	adds	r4, r2, r3
 8000780:	2009      	movs	r0, #9
 8000782:	f7ff fe63 	bl	800044c <Read_MFRC522>
 8000786:	4603      	mov	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
			for (i=0; i<n; i++)
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	3301      	adds	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	7f3b      	ldrb	r3, [r7, #28]
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3f0      	bcc.n	800077a <MFRC522_ToCard+0x164>
			}
		  }
		}
	}

	return status;
 8000798:	7ffb      	ldrb	r3, [r7, #31]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}

080007a2 <MFRC522_Anticoll>:
 * Input parameters:
 * 					serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af02      	add	r7, sp, #8
 80007a8:	6078      	str	r0, [r7, #4]
	u_char status;
	u_char i;
	u_char serNumCheck=0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	737b      	strb	r3, [r7, #13]
	uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80007ae:	2100      	movs	r1, #0
 80007b0:	200d      	movs	r0, #13
 80007b2:	f7ff fe11 	bl	80003d8 <Write_MFRC522>
	serNum[0] = PICC_ANTICOLL;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2293      	movs	r2, #147	; 0x93
 80007ba:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	2220      	movs	r2, #32
 80007c2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2202      	movs	r2, #2
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	200c      	movs	r0, #12
 80007d2:	f7ff ff20 	bl	8000616 <MFRC522_ToCard>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d118      	bne.n	8000812 <MFRC522_Anticoll+0x70>
	{
		//Check card serial number
		for (i=0; i<4; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	73bb      	strb	r3, [r7, #14]
 80007e4:	e009      	b.n	80007fa <MFRC522_Anticoll+0x58>
		{
		  serNumCheck ^= serNum[i];
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	7b7b      	ldrb	r3, [r7, #13]
 80007f0:	4053      	eors	r3, r2
 80007f2:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	3301      	adds	r3, #1
 80007f8:	73bb      	strb	r3, [r7, #14]
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d9f2      	bls.n	80007e6 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	7b7a      	ldrb	r2, [r7, #13]
 800080a:	429a      	cmp	r2, r3
 800080c:	d001      	beq.n	8000812 <MFRC522_Anticoll+0x70>
		{
		  status = MI_ERR;
 800080e:	2302      	movs	r3, #2
 8000810:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <CalulateCRC>:
 * 					len 	 - the data length
 * 					pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	460b      	mov	r3, r1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	72fb      	strb	r3, [r7, #11]
	u_char i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 800082a:	2104      	movs	r1, #4
 800082c:	2005      	movs	r0, #5
 800082e:	f7ff fe66 	bl	80004fe <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	200a      	movs	r0, #10
 8000836:	f7ff fe47 	bl	80004c8 <SetBitMask>

	//Writing data to the FIFO
	for (i=0; i<len; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e00a      	b.n	8000856 <CalulateCRC+0x3a>
	{
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	2009      	movs	r0, #9
 800084c:	f7ff fdc4 	bl	80003d8 <Write_MFRC522>
	for (i=0; i<len; i++)
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	3301      	adds	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]
 8000856:	7dfa      	ldrb	r2, [r7, #23]
 8000858:	7afb      	ldrb	r3, [r7, #11]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3f0      	bcc.n	8000840 <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 800085e:	2103      	movs	r1, #3
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fdb9 	bl	80003d8 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 800086a:	2005      	movs	r0, #5
 800086c:	f7ff fdee 	bl	800044c <Read_MFRC522>
 8000870:	4603      	mov	r3, r0
 8000872:	75bb      	strb	r3, [r7, #22]
		i--;
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3b01      	subs	r3, #1
 8000878:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d004      	beq.n	800088a <CalulateCRC+0x6e>
 8000880:	7dbb      	ldrb	r3, [r7, #22]
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0ef      	beq.n	800086a <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 800088a:	2022      	movs	r0, #34	; 0x22
 800088c:	f7ff fdde 	bl	800044c <Read_MFRC522>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5c      	adds	r4, r3, #1
 800089c:	2021      	movs	r0, #33	; 0x21
 800089e:	f7ff fdd5 	bl	800044c <Read_MFRC522>
 80008a2:	4603      	mov	r3, r0
 80008a4:	7023      	strb	r3, [r4, #0]
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}

080008ae <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af02      	add	r7, sp, #8
	u_char status;
	uint unLen;
	u_char buff[4];

	buff[0] = PICC_HALT;
 80008b4:	2350      	movs	r3, #80	; 0x50
 80008b6:	713b      	strb	r3, [r7, #4]
	buff[1] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	717b      	strb	r3, [r7, #5]
	CalulateCRC(buff, 2, &buff[2]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	1c9a      	adds	r2, r3, #2
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffa9 	bl	800081c <CalulateCRC>

	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	1d39      	adds	r1, r7, #4
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4613      	mov	r3, r2
 80008d6:	2204      	movs	r2, #4
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff fe9c 	bl	8000616 <MFRC522_ToCard>
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
	UNUSED(status);
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_ADC_ConvCpltCallback>:
/* ---------  Variables de estado ------------*/
static ADC_HandleTypeDef* adc;
/* ===========================================*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	BaseType_t pxTaskWoken;
	cambiar_punteros();
 80008f4:	f000 f85a 	bl	80009ac <cambiar_punteros>
	xSemaphoreGiveFromISR(sem_DMA,&pxTaskWoken);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f006 ffb4 	bl	8007870 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(pxTaskWoken);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d007      	beq.n	800091e <HAL_ADC_ConvCpltCallback+0x32>
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_ADC_ConvCpltCallback+0x40>)
 8000910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	f3bf 8f6f 	isb	sy
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20003d28 	.word	0x20003d28
 800092c:	e000ed04 	.word	0xe000ed04

08000930 <inic_punteros>:


void inic_punteros(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	memset(datos_adc_1,0,sizeof(datos_adc_1));
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	2100      	movs	r1, #0
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <inic_punteros+0x28>)
 800093a:	f008 fe79 	bl	8009630 <memset>
	memset(datos_adc_2,0,sizeof(datos_adc_2));
 800093e:	2240      	movs	r2, #64	; 0x40
 8000940:	2100      	movs	r1, #0
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <inic_punteros+0x2c>)
 8000944:	f008 fe74 	bl	8009630 <memset>
	datos_adc_dma = datos_adc_1;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <inic_punteros+0x30>)
 800094a:	4a03      	ldr	r2, [pc, #12]	; (8000958 <inic_punteros+0x28>)
 800094c:	601a      	str	r2, [r3, #0]
	datos_adc_uso = datos_adc_2;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <inic_punteros+0x34>)
 8000950:	4a02      	ldr	r2, [pc, #8]	; (800095c <inic_punteros+0x2c>)
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20003d94 	.word	0x20003d94
 800095c:	20003c70 	.word	0x20003c70
 8000960:	20003dd4 	.word	0x20003dd4
 8000964:	20003d8c 	.word	0x20003d8c

08000968 <adc_init>:

void adc_init(ADC_HandleTypeDef* handler)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	adc = handler;
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <adc_init+0x3c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
	HAL_ADCEx_Calibration_Start(adc);
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <adc_init+0x3c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fb38 	bl	8002ff0 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(100);
 8000980:	2064      	movs	r0, #100	; 0x64
 8000982:	f001 ff4f 	bl	8002824 <HAL_Delay>
	inic_punteros();
 8000986:	f7ff ffd3 	bl	8000930 <inic_punteros>
	adc_buffer.power_supply = 0xFFFFFFFF;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <adc_init+0x40>)
 800098c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000990:	601a      	str	r2, [r3, #0]
	adc_buffer.batt = 0xFFFFFFFF;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <adc_init+0x40>)
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000998:	605a      	str	r2, [r3, #4]

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	20003d84 	.word	0x20003d84

080009ac <cambiar_punteros>:


void cambiar_punteros(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	if(datos_adc_dma == datos_adc_1)
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <cambiar_punteros+0x30>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <cambiar_punteros+0x34>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <cambiar_punteros+0x1c>
	{
		datos_adc_dma = datos_adc_2;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <cambiar_punteros+0x30>)
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <cambiar_punteros+0x38>)
 80009be:	601a      	str	r2, [r3, #0]
		datos_adc_uso = datos_adc_1;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <cambiar_punteros+0x3c>)
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <cambiar_punteros+0x34>)
 80009c4:	601a      	str	r2, [r3, #0]
	else
	{
		datos_adc_dma = datos_adc_1;
		datos_adc_uso = datos_adc_2;
	}
}
 80009c6:	e005      	b.n	80009d4 <cambiar_punteros+0x28>
		datos_adc_dma = datos_adc_1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <cambiar_punteros+0x30>)
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <cambiar_punteros+0x34>)
 80009cc:	601a      	str	r2, [r3, #0]
		datos_adc_uso = datos_adc_2;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <cambiar_punteros+0x3c>)
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <cambiar_punteros+0x38>)
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20003dd4 	.word	0x20003dd4
 80009e0:	20003d94 	.word	0x20003d94
 80009e4:	20003c70 	.word	0x20003c70
 80009e8:	20003d8c 	.word	0x20003d8c

080009ec <tarea_conversiones>:


void tarea_conversiones(void *p)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_ADC_Start_DMA(adc, (uint32_t*)datos_adc_dma, N_SAMPLES);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <tarea_conversiones+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <tarea_conversiones+0x24>)
 80009fa:	6811      	ldr	r1, [r2, #0]
 80009fc:	2220      	movs	r2, #32
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f80c 	bl	8002a1c <HAL_ADC_Start_DMA>
		vTaskDelay(TS_MS);
 8000a04:	200a      	movs	r0, #10
 8000a06:	f007 fb71 	bl	80080ec <vTaskDelay>
		HAL_ADC_Start_DMA(adc, (uint32_t*)datos_adc_dma, N_SAMPLES);
 8000a0a:	e7f3      	b.n	80009f4 <tarea_conversiones+0x8>
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	20003dd4 	.word	0x20003dd4

08000a14 <update_adc>:
	}
}

void update_adc(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	if (xSemaphoreTake(sem_DMA,portMAX_DELAY) == pdTRUE)
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <update_adc+0x80>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 ffb2 	bl	800798c <xQueueSemaphoreTake>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d12d      	bne.n	8000a8a <update_adc+0x76>
	{
		uint32_t i, x, y;
		x = y = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < N_SAMPLES / 2; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e017      	b.n	8000a6c <update_adc+0x58>
		{
			x += datos_adc_uso[i * 2 + 1];
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <update_adc+0x84>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60bb      	str	r3, [r7, #8]
			y += datos_adc_uso[i * 2 + 0];
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <update_adc+0x84>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	607b      	str	r3, [r7, #4]
		for (i = 0; i < N_SAMPLES / 2; i++)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d9e4      	bls.n	8000a3c <update_adc+0x28>
		}
		x /= N_SAMPLES / 2;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
		y /= N_SAMPLES / 2;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	607b      	str	r3, [r7, #4]
		adc_buffer.power_supply = x;
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <update_adc+0x88>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	6013      	str	r3, [r2, #0]
		adc_buffer.batt = y;
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <update_adc+0x88>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6053      	str	r3, [r2, #4]
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20003d28 	.word	0x20003d28
 8000a98:	20003d8c 	.word	0x20003d8c
 8000a9c:	20003d84 	.word	0x20003d84

08000aa0 <fsm_power_supply>:

void fsm_power_supply(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	static uint8_t state;

	switch(state)
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <fsm_power_supply+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <fsm_power_supply+0x12>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d00c      	beq.n	8000aca <fsm_power_supply+0x2a>
 8000ab0:	e018      	b.n	8000ae4 <fsm_power_supply+0x44>
	{
		case WITH_POWER:
			if (adc_buffer.power_supply < 1000)
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <fsm_power_supply+0x5c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aba:	d217      	bcs.n	8000aec <fsm_power_supply+0x4c>
			{
				save_event(EVENT_POWER_OFF);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 faa3 	bl	8001008 <save_event>
				state = WITHOUT_POWER;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <fsm_power_supply+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ac8:	e010      	b.n	8000aec <fsm_power_supply+0x4c>
		case WITHOUT_POWER:
			if (adc_buffer.power_supply > 2500)
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <fsm_power_supply+0x5c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d90c      	bls.n	8000af0 <fsm_power_supply+0x50>
			{
				save_event(EVENT_POWER_ON);
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f000 fa96 	bl	8001008 <save_event>
				state = WITH_POWER;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <fsm_power_supply+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ae2:	e005      	b.n	8000af0 <fsm_power_supply+0x50>

		default:
			state = WITH_POWER;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <fsm_power_supply+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aea:	e002      	b.n	8000af2 <fsm_power_supply+0x52>
			break;
 8000aec:	bf00      	nop
 8000aee:	e000      	b.n	8000af2 <fsm_power_supply+0x52>
			break;
 8000af0:	bf00      	nop
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000a8 	.word	0x200000a8
 8000afc:	20003d84 	.word	0x20003d84

08000b00 <adc_get_batt_level>:

uint8_t adc_get_batt_level( void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	if ( adc_buffer.batt < SIN_BATT){
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <adc_get_batt_level+0x3c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d801      	bhi.n	8000b14 <adc_get_batt_level+0x14>
		return BATERIA_DESCARGADA;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e00f      	b.n	8000b34 <adc_get_batt_level+0x34>
	}else if ( adc_buffer.batt < POCA_BATT){
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <adc_get_batt_level+0x3c>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000b1c:	d201      	bcs.n	8000b22 <adc_get_batt_level+0x22>
		return BATERIA_POCA_CARGA;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e008      	b.n	8000b34 <adc_get_batt_level+0x34>
	}else if ( adc_buffer.batt < MEDIA_BATT){
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <adc_get_batt_level+0x3c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f640 3253 	movw	r2, #2899	; 0xb53
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d801      	bhi.n	8000b32 <adc_get_batt_level+0x32>
		return BATERIA_NORMAL;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e000      	b.n	8000b34 <adc_get_batt_level+0x34>
	}else
	{
		return BATERIA_LLENA;
 8000b32:	2303      	movs	r3, #3
	}
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20003d84 	.word	0x20003d84

08000b40 <inicializar_arrebote>:


#include "main.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	883a      	ldrh	r2, [r7, #0]
 8000b54:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	719a      	strb	r2, [r3, #6]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	79db      	ldrb	r3, [r3, #7]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4053      	eors	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d866      	bhi.n	8000c86 <chequear_arrebote+0xfa>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <chequear_arrebote+0x34>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000bf3 	.word	0x08000bf3
 8000bc8:	08000c29 	.word	0x08000c29
 8000bcc:	08000c4b 	.word	0x08000c4b
	{
	case 0:
		if (boton)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	885a      	ldrh	r2, [r3, #2]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	719a      	strb	r2, [r3, #6]
		break;
 8000bf0:	e049      	b.n	8000c86 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	801a      	strh	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d13c      	bne.n	8000c80 <chequear_arrebote+0xf4>
		{
			if (boton)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 8000c1e:	e02f      	b.n	8000c80 <chequear_arrebote+0xf4>
				s->estado = 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	711a      	strb	r2, [r3, #4]
		break;
 8000c26:	e02b      	b.n	8000c80 <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	885a      	ldrh	r2, [r3, #2]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	719a      	strb	r2, [r3, #6]
		break;
 8000c48:	e01d      	b.n	8000c86 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	801a      	strh	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d112      	bne.n	8000c84 <chequear_arrebote+0xf8>
		{
			if (!boton)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000c76:	e005      	b.n	8000c84 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	711a      	strb	r2, [r3, #4]
		break;
 8000c7e:	e001      	b.n	8000c84 <chequear_arrebote+0xf8>
		break;
 8000c80:	bf00      	nop
 8000c82:	e000      	b.n	8000c86 <chequear_arrebote+0xfa>
		break;
 8000c84:	bf00      	nop
	}
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	795b      	ldrb	r3, [r3, #5]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <hay_flanco_arrebote+0x1c>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <hay_flanco_arrebote+0x1c>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <hay_flanco_arrebote+0x1e>
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <init_eeprom>:
 * Input Parameters:
 * 					I2C_HandleTypeDef *s - Handler del I2C
 * Return value: None.
 */
void init_eeprom(I2C_HandleTypeDef *s)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	i2c = s;
 8000cc0:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <init_eeprom+0x1f0>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
	uint8_t wbuff[EEPROM_PAGE_SIZE];
	uint32_t id;

	// Escribimos toda la memoria con 0xFF
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ccc:	e024      	b.n	8000d18 <init_eeprom+0x60>
	{
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cd4:	e00c      	b.n	8000cf0 <init_eeprom+0x38>
			wbuff[i] = 255;
 8000cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cde:	4413      	add	r3, r2
 8000ce0:	22ff      	movs	r2, #255	; 0xff
 8000ce2:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cea:	3301      	adds	r3, #1
 8000cec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9ee      	bls.n	8000cd6 <init_eeprom+0x1e>
		eeprom_write_page(page, 0, wbuff, EEPROM_PAGE_SIZE);
 8000cf8:	f107 0218 	add.w	r2, r7, #24
 8000cfc:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8000d00:	2308      	movs	r3, #8
 8000d02:	2100      	movs	r1, #0
 8000d04:	f000 f930 	bl	8000f68 <eeprom_write_page>
		HAL_Delay(10);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f001 fd8b 	bl	8002824 <HAL_Delay>
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d12:	3301      	adds	r3, #1
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1c:	2b1f      	cmp	r3, #31
 8000d1e:	d9d6      	bls.n	8000cce <init_eeprom+0x16>
	}

	// Cargo valores por default de Signature
	memcpy(wbuff, "tecnicas",8);
 8000d20:	4a62      	ldr	r2, [pc, #392]	; (8000eac <init_eeprom+0x1f4>)
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2a:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(ID_INIT_PAGE, 0, wbuff, EEPROM_PAGE_SIZE);
 8000d2e:	f107 0218 	add.w	r2, r7, #24
 8000d32:	2308      	movs	r3, #8
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f916 	bl	8000f68 <eeprom_write_page>
	HAL_Delay(10);
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f001 fd71 	bl	8002824 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d48:	e00c      	b.n	8000d64 <init_eeprom+0xac>
		wbuff[i] = 0;
 8000d4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d52:	4413      	add	r3, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	d9ee      	bls.n	8000d4a <init_eeprom+0x92>

	memcpy(wbuff, "digitale",8);
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <init_eeprom+0x1f8>)
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(ID_INIT_PAGE+1, 0, wbuff, EEPROM_PAGE_SIZE);
 8000d7a:	f107 0218 	add.w	r2, r7, #24
 8000d7e:	2308      	movs	r3, #8
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 f8f0 	bl	8000f68 <eeprom_write_page>
	HAL_Delay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f001 fd4b 	bl	8002824 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d94:	e00c      	b.n	8000db0 <init_eeprom+0xf8>
		wbuff[i] = 0;
 8000d96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d9e:	4413      	add	r3, r2
 8000da0:	2200      	movs	r2, #0
 8000da2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000daa:	3301      	adds	r3, #1
 8000dac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d9ee      	bls.n	8000d96 <init_eeprom+0xde>

	// Cargo valor por default de password
	memcpy(clave, "1234", 4);
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <init_eeprom+0x1fc>)
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <init_eeprom+0x200>)
 8000dbc:	6810      	ldr	r0, [r2, #0]
 8000dbe:	6018      	str	r0, [r3, #0]
	memcpy(wbuff, "1234XXXX", 8);
 8000dc0:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <init_eeprom+0x204>)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dca:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(PASS_INIT_PAGE, 0, wbuff, EEPROM_PAGE_SIZE);
 8000dce:	f107 0218 	add.w	r2, r7, #24
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f000 f8c6 	bl	8000f68 <eeprom_write_page>
	HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 fd21 	bl	8002824 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000de8:	e00c      	b.n	8000e04 <init_eeprom+0x14c>
		wbuff[i] = 0;
 8000dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000df2:	4413      	add	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e08:	2b07      	cmp	r3, #7
 8000e0a:	d9ee      	bls.n	8000dea <init_eeprom+0x132>

	// Cargo valor por default de Tarjeta ID
	id = (uint32_t)( 2 << 24 | 50 << 16 | 121 << 8 | 195 );	// ID tarjeta blanca
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <init_eeprom+0x208>)
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
	memcpy(wbuff, &id , 4);	// Nota: Debido al endianess, se guarda LSB primero
 8000e12:	61bb      	str	r3, [r7, #24]
	eeprom_write_page(RFID_INIT_PAGE, 0, wbuff, 4);
 8000e14:	f107 0218 	add.w	r2, r7, #24
 8000e18:	2304      	movs	r3, #4
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f8a3 	bl	8000f68 <eeprom_write_page>
	HAL_Delay(10);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f001 fcfe 	bl	8002824 <HAL_Delay>
	id = (uint32_t)( 176 << 24 | 166 << 16 | 1 << 8 | 105 );	// ID llavero
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <init_eeprom+0x20c>)
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
	memcpy(wbuff, &id , 4);	// Nota: Debido al endianess, se guarda LSB primero
 8000e2e:	61bb      	str	r3, [r7, #24]
	eeprom_write_page(RFID_INIT_PAGE, 4, wbuff, 4);
 8000e30:	f107 0218 	add.w	r2, r7, #24
 8000e34:	2304      	movs	r3, #4
 8000e36:	2104      	movs	r1, #4
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f895 	bl	8000f68 <eeprom_write_page>
	HAL_Delay(10);
 8000e3e:	200a      	movs	r0, #10
 8000e40:	f001 fcf0 	bl	8002824 <HAL_Delay>

	uint8_t rbuff[EEPROM_PAGE_SIZE];
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000e4a:	e024      	b.n	8000e96 <init_eeprom+0x1de>
	{
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000e52:	e00c      	b.n	8000e6e <init_eeprom+0x1b6>
			rbuff[i] = 0;
 8000e54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e5c:	4413      	add	r3, r2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000e64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000e6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e72:	2b07      	cmp	r3, #7
 8000e74:	d9ee      	bls.n	8000e54 <init_eeprom+0x19c>
		eeprom_read_page(page, 0, rbuff, EEPROM_PAGE_SIZE);
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000e7e:	2308      	movs	r3, #8
 8000e80:	2100      	movs	r1, #0
 8000e82:	f000 f89a 	bl	8000fba <eeprom_read_page>
		HAL_Delay(10);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f001 fccc 	bl	8002824 <HAL_Delay>
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000e8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e90:	3301      	adds	r3, #1
 8000e92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000e96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e9a:	2b1f      	cmp	r3, #31
 8000e9c:	d9d6      	bls.n	8000e4c <init_eeprom+0x194>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000ac 	.word	0x200000ac
 8000eac:	080097dc 	.word	0x080097dc
 8000eb0:	080097e8 	.word	0x080097e8
 8000eb4:	20003ea0 	.word	0x20003ea0
 8000eb8:	080097f4 	.word	0x080097f4
 8000ebc:	080097fc 	.word	0x080097fc
 8000ec0:	023279c3 	.word	0x023279c3
 8000ec4:	b0a60169 	.word	0xb0a60169

08000ec8 <write_eeprom>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t write_eeprom(uint8_t addr, uint8_t* data, uint8_t size)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]

	ret =  HAL_I2C_Mem_Write(i2c, EEPROM_ADDRESS_I2C,
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <write_eeprom+0x4c>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eec:	9102      	str	r1, [sp, #8]
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	21a0      	movs	r1, #160	; 0xa0
 8000ef8:	f003 f802 	bl	8003f00 <HAL_I2C_Mem_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
							 addr, I2C_MEMADD_SIZE_8BIT,
							 data, size, HAL_MAX_DELAY);
	if (ret != HAL_OK) return EEPROM_ERROR;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <write_eeprom+0x42>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <write_eeprom+0x44>

	return EEPROM_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000ac 	.word	0x200000ac

08000f18 <read_eeprom>:
 * Return value:
 * 					EEPROM_OK si funciono la lectura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t read_eeprom(uint8_t addr, uint8_t* rbuff, uint8_t size)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]

	ret =  HAL_I2C_Mem_Read(i2c, EEPROM_ADDRESS_I2C,
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <read_eeprom+0x4c>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f3c:	9102      	str	r1, [sp, #8]
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	21a0      	movs	r1, #160	; 0xa0
 8000f48:	f003 f8d4 	bl	80040f4 <HAL_I2C_Mem_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
							addr, I2C_MEMADD_SIZE_8BIT, rbuff,
							size,  HAL_MAX_DELAY);
	if (ret != HAL_OK) return EEPROM_ERROR;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <read_eeprom+0x42>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <read_eeprom+0x44>

	return EEPROM_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000ac 	.word	0x200000ac

08000f68 <eeprom_write_page>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t eeprom_write_page(uint8_t page, uint8_t offset, uint8_t* data, uint8_t size)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	603a      	str	r2, [r7, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	460b      	mov	r3, r1
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	717b      	strb	r3, [r7, #5]
	uint8_t addr = EEPROM_INITIAL_ADDR + (page * EEPROM_PAGE_SIZE) + offset;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	4413      	add	r3, r2
 8000f88:	73fb      	strb	r3, [r7, #15]

	if (offset > EEPROM_PAGE_SIZE)	return EEPROM_ERROR;
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d901      	bls.n	8000f94 <eeprom_write_page+0x2c>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00e      	b.n	8000fb2 <eeprom_write_page+0x4a>
	if (size > EEPROM_PAGE_SIZE-offset) return EEPROM_ERROR;
 8000f94:	797a      	ldrb	r2, [r7, #5]
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	f1c3 0308 	rsb	r3, r3, #8
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dd01      	ble.n	8000fa4 <eeprom_write_page+0x3c>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e006      	b.n	8000fb2 <eeprom_write_page+0x4a>
	return write_eeprom(addr, data, size);
 8000fa4:	797a      	ldrb	r2, [r7, #5]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff8c 	bl	8000ec8 <write_eeprom>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <eeprom_read_page>:
 * Return value:
 * 					EEPROM_OK si funciono la lectura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t eeprom_read_page(uint8_t page, uint8_t offset, uint8_t* rbuff, uint8_t size)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	603a      	str	r2, [r7, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	71bb      	strb	r3, [r7, #6]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	717b      	strb	r3, [r7, #5]
	uint8_t addr = EEPROM_INITIAL_ADDR + (page * EEPROM_PAGE_SIZE);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	73fb      	strb	r3, [r7, #15]

	if (offset > EEPROM_PAGE_SIZE)	return EEPROM_ERROR;
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d901      	bls.n	8000fe0 <eeprom_read_page+0x26>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e00e      	b.n	8000ffe <eeprom_read_page+0x44>
	if (size > EEPROM_PAGE_SIZE-offset) return EEPROM_ERROR;
 8000fe0:	797a      	ldrb	r2, [r7, #5]
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	f1c3 0308 	rsb	r3, r3, #8
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dd01      	ble.n	8000ff0 <eeprom_read_page+0x36>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e006      	b.n	8000ffe <eeprom_read_page+0x44>
	return read_eeprom(addr, rbuff, size);
 8000ff0:	797a      	ldrb	r2, [r7, #5]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff8e 	bl	8000f18 <read_eeprom>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <save_event>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t save_event(uint8_t event)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	static uint8_t mem_pointer_index = 0;
	uint8_t status = EEPROM_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]

	struct eeprom_logs_block data;
	uint8_t page;
	uint8_t offset;

	page = mem_pointer_index / 2;	// Divisio-n entera
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <save_event+0xa4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]
	offset = mem_pointer_index % 2;	// Resto
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <save_event+0xa4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	737b      	strb	r3, [r7, #13]

	data.evento = event;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	72fb      	strb	r3, [r7, #11]
	data.hora = obtener_tiempo();
 800102c:	f000 fcde 	bl	80019ec <obtener_tiempo>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	723a      	strb	r2, [r7, #8]
 8001036:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800103a:	727a      	strb	r2, [r7, #9]
 800103c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001040:	72bb      	strb	r3, [r7, #10]

	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <save_event+0xa8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800104a:	4618      	mov	r0, r3
 800104c:	f006 fc9e 	bl	800798c <xQueueSemaphoreTake>
	status = eeprom_write_page(LOGS_INIT_PAGE+page, offset*4, (uint8_t*) &data, sizeof(data));
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	3304      	adds	r3, #4
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	f107 0208 	add.w	r2, r7, #8
 8001060:	2304      	movs	r3, #4
 8001062:	f7ff ff81 	bl	8000f68 <eeprom_write_page>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(sem_eeprom);
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <save_event+0xa8>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	f006 fafe 	bl	8007674 <xQueueGenericSend>

	mem_pointer_index++;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <save_event+0xa4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <save_event+0xa4>)
 8001082:	701a      	strb	r2, [r3, #0]
	mem_pointer_index %= LOGS_BLOCK_DEPTH*2;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <save_event+0xa4>)
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	08d3      	lsrs	r3, r2, #3
 800108a:	490a      	ldr	r1, [pc, #40]	; (80010b4 <save_event+0xac>)
 800108c:	fba1 3103 	umull	r3, r1, r1, r3
 8001090:	460b      	mov	r3, r1
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <save_event+0xa4>)
 800109e:	701a      	strb	r2, [r3, #0]

	return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000b0 	.word	0x200000b0
 80010b0:	20003cb0 	.word	0x20003cb0
 80010b4:	24924925 	.word	0x24924925

080010b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <vApplicationGetIdleTaskMemory+0x28>)
 80010c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	200000b4 	.word	0x200000b4
 80010e4:	20000194 	.word	0x20000194

080010e8 <led_init>:
 */
#include <own_drivers.h>


void led_init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 	LED_OFF);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <led_init+0x20>)
 80010f2:	f002 fc92 	bl	8003a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,	LED_OFF);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <led_init+0x24>)
 80010fe:	f002 fc8c 	bl	8003a1a <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40010800 	.word	0x40010800
 800110c:	40010c00 	.word	0x40010c00

08001110 <toggle_led>:

void toggle_led(uint8_t led)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	switch(led)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <toggle_led+0x16>
 8001120:	2b01      	cmp	r3, #1
 8001122:	d005      	beq.n	8001130 <toggle_led+0x20>
 8001124:	e00a      	b.n	800113c <toggle_led+0x2c>
	{
		case LED_1:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <toggle_led+0x3c>)
 800112a:	f002 fc8e 	bl	8003a4a <HAL_GPIO_TogglePin>
			break;
 800112e:	e008      	b.n	8001142 <toggle_led+0x32>
		case LED_2:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <toggle_led+0x40>)
 8001136:	f002 fc88 	bl	8003a4a <HAL_GPIO_TogglePin>
			break;
 800113a:	e002      	b.n	8001142 <toggle_led+0x32>
		default:
			Error_Handler();
 800113c:	f000 fc50 	bl	80019e0 <Error_Handler>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00

08001154 <start_buzzer>:

void start_buzzer(uint32_t ontime, uint32_t offtime, uint8_t ncycles)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	4613      	mov	r3, r2
 8001160:	71fb      	strb	r3, [r7, #7]
	uint8_t jj;
	for(jj = 0; jj < ncycles; jj++)
 8001162:	2300      	movs	r3, #0
 8001164:	75fb      	strb	r3, [r7, #23]
 8001166:	e014      	b.n	8001192 <start_buzzer+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <start_buzzer+0x50>)
 8001170:	f002 fc53 	bl	8003a1a <HAL_GPIO_WritePin>
		vTaskDelay(ontime);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f006 ffb9 	bl	80080ec <vTaskDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <start_buzzer+0x50>)
 8001182:	f002 fc4a 	bl	8003a1a <HAL_GPIO_WritePin>
		vTaskDelay(offtime);
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f006 ffb0 	bl	80080ec <vTaskDelay>
	for(jj = 0; jj < ncycles; jj++)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	3301      	adds	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
 8001192:	7dfa      	ldrb	r2, [r7, #23]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3e6      	bcc.n	8001168 <start_buzzer+0x14>
	}

}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <lcd_init>:
/* ===========================================*/



void lcd_init (I2C_HandleTypeDef *s)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	i2c = s;
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <lcd_init+0x8c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]

	// 4 bit initialization
	HAL_Delay(50);  		// wait for >40ms
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f001 fb34 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011bc:	2030      	movs	r0, #48	; 0x30
 80011be:	f000 f83b 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(5);  			// wait for >4.1ms
 80011c2:	2005      	movs	r0, #5
 80011c4:	f001 fb2e 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011c8:	2030      	movs	r0, #48	; 0x30
 80011ca:	f000 f835 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(1);  			// wait for >100us
 80011ce:	2001      	movs	r0, #1
 80011d0:	f001 fb28 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011d4:	2030      	movs	r0, #48	; 0x30
 80011d6:	f000 f82f 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(10);
 80011da:	200a      	movs	r0, #10
 80011dc:	f001 fb22 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x20);  	// 4bit mode
 80011e0:	2020      	movs	r0, #32
 80011e2:	f000 f829 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f001 fb1c 	bl	8002824 <HAL_Delay>

	// display initialization
	lcd_send_cmd (0x28); 	// Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011ec:	2028      	movs	r0, #40	; 0x28
 80011ee:	f000 f823 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f001 fb16 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80011f8:	2008      	movs	r0, #8
 80011fa:	f000 f81d 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f001 fb10 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x01);  	// clear display
 8001204:	2001      	movs	r0, #1
 8001206:	f000 f817 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f001 fb0a 	bl	8002824 <HAL_Delay>
	HAL_Delay(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f001 fb07 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001216:	2006      	movs	r0, #6
 8001218:	f000 f80e 	bl	8001238 <lcd_send_cmd>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f001 fb01 	bl	8002824 <HAL_Delay>
	lcd_send_cmd (0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001222:	200c      	movs	r0, #12
 8001224:	f000 f808 	bl	8001238 <lcd_send_cmd>
	lcd_clear ();
 8001228:	f000 f866 	bl	80012f8 <lcd_clear>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000294 	.word	0x20000294

08001238 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f023 030f 	bic.w	r3, r3, #15
 8001248:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f043 030c 	orr.w	r3, r3, #12
 8001256:	b2db      	uxtb	r3, r3
 8001258:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	b2db      	uxtb	r3, r3
 8001262:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	f043 030c 	orr.w	r3, r3, #12
 800126a:	b2db      	uxtb	r3, r3
 800126c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	b2db      	uxtb	r3, r3
 8001276:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c, LCD_ADDRESS_I2C,(uint8_t *) data_t, 4, 100);
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <lcd_send_cmd+0x5c>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f107 0208 	add.w	r2, r7, #8
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2304      	movs	r3, #4
 8001286:	214e      	movs	r1, #78	; 0x4e
 8001288:	f002 fd3c 	bl	8003d04 <HAL_I2C_Master_Transmit>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000294 	.word	0x20000294

08001298 <lcd_send_data>:


void lcd_send_data (char data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f023 030f 	bic.w	r3, r3, #15
 80012a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f043 030d 	orr.w	r3, r3, #13
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f043 0309 	orr.w	r3, r3, #9
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	f043 030d 	orr.w	r3, r3, #13
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	f043 0309 	orr.w	r3, r3, #9
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c, LCD_ADDRESS_I2C,(uint8_t *) data_t, 4, 100);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <lcd_send_data+0x5c>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2304      	movs	r3, #4
 80012e6:	214e      	movs	r1, #78	; 0x4e
 80012e8:	f002 fd0c 	bl	8003d04 <HAL_I2C_Master_Transmit>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000294 	.word	0x20000294

080012f8 <lcd_clear>:

void lcd_clear (void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01);  // clear display
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff ff9b 	bl	8001238 <lcd_send_cmd>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}

08001306 <lcd_cursor>:

void lcd_cursor(int row, int col)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <lcd_cursor+0x18>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <lcd_cursor+0x22>
 800131c:	e009      	b.n	8001332 <lcd_cursor+0x2c>
    {
        case 0:
            col |= 0x80;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	603b      	str	r3, [r7, #0]
            break;
 8001326:	e004      	b.n	8001332 <lcd_cursor+0x2c>
        case 1:
            col |= 0xC0;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800132e:	603b      	str	r3, [r7, #0]
            break;
 8001330:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff7e 	bl	8001238 <lcd_send_cmd>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <lcd_send_string>:

void lcd_send_string (char* str, uint8_t size)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	uint8_t dato;
	for(uint8_t i = 0; i < size ; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e00b      	b.n	800136e <lcd_send_string+0x2a>
	{
		dato = str[i];
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	73bb      	strb	r3, [r7, #14]
		lcd_send_data (dato);
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff98 	bl	8001298 <lcd_send_data>
	for(uint8_t i = 0; i < size ; i++)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3ef      	bcc.n	8001356 <lcd_send_string+0x12>
	}
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f001 fa1b 	bl	80027c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f8e3 	bl	8001554 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800138e:	2003      	movs	r0, #3
 8001390:	f001 ff84 	bl	800329c <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 fa56 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f000 fa36 	bl	8001808 <MX_DMA_Init>
  MX_ADC1_Init();
 800139c:	f000 f93a 	bl	8001614 <MX_ADC1_Init>
  MX_RTC_Init();
 80013a0:	f000 f9b4 	bl	800170c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80013a4:	f000 fa04 	bl	80017b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80013a8:	f000 f982 	bl	80016b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80013ac:	f000 f9ca 	bl	8001744 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f001 fa37 	bl	8002824 <HAL_Delay>
  MFRC522_Init(&hspi2, SPI_NSS_GPIO_Port, SPI_NSS_Pin);
 80013b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ba:	4950      	ldr	r1, [pc, #320]	; (80014fc <main+0x17c>)
 80013bc:	4850      	ldr	r0, [pc, #320]	; (8001500 <main+0x180>)
 80013be:	f7ff f8cf 	bl	8000560 <MFRC522_Init>
  led_init();
 80013c2:	f7ff fe91 	bl	80010e8 <led_init>
  init_teclado();
 80013c6:	f001 f961 	bl	800268c <init_teclado>
  init_eeprom(&hi2c1);
 80013ca:	484e      	ldr	r0, [pc, #312]	; (8001504 <main+0x184>)
 80013cc:	f7ff fc74 	bl	8000cb8 <init_eeprom>
  lcd_init (&hi2c1);
 80013d0:	484c      	ldr	r0, [pc, #304]	; (8001504 <main+0x184>)
 80013d2:	f7ff fee9 	bl	80011a8 <lcd_init>
  adc_init (&hadc1);
 80013d6:	484c      	ldr	r0, [pc, #304]	; (8001508 <main+0x188>)
 80013d8:	f7ff fac6 	bl	8000968 <adc_init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  sem_state = xSemaphoreCreateMutex();
 80013dc:	2001      	movs	r0, #1
 80013de:	f006 f930 	bl	8007642 <xQueueCreateMutex>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a49      	ldr	r2, [pc, #292]	; (800150c <main+0x18c>)
 80013e6:	6013      	str	r3, [r2, #0]
  sem_clave = xSemaphoreCreateMutex();
 80013e8:	2001      	movs	r0, #1
 80013ea:	f006 f92a 	bl	8007642 <xQueueCreateMutex>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <main+0x190>)
 80013f2:	6013      	str	r3, [r2, #0]
  sem_eeprom = xSemaphoreCreateMutex();
 80013f4:	2001      	movs	r0, #1
 80013f6:	f006 f924 	bl	8007642 <xQueueCreateMutex>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <main+0x194>)
 80013fe:	6013      	str	r3, [r2, #0]
  sem_DMA = xSemaphoreCreateBinary();
 8001400:	2203      	movs	r2, #3
 8001402:	2100      	movs	r1, #0
 8001404:	2001      	movs	r0, #1
 8001406:	f006 f8a5 	bl	8007554 <xQueueGenericCreate>
 800140a:	4603      	mov	r3, r0
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <main+0x198>)
 800140e:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(sem_DMA,0);
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <main+0x198>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f006 fab8 	bl	800798c <xQueueSemaphoreTake>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <main+0x19c>)
 800141e:	1d3c      	adds	r4, r7, #4
 8001420:	461d      	mov	r5, r3
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800142a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f005 ff16 	bl	8007264 <osThreadCreate>
 8001438:	4603      	mov	r3, r0
 800143a:	4a39      	ldr	r2, [pc, #228]	; (8001520 <main+0x1a0>)
 800143c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
    if(xTaskCreate(checkear_teclado,
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2301      	movs	r3, #1
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	2240      	movs	r2, #64	; 0x40
 800144a:	4936      	ldr	r1, [pc, #216]	; (8001524 <main+0x1a4>)
 800144c:	4836      	ldr	r0, [pc, #216]	; (8001528 <main+0x1a8>)
 800144e:	f006 fd06 	bl	8007e5e <xTaskCreate>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <main+0xdc>
    		  	  "checkear_teclado",
  			  configMINIMAL_STACK_SIZE,
    			  NULL,
    			  1,
    			  NULL)!= pdPASS) Error_Handler();
 8001458:	f000 fac2 	bl	80019e0 <Error_Handler>
    if(xTaskCreate(detectar_sensores,
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2301      	movs	r3, #1
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	4930      	ldr	r1, [pc, #192]	; (800152c <main+0x1ac>)
 800146a:	4831      	ldr	r0, [pc, #196]	; (8001530 <main+0x1b0>)
 800146c:	f006 fcf7 	bl	8007e5e <xTaskCreate>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <main+0xfa>
  			  "detectar_sensores",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 8001476:	f000 fab3 	bl	80019e0 <Error_Handler>
  //			  "conexion_bt",
  //			  configMINIMAL_STACK_SIZE,
  //			  NULL,
  //			  1,
  //			  NULL)!= pdPASS) Error_Handler();
    if(xTaskCreate(lcd_update,
 800147a:	2300      	movs	r3, #0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	2301      	movs	r3, #1
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	492b      	ldr	r1, [pc, #172]	; (8001534 <main+0x1b4>)
 8001488:	482b      	ldr	r0, [pc, #172]	; (8001538 <main+0x1b8>)
 800148a:	f006 fce8 	bl	8007e5e <xTaskCreate>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d001      	beq.n	8001498 <main+0x118>
  			  "lcd_update",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 8001494:	f000 faa4 	bl	80019e0 <Error_Handler>
    if(xTaskCreate(detectar_rfid,
 8001498:	2300      	movs	r3, #0
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2301      	movs	r3, #1
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a6:	4925      	ldr	r1, [pc, #148]	; (800153c <main+0x1bc>)
 80014a8:	4825      	ldr	r0, [pc, #148]	; (8001540 <main+0x1c0>)
 80014aa:	f006 fcd8 	bl	8007e5e <xTaskCreate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d001      	beq.n	80014b8 <main+0x138>
    			  "detectar_rfid",
  			  configMINIMAL_STACK_SIZE*4,
    			  NULL,
    			  1,
    			  NULL)!= pdPASS) Error_Handler();
 80014b4:	f000 fa94 	bl	80019e0 <Error_Handler>

    if(xTaskCreate(tarea_conversiones,
 80014b8:	2300      	movs	r3, #0
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	2301      	movs	r3, #1
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <main+0x1c4>)
 80014c6:	4820      	ldr	r0, [pc, #128]	; (8001548 <main+0x1c8>)
 80014c8:	f006 fcc9 	bl	8007e5e <xTaskCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <main+0x156>
  			  "tarea_conversiones",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 80014d2:	f000 fa85 	bl	80019e0 <Error_Handler>
    if(xTaskCreate(checkear_power_supply,
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2301      	movs	r3, #1
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	491a      	ldr	r1, [pc, #104]	; (800154c <main+0x1cc>)
 80014e4:	481a      	ldr	r0, [pc, #104]	; (8001550 <main+0x1d0>)
 80014e6:	f006 fcba 	bl	8007e5e <xTaskCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d001      	beq.n	80014f4 <main+0x174>
  			  "checkear_power_supply",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 80014f0:	f000 fa76 	bl	80019e0 <Error_Handler>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014f4:	f005 feaf 	bl	8007256 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <main+0x178>
 80014fa:	bf00      	nop
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	20003bc0 	.word	0x20003bc0
 8001504:	20003c18 	.word	0x20003c18
 8001508:	20003cb4 	.word	0x20003cb4
 800150c:	20003d90 	.word	0x20003d90
 8001510:	20003c6c 	.word	0x20003c6c
 8001514:	20003cb0 	.word	0x20003cb0
 8001518:	20003d28 	.word	0x20003d28
 800151c:	08009884 	.word	0x08009884
 8001520:	20003bbc 	.word	0x20003bbc
 8001524:	08009814 	.word	0x08009814
 8001528:	08001efd 	.word	0x08001efd
 800152c:	08009828 	.word	0x08009828
 8001530:	08002425 	.word	0x08002425
 8001534:	0800983c 	.word	0x0800983c
 8001538:	08002575 	.word	0x08002575
 800153c:	08009848 	.word	0x08009848
 8001540:	080023d5 	.word	0x080023d5
 8001544:	08009858 	.word	0x08009858
 8001548:	080009ed 	.word	0x080009ed
 800154c:	0800986c 	.word	0x0800986c
 8001550:	0800255d 	.word	0x0800255d

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 f864 	bl	8009630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001584:	2309      	movs	r3, #9
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fbf0 	bl	8004d94 <HAL_RCC_OscConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015ba:	f000 fa11 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fe5c 	bl	8005298 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e6:	f000 f9fb 	bl	80019e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80015ea:	2303      	movs	r3, #3
 80015ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 f815 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001608:	f000 f9ea 	bl	80019e0 <Error_Handler>
  }
}
 800160c:	bf00      	nop
 800160e:	3750      	adds	r7, #80	; 0x50
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_ADC1_Init+0x98>)
 8001628:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_ADC1_Init+0x94>)
 800162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_ADC1_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001640:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_ADC1_Init+0x94>)
 800164e:	2202      	movs	r2, #2
 8001650:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001654:	f001 f90a 	bl	800286c <HAL_ADC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800165e:	f000 f9bf 	bl	80019e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001666:	2301      	movs	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001674:	f001 fac2 	bl	8002bfc <HAL_ADC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f000 f9af 	bl	80019e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001682:	2301      	movs	r3, #1
 8001684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001686:	2302      	movs	r3, #2
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_ADC1_Init+0x94>)
 8001690:	f001 fab4 	bl	8002bfc <HAL_ADC_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800169a:	f000 f9a1 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20003cb4 	.word	0x20003cb4
 80016ac:	40012400 	.word	0x40012400

080016b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f002 f9c5 	bl	8003a7c <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f000 f972 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20003c18 	.word	0x20003c18
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_RTC_Init+0x30>)
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <MX_RTC_Init+0x34>)
 8001714:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_RTC_Init+0x30>)
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_RTC_Init+0x30>)
 8001720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001724:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_RTC_Init+0x30>)
 8001728:	f004 f8fa 	bl	8005920 <HAL_RTC_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001732:	f000 f955 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20003d70 	.word	0x20003d70
 8001740:	40002800 	.word	0x40002800

08001744 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI2_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_SPI2_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI2_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001778:	2220      	movs	r2, #32
 800177a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI2_Init+0x64>)
 8001796:	f004 fcb5 	bl	8006104 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 f91e 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20003bc0 	.word	0x20003bc0
 80017ac:	40003800 	.word	0x40003800

080017b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <MX_USART1_UART_Init+0x54>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART1_UART_Init+0x50>)
 80017ec:	f005 fc40 	bl	8007070 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f000 f8f3 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20003ce4 	.word	0x20003ce4
 8001804:	40013800 	.word	0x40013800

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_DMA_Init+0x38>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <MX_DMA_Init+0x38>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6153      	str	r3, [r2, #20]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_DMA_Init+0x38>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	200b      	movs	r0, #11
 800182c:	f001 fd41 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001830:	200b      	movs	r0, #11
 8001832:	f001 fd5a 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <MX_GPIO_Init+0x158>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <MX_GPIO_Init+0x158>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <MX_GPIO_Init+0x158>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <MX_GPIO_Init+0x158>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a49      	ldr	r2, [pc, #292]	; (800199c <MX_GPIO_Init+0x158>)
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <MX_GPIO_Init+0x158>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b44      	ldr	r3, [pc, #272]	; (800199c <MX_GPIO_Init+0x158>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a43      	ldr	r2, [pc, #268]	; (800199c <MX_GPIO_Init+0x158>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b41      	ldr	r3, [pc, #260]	; (800199c <MX_GPIO_Init+0x158>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <MX_GPIO_Init+0x158>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a3d      	ldr	r2, [pc, #244]	; (800199c <MX_GPIO_Init+0x158>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b3b      	ldr	r3, [pc, #236]	; (800199c <MX_GPIO_Init+0x158>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	4838      	ldr	r0, [pc, #224]	; (80019a0 <MX_GPIO_Init+0x15c>)
 80018c0:	f002 f8ab 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	216c      	movs	r1, #108	; 0x6c
 80018c8:	4836      	ldr	r0, [pc, #216]	; (80019a4 <MX_GPIO_Init+0x160>)
 80018ca:	f002 f8a6 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_GPIO_Init+0x160>)
 80018d4:	f002 f8a1 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2102      	movs	r1, #2
 80018dc:	4832      	ldr	r0, [pc, #200]	; (80019a8 <MX_GPIO_Init+0x164>)
 80018de:	f002 f89c 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80018e8:	482f      	ldr	r0, [pc, #188]	; (80019a8 <MX_GPIO_Init+0x164>)
 80018ea:	f002 f896 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	4826      	ldr	r0, [pc, #152]	; (80019a0 <MX_GPIO_Init+0x15c>)
 8001908:	f001 feec 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800190c:	23ec      	movs	r3, #236	; 0xec
 800190e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4820      	ldr	r0, [pc, #128]	; (80019a4 <MX_GPIO_Init+0x160>)
 8001924:	f001 fede 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12;
 8001928:	f241 4302 	movw	r3, #5122	; 0x1402
 800192c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <MX_GPIO_Init+0x164>)
 8001942:	f001 fecf 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <MX_GPIO_Init+0x160>)
 800195c:	f001 fec2 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <MX_GPIO_Init+0x160>)
 8001976:	f001 feb5 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800197a:	2338      	movs	r3, #56	; 0x38
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_GPIO_Init+0x164>)
 800198e:	f001 fea9 	bl	80036e4 <HAL_GPIO_Init>

}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00

080019ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f005 fca1 	bl	80072fc <osDelay>
 80019ba:	e7fb      	b.n	80019b4 <StartDefaultTask+0x8>

080019bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ce:	f000 ff0d 	bl	80027ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <obtener_tiempo>:
#include "main.h"

extern RTC_HandleTypeDef hrtc;


RTC_TimeTypeDef obtener_tiempo(void){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef tiempo={0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2100      	movs	r1, #0
 80019f6:	460a      	mov	r2, r1
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	460a      	mov	r2, r1
 80019fc:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetTime(&hrtc,&tiempo,RTC_FORMAT_BIN);
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <obtener_tiempo+0x4c>)
 8001a06:	f004 f821 	bl	8005a4c <HAL_RTC_GetTime>

	return tiempo;
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	463a      	mov	r2, r7
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4611      	mov	r1, r2
 8001a12:	8019      	strh	r1, [r3, #0]
 8001a14:	3302      	adds	r3, #2
 8001a16:	0c12      	lsrs	r2, r2, #16
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	793a      	ldrb	r2, [r7, #4]
 8001a1e:	f362 0307 	bfi	r3, r2, #0, #8
 8001a22:	797a      	ldrb	r2, [r7, #5]
 8001a24:	f362 230f 	bfi	r3, r2, #8, #8
 8001a28:	79ba      	ldrb	r2, [r7, #6]
 8001a2a:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20003d70 	.word	0x20003d70

08001a3c <leer_sensor>:
#include "main.h"

extern xSemaphoreHandle sem_clave;
extern uint8_t clave_ok;

uint8_t leer_sensor(uint8_t sensor){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	if (sensor == 1){
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <leer_sensor+0x1e>
		return HAL_GPIO_ReadPin(PUERTO_SENSOR1,PIN_SENSOR1);
 8001a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <leer_sensor+0x3c>)
 8001a52:	f001 ffcb 	bl	80039ec <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	e00a      	b.n	8001a70 <leer_sensor+0x34>
	}
	else if(sensor == 2){
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d106      	bne.n	8001a6e <leer_sensor+0x32>
		return HAL_GPIO_ReadPin(PUERTO_SENSOR2,PIN_SENSOR2);
 8001a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <leer_sensor+0x3c>)
 8001a66:	f001 ffc1 	bl	80039ec <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e000      	b.n	8001a70 <leer_sensor+0x34>
	}
	else
		return 2; //error
 8001a6e:	2302      	movs	r3, #2
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010800 	.word	0x40010800

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_MspInit+0x68>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_MspInit+0x68>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_MspInit+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x68>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_MspInit+0x68>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x68>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	f06f 0001 	mvn.w	r0, #1
 8001aba:	f001 fbfa 	bl	80032b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_MspInit+0x6c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_MspInit+0x6c>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_ADC_MspInit+0xbc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d149      	bne.n	8001ba0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_ADC_MspInit+0xc0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <HAL_ADC_MspInit+0xc4>)
 8001b4c:	f001 fdca 	bl	80036e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b52:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_ADC_MspInit+0xcc>)
 8001b54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b86:	f001 fbbf 	bl	8003308 <HAL_DMA_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b90:	f7ff ff26 	bl	80019e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b98:	621a      	str	r2, [r3, #32]
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_ADC_MspInit+0xc8>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40012400 	.word	0x40012400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	20003d2c 	.word	0x20003d2c
 8001bb8:	40020008 	.word	0x40020008

08001bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_I2C_MspInit+0x90>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d132      	bne.n	8001c42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4812      	ldr	r0, [pc, #72]	; (8001c54 <HAL_I2C_MspInit+0x98>)
 8001c0a:	f001 fd6b 	bl	80036e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_I2C_MspInit+0x9c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_I2C_MspInit+0x9c>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_I2C_MspInit+0x94>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	40010000 	.word	0x40010000

08001c5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_RTC_MspInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d110      	bne.n	8001c90 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c6e:	f003 f885 	bl	8004d7c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RTC_MspInit+0x40>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RTC_MspInit+0x40>)
 8001c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RTC_MspInit+0x40>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RTC_MspInit+0x44>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40002800 	.word	0x40002800
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	4242043c 	.word	0x4242043c

08001ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_SPI_MspInit+0x8c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d131      	bne.n	8001d28 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cce:	61d3      	str	r3, [r2, #28]
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_SPI_MspInit+0x90>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001cf4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <HAL_SPI_MspInit+0x94>)
 8001d0a:	f001 fceb 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x94>)
 8001d24:	f001 fcde 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40003800 	.word	0x40003800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010c00 	.word	0x40010c00

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <HAL_UART_MspInit+0xa4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d13d      	bne.n	8001dd8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_UART_MspInit+0xa8>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4812      	ldr	r0, [pc, #72]	; (8001de8 <HAL_UART_MspInit+0xac>)
 8001da0:	f001 fca0 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <HAL_UART_MspInit+0xac>)
 8001db8:	f001 fc94 	bl	80036e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_UART_MspInit+0xb0>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_UART_MspInit+0xb0>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40010000 	.word	0x40010000

08001df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	2019      	movs	r0, #25
 8001e06:	f001 fa54 	bl	80032b2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e0a:	2019      	movs	r0, #25
 8001e0c:	f001 fa6d 	bl	80032ea <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_InitTick+0x9c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_InitTick+0x9c>)
 8001e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_InitTick+0x9c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e28:	f107 0210 	add.w	r2, r7, #16
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fbac 	bl	8005590 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e38:	f003 fb96 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8001e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_InitTick+0xa0>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_InitTick+0xa8>)
 8001e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e6e:	f004 feb5 	bl	8006bdc <HAL_TIM_Base_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <HAL_InitTick+0xa4>)
 8001e7a:	f004 ff07 	bl	8006c8c <HAL_TIM_Base_Start_IT>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	20003dd8 	.word	0x20003dd8
 8001e98:	40012c00 	.word	0x40012c00

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
	...

08001ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ece:	f001 fad5 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20003d2c 	.word	0x20003d2c

08001edc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM1_UP_IRQHandler+0x10>)
 8001ee2:	f004 ff25 	bl	8006d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20003dd8 	.word	0x20003dd8

08001ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <checkear_teclado>:
 * ======== checkear_teclado =============
 * Tarea global.
 *
 *
 */
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	uint8_t tecla[LARGO_CLAVE+1] = {0}; //Cuento el # de cierre
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	733b      	strb	r3, [r7, #12]
	uint8_t i=0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

	uint8_t estado = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73bb      	strb	r3, [r7, #14]

	for(;;){

		//Chequeo si esta la clave y si funciona OK
		if (i == (LARGO_CLAVE+1)){
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d12c      	bne.n	8001f74 <checkear_teclado+0x78>
			i=0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
			if(chequear_clave(tecla) ){
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb6c 	bl	8002600 <chequear_clave>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d011      	beq.n	8001f52 <checkear_teclado+0x56>
				xSemaphoreTake(sem_state,portMAX_DELAY);
 8001f2e:	4b95      	ldr	r3, [pc, #596]	; (8002184 <checkear_teclado+0x288>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 fd28 	bl	800798c <xQueueSemaphoreTake>
				clave_ok = 1;
 8001f3c:	4b92      	ldr	r3, [pc, #584]	; (8002188 <checkear_teclado+0x28c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(sem_state);
 8001f42:	4b90      	ldr	r3, [pc, #576]	; (8002184 <checkear_teclado+0x288>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f005 fb92 	bl	8007674 <xQueueGenericSend>
 8001f50:	e010      	b.n	8001f74 <checkear_teclado+0x78>
			}
			else{
				xSemaphoreTake(sem_state,portMAX_DELAY);
 8001f52:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <checkear_teclado+0x288>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 fd16 	bl	800798c <xQueueSemaphoreTake>
				clave_ok = 0;
 8001f60:	4b89      	ldr	r3, [pc, #548]	; (8002188 <checkear_teclado+0x28c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(sem_state);
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <checkear_teclado+0x288>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f005 fb80 	bl	8007674 <xQueueGenericSend>
			}
		}

		switch(estado){
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	f200 8214 	bhi.w	80023a4 <checkear_teclado+0x4a8>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <checkear_teclado+0x88>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	0800208d 	.word	0x0800208d
 8001f8c:	080021b5 	.word	0x080021b5
 8001f90:	080022ad 	.word	0x080022ad
		case 0:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_SET );
 8001f94:	2201      	movs	r2, #1
 8001f96:	2104      	movs	r1, #4
 8001f98:	487c      	ldr	r0, [pc, #496]	; (800218c <checkear_teclado+0x290>)
 8001f9a:	f001 fd3e 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	487a      	ldr	r0, [pc, #488]	; (800218c <checkear_teclado+0x290>)
 8001fa4:	f001 fd39 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2120      	movs	r1, #32
 8001fac:	4877      	ldr	r0, [pc, #476]	; (800218c <checkear_teclado+0x290>)
 8001fae:	f001 fd34 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	4875      	ldr	r0, [pc, #468]	; (800218c <checkear_teclado+0x290>)
 8001fb8:	f001 fd2f 	bl	8003a1a <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[0][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	4874      	ldr	r0, [pc, #464]	; (8002190 <checkear_teclado+0x294>)
 8001fc0:	f001 fd14 	bl	80039ec <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4872      	ldr	r0, [pc, #456]	; (8002194 <checkear_teclado+0x298>)
 8001fca:	f7fe fddf 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][0])){
 8001fce:	4871      	ldr	r0, [pc, #452]	; (8002194 <checkear_teclado+0x298>)
 8001fd0:	f7fe fe5e 	bl	8000c90 <hay_flanco_arrebote>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <checkear_teclado+0xf2>
					tecla[i] = '1';
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	f107 0210 	add.w	r2, r7, #16
 8001fe0:	4413      	add	r3, r2
 8001fe2:	2231      	movs	r2, #49	; 0x31
 8001fe4:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	3301      	adds	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[0][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 8001fee:	2110      	movs	r1, #16
 8001ff0:	4867      	ldr	r0, [pc, #412]	; (8002190 <checkear_teclado+0x294>)
 8001ff2:	f001 fcfb 	bl	80039ec <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4867      	ldr	r0, [pc, #412]	; (8002198 <checkear_teclado+0x29c>)
 8001ffc:	f7fe fdc6 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][1])){
 8002000:	4865      	ldr	r0, [pc, #404]	; (8002198 <checkear_teclado+0x29c>)
 8002002:	f7fe fe45 	bl	8000c90 <hay_flanco_arrebote>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <checkear_teclado+0x124>
					tecla[i] = '2';
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	f107 0210 	add.w	r2, r7, #16
 8002012:	4413      	add	r3, r2
 8002014:	2232      	movs	r2, #50	; 0x32
 8002016:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3301      	adds	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[0][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8002020:	2108      	movs	r1, #8
 8002022:	485b      	ldr	r0, [pc, #364]	; (8002190 <checkear_teclado+0x294>)
 8002024:	f001 fce2 	bl	80039ec <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	4619      	mov	r1, r3
 800202c:	485b      	ldr	r0, [pc, #364]	; (800219c <checkear_teclado+0x2a0>)
 800202e:	f7fe fdad 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][2]))
 8002032:	485a      	ldr	r0, [pc, #360]	; (800219c <checkear_teclado+0x2a0>)
 8002034:	f7fe fe2c 	bl	8000c90 <hay_flanco_arrebote>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <checkear_teclado+0x156>
				{
					tecla[i] = '3';
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	f107 0210 	add.w	r2, r7, #16
 8002044:	4413      	add	r3, r2
 8002046:	2233      	movs	r2, #51	; 0x33
 8002048:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[0][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 8002052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002056:	484d      	ldr	r0, [pc, #308]	; (800218c <checkear_teclado+0x290>)
 8002058:	f001 fcc8 	bl	80039ec <HAL_GPIO_ReadPin>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	484f      	ldr	r0, [pc, #316]	; (80021a0 <checkear_teclado+0x2a4>)
 8002062:	f7fe fd93 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][3])){
 8002066:	484e      	ldr	r0, [pc, #312]	; (80021a0 <checkear_teclado+0x2a4>)
 8002068:	f7fe fe12 	bl	8000c90 <hay_flanco_arrebote>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <checkear_teclado+0x18a>
					tecla[i] = 'A';
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	f107 0210 	add.w	r2, r7, #16
 8002078:	4413      	add	r3, r2
 800207a:	2241      	movs	r2, #65	; 0x41
 800207c:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
			}

			estado = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 800208a:	e18b      	b.n	80023a4 <checkear_teclado+0x4a8>
		case 1:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 800208c:	2200      	movs	r2, #0
 800208e:	2104      	movs	r1, #4
 8002090:	483e      	ldr	r0, [pc, #248]	; (800218c <checkear_teclado+0x290>)
 8002092:	f001 fcc2 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_SET );
 8002096:	2201      	movs	r2, #1
 8002098:	2108      	movs	r1, #8
 800209a:	483c      	ldr	r0, [pc, #240]	; (800218c <checkear_teclado+0x290>)
 800209c:	f001 fcbd 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 80020a0:	2200      	movs	r2, #0
 80020a2:	2120      	movs	r1, #32
 80020a4:	4839      	ldr	r0, [pc, #228]	; (800218c <checkear_teclado+0x290>)
 80020a6:	f001 fcb8 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 80020aa:	2200      	movs	r2, #0
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	4837      	ldr	r0, [pc, #220]	; (800218c <checkear_teclado+0x290>)
 80020b0:	f001 fcb3 	bl	8003a1a <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[1][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 80020b4:	2120      	movs	r1, #32
 80020b6:	4836      	ldr	r0, [pc, #216]	; (8002190 <checkear_teclado+0x294>)
 80020b8:	f001 fc98 	bl	80039ec <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	4619      	mov	r1, r3
 80020c0:	4838      	ldr	r0, [pc, #224]	; (80021a4 <checkear_teclado+0x2a8>)
 80020c2:	f7fe fd63 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][0])){
 80020c6:	4837      	ldr	r0, [pc, #220]	; (80021a4 <checkear_teclado+0x2a8>)
 80020c8:	f7fe fde2 	bl	8000c90 <hay_flanco_arrebote>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <checkear_teclado+0x1ea>
					tecla[i] = '4';
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	f107 0210 	add.w	r2, r7, #16
 80020d8:	4413      	add	r3, r2
 80020da:	2234      	movs	r2, #52	; 0x34
 80020dc:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[1][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 80020e6:	2110      	movs	r1, #16
 80020e8:	4829      	ldr	r0, [pc, #164]	; (8002190 <checkear_teclado+0x294>)
 80020ea:	f001 fc7f 	bl	80039ec <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4619      	mov	r1, r3
 80020f2:	482d      	ldr	r0, [pc, #180]	; (80021a8 <checkear_teclado+0x2ac>)
 80020f4:	f7fe fd4a 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][1])){
 80020f8:	482b      	ldr	r0, [pc, #172]	; (80021a8 <checkear_teclado+0x2ac>)
 80020fa:	f7fe fdc9 	bl	8000c90 <hay_flanco_arrebote>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <checkear_teclado+0x21c>
					tecla[i] = '5';
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	f107 0210 	add.w	r2, r7, #16
 800210a:	4413      	add	r3, r2
 800210c:	2235      	movs	r2, #53	; 0x35
 800210e:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[1][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8002118:	2108      	movs	r1, #8
 800211a:	481d      	ldr	r0, [pc, #116]	; (8002190 <checkear_teclado+0x294>)
 800211c:	f001 fc66 	bl	80039ec <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	4619      	mov	r1, r3
 8002124:	4821      	ldr	r0, [pc, #132]	; (80021ac <checkear_teclado+0x2b0>)
 8002126:	f7fe fd31 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][2]))
 800212a:	4820      	ldr	r0, [pc, #128]	; (80021ac <checkear_teclado+0x2b0>)
 800212c:	f7fe fdb0 	bl	8000c90 <hay_flanco_arrebote>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <checkear_teclado+0x24e>
				{
					tecla[i] = '6';
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	f107 0210 	add.w	r2, r7, #16
 800213c:	4413      	add	r3, r2
 800213e:	2236      	movs	r2, #54	; 0x36
 8002140:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[1][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 800214a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214e:	480f      	ldr	r0, [pc, #60]	; (800218c <checkear_teclado+0x290>)
 8002150:	f001 fc4c 	bl	80039ec <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	4619      	mov	r1, r3
 8002158:	4815      	ldr	r0, [pc, #84]	; (80021b0 <checkear_teclado+0x2b4>)
 800215a:	f7fe fd17 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][3])){
 800215e:	4814      	ldr	r0, [pc, #80]	; (80021b0 <checkear_teclado+0x2b4>)
 8002160:	f7fe fd96 	bl	8000c90 <hay_flanco_arrebote>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <checkear_teclado+0x282>
					tecla[i] = 'B';
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	f107 0210 	add.w	r2, r7, #16
 8002170:	4413      	add	r3, r2
 8002172:	2242      	movs	r2, #66	; 0x42
 8002174:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	3301      	adds	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
			}
			estado = 2;
 800217e:	2302      	movs	r3, #2
 8002180:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 8002182:	e10f      	b.n	80023a4 <checkear_teclado+0x4a8>
 8002184:	20003d90 	.word	0x20003d90
 8002188:	20000298 	.word	0x20000298
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	20003e20 	.word	0x20003e20
 8002198:	20003e28 	.word	0x20003e28
 800219c:	20003e30 	.word	0x20003e30
 80021a0:	20003e38 	.word	0x20003e38
 80021a4:	20003e40 	.word	0x20003e40
 80021a8:	20003e48 	.word	0x20003e48
 80021ac:	20003e50 	.word	0x20003e50
 80021b0:	20003e58 	.word	0x20003e58
		case 2:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 80021b4:	2200      	movs	r2, #0
 80021b6:	2104      	movs	r1, #4
 80021b8:	487c      	ldr	r0, [pc, #496]	; (80023ac <checkear_teclado+0x4b0>)
 80021ba:	f001 fc2e 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 80021be:	2200      	movs	r2, #0
 80021c0:	2108      	movs	r1, #8
 80021c2:	487a      	ldr	r0, [pc, #488]	; (80023ac <checkear_teclado+0x4b0>)
 80021c4:	f001 fc29 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_SET );
 80021c8:	2201      	movs	r2, #1
 80021ca:	2120      	movs	r1, #32
 80021cc:	4877      	ldr	r0, [pc, #476]	; (80023ac <checkear_teclado+0x4b0>)
 80021ce:	f001 fc24 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 80021d2:	2200      	movs	r2, #0
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	4875      	ldr	r0, [pc, #468]	; (80023ac <checkear_teclado+0x4b0>)
 80021d8:	f001 fc1f 	bl	8003a1a <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[2][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 80021dc:	2120      	movs	r1, #32
 80021de:	4874      	ldr	r0, [pc, #464]	; (80023b0 <checkear_teclado+0x4b4>)
 80021e0:	f001 fc04 	bl	80039ec <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4872      	ldr	r0, [pc, #456]	; (80023b4 <checkear_teclado+0x4b8>)
 80021ea:	f7fe fccf 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][0])){
 80021ee:	4871      	ldr	r0, [pc, #452]	; (80023b4 <checkear_teclado+0x4b8>)
 80021f0:	f7fe fd4e 	bl	8000c90 <hay_flanco_arrebote>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <checkear_teclado+0x312>
					tecla[i] = '7';
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f107 0210 	add.w	r2, r7, #16
 8002200:	4413      	add	r3, r2
 8002202:	2237      	movs	r2, #55	; 0x37
 8002204:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[2][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 800220e:	2110      	movs	r1, #16
 8002210:	4867      	ldr	r0, [pc, #412]	; (80023b0 <checkear_teclado+0x4b4>)
 8002212:	f001 fbeb 	bl	80039ec <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	4619      	mov	r1, r3
 800221a:	4867      	ldr	r0, [pc, #412]	; (80023b8 <checkear_teclado+0x4bc>)
 800221c:	f7fe fcb6 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][1])){
 8002220:	4865      	ldr	r0, [pc, #404]	; (80023b8 <checkear_teclado+0x4bc>)
 8002222:	f7fe fd35 	bl	8000c90 <hay_flanco_arrebote>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <checkear_teclado+0x344>
					tecla[i] = '8';
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	f107 0210 	add.w	r2, r7, #16
 8002232:	4413      	add	r3, r2
 8002234:	2238      	movs	r2, #56	; 0x38
 8002236:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[2][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8002240:	2108      	movs	r1, #8
 8002242:	485b      	ldr	r0, [pc, #364]	; (80023b0 <checkear_teclado+0x4b4>)
 8002244:	f001 fbd2 	bl	80039ec <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	485b      	ldr	r0, [pc, #364]	; (80023bc <checkear_teclado+0x4c0>)
 800224e:	f7fe fc9d 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][2]))
 8002252:	485a      	ldr	r0, [pc, #360]	; (80023bc <checkear_teclado+0x4c0>)
 8002254:	f7fe fd1c 	bl	8000c90 <hay_flanco_arrebote>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <checkear_teclado+0x376>
				{
					tecla[i] = '9';
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	f107 0210 	add.w	r2, r7, #16
 8002264:	4413      	add	r3, r2
 8002266:	2239      	movs	r2, #57	; 0x39
 8002268:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[2][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 8002272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002276:	484d      	ldr	r0, [pc, #308]	; (80023ac <checkear_teclado+0x4b0>)
 8002278:	f001 fbb8 	bl	80039ec <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	4619      	mov	r1, r3
 8002280:	484f      	ldr	r0, [pc, #316]	; (80023c0 <checkear_teclado+0x4c4>)
 8002282:	f7fe fc83 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][3])){
 8002286:	484e      	ldr	r0, [pc, #312]	; (80023c0 <checkear_teclado+0x4c4>)
 8002288:	f7fe fd02 	bl	8000c90 <hay_flanco_arrebote>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <checkear_teclado+0x3aa>
					tecla[i] = 'C';
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	4413      	add	r3, r2
 800229a:	2243      	movs	r2, #67	; 0x43
 800229c:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	3301      	adds	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
			}
			estado = 3;
 80022a6:	2303      	movs	r3, #3
 80022a8:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 80022aa:	e07b      	b.n	80023a4 <checkear_teclado+0x4a8>
		case 3:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 80022ac:	2200      	movs	r2, #0
 80022ae:	2104      	movs	r1, #4
 80022b0:	483e      	ldr	r0, [pc, #248]	; (80023ac <checkear_teclado+0x4b0>)
 80022b2:	f001 fbb2 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 80022b6:	2200      	movs	r2, #0
 80022b8:	2108      	movs	r1, #8
 80022ba:	483c      	ldr	r0, [pc, #240]	; (80023ac <checkear_teclado+0x4b0>)
 80022bc:	f001 fbad 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 80022c0:	2200      	movs	r2, #0
 80022c2:	2120      	movs	r1, #32
 80022c4:	4839      	ldr	r0, [pc, #228]	; (80023ac <checkear_teclado+0x4b0>)
 80022c6:	f001 fba8 	bl	8003a1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_SET );
 80022ca:	2201      	movs	r2, #1
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	4837      	ldr	r0, [pc, #220]	; (80023ac <checkear_teclado+0x4b0>)
 80022d0:	f001 fba3 	bl	8003a1a <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[3][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 80022d4:	2120      	movs	r1, #32
 80022d6:	4836      	ldr	r0, [pc, #216]	; (80023b0 <checkear_teclado+0x4b4>)
 80022d8:	f001 fb88 	bl	80039ec <HAL_GPIO_ReadPin>
 80022dc:	4603      	mov	r3, r0
 80022de:	4619      	mov	r1, r3
 80022e0:	4838      	ldr	r0, [pc, #224]	; (80023c4 <checkear_teclado+0x4c8>)
 80022e2:	f7fe fc53 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][0])){
 80022e6:	4837      	ldr	r0, [pc, #220]	; (80023c4 <checkear_teclado+0x4c8>)
 80022e8:	f7fe fcd2 	bl	8000c90 <hay_flanco_arrebote>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <checkear_teclado+0x40a>
					tecla[i] = '*';
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	f107 0210 	add.w	r2, r7, #16
 80022f8:	4413      	add	r3, r2
 80022fa:	222a      	movs	r2, #42	; 0x2a
 80022fc:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3301      	adds	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[3][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 8002306:	2110      	movs	r1, #16
 8002308:	4829      	ldr	r0, [pc, #164]	; (80023b0 <checkear_teclado+0x4b4>)
 800230a:	f001 fb6f 	bl	80039ec <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	4619      	mov	r1, r3
 8002312:	482d      	ldr	r0, [pc, #180]	; (80023c8 <checkear_teclado+0x4cc>)
 8002314:	f7fe fc3a 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][1])){
 8002318:	482b      	ldr	r0, [pc, #172]	; (80023c8 <checkear_teclado+0x4cc>)
 800231a:	f7fe fcb9 	bl	8000c90 <hay_flanco_arrebote>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <checkear_teclado+0x43c>
					tecla[i] = '0';
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	f107 0210 	add.w	r2, r7, #16
 800232a:	4413      	add	r3, r2
 800232c:	2230      	movs	r2, #48	; 0x30
 800232e:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[3][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8002338:	2108      	movs	r1, #8
 800233a:	481d      	ldr	r0, [pc, #116]	; (80023b0 <checkear_teclado+0x4b4>)
 800233c:	f001 fb56 	bl	80039ec <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	4619      	mov	r1, r3
 8002344:	4821      	ldr	r0, [pc, #132]	; (80023cc <checkear_teclado+0x4d0>)
 8002346:	f7fe fc21 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][2]))
 800234a:	4820      	ldr	r0, [pc, #128]	; (80023cc <checkear_teclado+0x4d0>)
 800234c:	f7fe fca0 	bl	8000c90 <hay_flanco_arrebote>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <checkear_teclado+0x46e>
				{
					tecla[i] = '#';
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	f107 0210 	add.w	r2, r7, #16
 800235c:	4413      	add	r3, r2
 800235e:	2223      	movs	r2, #35	; 0x23
 8002360:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	3301      	adds	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[3][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 800236a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236e:	480f      	ldr	r0, [pc, #60]	; (80023ac <checkear_teclado+0x4b0>)
 8002370:	f001 fb3c 	bl	80039ec <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	4815      	ldr	r0, [pc, #84]	; (80023d0 <checkear_teclado+0x4d4>)
 800237a:	f7fe fc07 	bl	8000b8c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][3])){
 800237e:	4814      	ldr	r0, [pc, #80]	; (80023d0 <checkear_teclado+0x4d4>)
 8002380:	f7fe fc86 	bl	8000c90 <hay_flanco_arrebote>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <checkear_teclado+0x4a2>
					tecla[i] = 'D';
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	4413      	add	r3, r2
 8002392:	2244      	movs	r2, #68	; 0x44
 8002394:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3301      	adds	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
			}
			estado = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 80023a2:	bf00      	nop
		}
		vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
 80023a4:	2014      	movs	r0, #20
 80023a6:	f005 fea1 	bl	80080ec <vTaskDelay>
		if (i == (LARGO_CLAVE+1)){
 80023aa:	e5b3      	b.n	8001f14 <checkear_teclado+0x18>
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	20003e60 	.word	0x20003e60
 80023b8:	20003e68 	.word	0x20003e68
 80023bc:	20003e70 	.word	0x20003e70
 80023c0:	20003e78 	.word	0x20003e78
 80023c4:	20003e80 	.word	0x20003e80
 80023c8:	20003e88 	.word	0x20003e88
 80023cc:	20003e90 	.word	0x20003e90
 80023d0:	20003e98 	.word	0x20003e98

080023d4 <detectar_rfid>:
 * 		IRQ	 ->		--
 * 		GND	 ->		G
 * 		RST	 ->		--
 * 		3.3V -> 	3.3
 */
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint32_t new_id;

	while(1)
	{
		switch(rfid_internal_state)
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <detectar_rfid+0x4c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <detectar_rfid+0x16>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <detectar_rfid+0x1c>
 80023e8:	e015      	b.n	8002416 <detectar_rfid+0x42>
		{
			case WORKING_STATE:
				rfid_toggle_state();
 80023ea:	f7fd feff 	bl	80001ec <rfid_toggle_state>
				break;
 80023ee:	e012      	b.n	8002416 <detectar_rfid+0x42>
			case ADDING_CARD_STATE:
				while( rfid_find_card((uint8_t*) &new_id) != CARD_DETECTED);
 80023f0:	bf00      	nop
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd ffbe 	bl	8000378 <rfid_find_card>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f7      	bne.n	80023f2 <detectar_rfid+0x1e>
				status = rfid_add_id(new_id);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd fea3 	bl	8000150 <rfid_add_id>
 800240a:	4603      	mov	r3, r0
 800240c:	73fb      	strb	r3, [r7, #15]
				rfid_internal_state = WORKING_STATE;
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <detectar_rfid+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
				break;
 8002414:	bf00      	nop
		}

		vTaskDelay(10);
 8002416:	200a      	movs	r0, #10
 8002418:	f005 fe68 	bl	80080ec <vTaskDelay>
		switch(rfid_internal_state)
 800241c:	e7de      	b.n	80023dc <detectar_rfid+0x8>
 800241e:	bf00      	nop
 8002420:	20000299 	.word	0x20000299

08002424 <detectar_sensores>:
 * ======== detectar_sensores =============
 * Tarea global.
 *
 *
 */
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	// (Dependiendo del estado de la alarma, debe hacer sonar el buzzer)
	uint8_t estado=0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

	for(;;){
		switch(estado){
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d060      	beq.n	80024f8 <detectar_sensores+0xd4>
 8002436:	2b02      	cmp	r3, #2
 8002438:	f300 8081 	bgt.w	800253e <detectar_sensores+0x11a>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <detectar_sensores+0x22>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d025      	beq.n	8002490 <detectar_sensores+0x6c>
 8002444:	e07b      	b.n	800253e <detectar_sensores+0x11a>
		case APAGADO:
			xSemaphoreTake(sem_state,portMAX_DELAY);
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <detectar_sensores+0x130>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800244e:	4618      	mov	r0, r3
 8002450:	f005 fa9c 	bl	800798c <xQueueSemaphoreTake>
			if(clave_ok){
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <detectar_sensores+0x134>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d011      	beq.n	8002480 <detectar_sensores+0x5c>
				estado = ENCENDIDIO;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
				clave_ok = 0; //Bajo el flag
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <detectar_sensores+0x134>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
				toggle_led(LED_1);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fe52 	bl	8001110 <toggle_led>
				save_event(EVENT_ALARM_ON);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fdcb 	bl	8001008 <save_event>
				start_buzzer(500, 500, 5);
 8002472:	2205      	movs	r2, #5
 8002474:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800247c:	f7fe fe6a 	bl	8001154 <start_buzzer>
			}
			xSemaphoreGive(sem_state);
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <detectar_sensores+0x130>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	f005 f8f3 	bl	8007674 <xQueueGenericSend>
			break;
 800248e:	e05c      	b.n	800254a <detectar_sensores+0x126>

		case ENCENDIDIO:
			if(leer_sensor(1)){
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff fad3 	bl	8001a3c <leer_sensor>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <detectar_sensores+0x82>
				// Area 2
				save_event(EVENT_ALARM_BEEP_SALA1);
 800249c:	2004      	movs	r0, #4
 800249e:	f7fe fdb3 	bl	8001008 <save_event>
				estado = ALARMANDO;
 80024a2:	2302      	movs	r3, #2
 80024a4:	73fb      	strb	r3, [r7, #15]
			}
			if(leer_sensor(2)){
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7ff fac8 	bl	8001a3c <leer_sensor>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <detectar_sensores+0x98>
				// Area 2
				save_event(EVENT_ALARM_BEEP_SALA2);
 80024b2:	2005      	movs	r0, #5
 80024b4:	f7fe fda8 	bl	8001008 <save_event>
				estado = ALARMANDO;
 80024b8:	2302      	movs	r3, #2
 80024ba:	73fb      	strb	r3, [r7, #15]
			}

			xSemaphoreTake(sem_state,portMAX_DELAY);
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <detectar_sensores+0x130>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c4:	4618      	mov	r0, r3
 80024c6:	f005 fa61 	bl	800798c <xQueueSemaphoreTake>
			if(clave_ok){
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <detectar_sensores+0x134>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <detectar_sensores+0xc4>
				estado = APAGADO;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
				clave_ok = 0; //Bajo el flag
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <detectar_sensores+0x134>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
				save_event(EVENT_ALARM_OFF);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fd93 	bl	8001008 <save_event>
				toggle_led(LED_1);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fe14 	bl	8001110 <toggle_led>
			}
			xSemaphoreGive(sem_state);
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <detectar_sensores+0x130>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	f005 f8bf 	bl	8007674 <xQueueGenericSend>
			break;
 80024f6:	e028      	b.n	800254a <detectar_sensores+0x126>

		case ALARMANDO:

			start_buzzer(100, 100, 5);
 80024f8:	2205      	movs	r2, #5
 80024fa:	2164      	movs	r1, #100	; 0x64
 80024fc:	2064      	movs	r0, #100	; 0x64
 80024fe:	f7fe fe29 	bl	8001154 <start_buzzer>

			xSemaphoreTake(sem_state,portMAX_DELAY);
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <detectar_sensores+0x130>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fa3e 	bl	800798c <xQueueSemaphoreTake>
			if(clave_ok){
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <detectar_sensores+0x134>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <detectar_sensores+0x10a>
				estado = APAGADO;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
				clave_ok = 0; //Bajo el flag
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <detectar_sensores+0x134>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
				save_event(EVENT_ALARM_OFF);
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe fd70 	bl	8001008 <save_event>
				toggle_led(LED_1);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fdf1 	bl	8001110 <toggle_led>
			}
			xSemaphoreGive(sem_state);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <detectar_sensores+0x130>)
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	f005 f89c 	bl	8007674 <xQueueGenericSend>
			break;
 800253c:	e005      	b.n	800254a <detectar_sensores+0x126>

		default:
			estado = APAGADO;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
			clave_ok = 0;
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <detectar_sensores+0x134>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
			break;
 8002548:	bf00      	nop

		}
		vTaskDelay(DEMORA_SENSOR / portTICK_RATE_MS);
 800254a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800254e:	f005 fdcd 	bl	80080ec <vTaskDelay>
		switch(estado){
 8002552:	e76d      	b.n	8002430 <detectar_sensores+0xc>
 8002554:	20003d90 	.word	0x20003d90
 8002558:	20000298 	.word	0x20000298

0800255c <checkear_power_supply>:
	}
}

void checkear_power_supply(void *p)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	while(1)
	{
		update_adc();
 8002564:	f7fe fa56 	bl	8000a14 <update_adc>
		fsm_power_supply();
 8002568:	f7fe fa9a 	bl	8000aa0 <fsm_power_supply>

		vTaskDelay(10);
 800256c:	200a      	movs	r0, #10
 800256e:	f005 fdbd 	bl	80080ec <vTaskDelay>
		update_adc();
 8002572:	e7f7      	b.n	8002564 <checkear_power_supply+0x8>

08002574 <lcd_update>:
}



void lcd_update(void *p)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		char str[16];
		uint8_t batt_level = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	77bb      	strb	r3, [r7, #30]

		lcd_clear();
 8002580:	f7fe feba 	bl	80012f8 <lcd_clear>
		vTaskDelay(30);
 8002584:	201e      	movs	r0, #30
 8002586:	f005 fdb1 	bl	80080ec <vTaskDelay>

		lcd_cursor(0, 0);
 800258a:	2100      	movs	r1, #0
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe feba 	bl	8001306 <lcd_cursor>
		lcd_send_string ("HORA:",5);
 8002592:	2105      	movs	r1, #5
 8002594:	4818      	ldr	r0, [pc, #96]	; (80025f8 <lcd_update+0x84>)
 8002596:	f7fe fed5 	bl	8001344 <lcd_send_string>
		vTaskDelay(30);
 800259a:	201e      	movs	r0, #30
 800259c:	f005 fda6 	bl	80080ec <vTaskDelay>

//		hora_to_str(obtener_tiempo(), str);
//		lcd_cursor(0,7);
//		lcd_send_string (str,8);

		lcd_cursor(1, 0);
 80025a0:	2100      	movs	r1, #0
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7fe feaf 	bl	8001306 <lcd_cursor>
		lcd_send_string ("BATERIA: |    |",15);
 80025a8:	210f      	movs	r1, #15
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <lcd_update+0x88>)
 80025ac:	f7fe feca 	bl	8001344 <lcd_send_string>
		vTaskDelay(30);
 80025b0:	201e      	movs	r0, #30
 80025b2:	f005 fd9b 	bl	80080ec <vTaskDelay>

		batt_level = adc_get_batt_level();
 80025b6:	f7fe faa3 	bl	8000b00 <adc_get_batt_level>
 80025ba:	4603      	mov	r3, r0
 80025bc:	77bb      	strb	r3, [r7, #30]
		for (uint8_t i = 0; i < batt_level; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	77fb      	strb	r3, [r7, #31]
 80025c2:	e00f      	b.n	80025e4 <lcd_update+0x70>
		{
			lcd_cursor(1, 10 + i);
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	330a      	adds	r3, #10
 80025c8:	4619      	mov	r1, r3
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7fe fe9b 	bl	8001306 <lcd_cursor>
			lcd_send_string (0xFF,1);
 80025d0:	2101      	movs	r1, #1
 80025d2:	20ff      	movs	r0, #255	; 0xff
 80025d4:	f7fe feb6 	bl	8001344 <lcd_send_string>
			vTaskDelay(30);
 80025d8:	201e      	movs	r0, #30
 80025da:	f005 fd87 	bl	80080ec <vTaskDelay>
		for (uint8_t i = 0; i < batt_level; i++)
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	3301      	adds	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
 80025e4:	7ffa      	ldrb	r2, [r7, #31]
 80025e6:	7fbb      	ldrb	r3, [r7, #30]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d3eb      	bcc.n	80025c4 <lcd_update+0x50>
		}

		vTaskDelay(5000);
 80025ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80025f0:	f005 fd7c 	bl	80080ec <vTaskDelay>
	{
 80025f4:	e7c2      	b.n	800257c <lcd_update+0x8>
 80025f6:	bf00      	nop
 80025f8:	080098a0 	.word	0x080098a0
 80025fc:	080098a8 	.word	0x080098a8

08002600 <chequear_clave>:

/* ---------  Variables de estado ------------*/

/* ===========================================*/

uint8_t chequear_clave(uint8_t *t){
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	uint8_t out = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]

	xSemaphoreTake(sem_clave,portMAX_DELAY);
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <chequear_clave+0x84>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002614:	4618      	mov	r0, r3
 8002616:	f005 f9b9 	bl	800798c <xQueueSemaphoreTake>
	if (t[LARGO_CLAVE] == '#'){
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b23      	cmp	r3, #35	; 0x23
 8002622:	d120      	bne.n	8002666 <chequear_clave+0x66>
		if (t[0]==clave[0] && t[1]==clave[1] && t[2]==clave[2] && t[3]==clave[3]){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	781a      	ldrb	r2, [r3, #0]
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <chequear_clave+0x88>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d117      	bne.n	8002660 <chequear_clave+0x60>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <chequear_clave+0x88>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	429a      	cmp	r2, r3
 800263c:	d110      	bne.n	8002660 <chequear_clave+0x60>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3302      	adds	r3, #2
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <chequear_clave+0x88>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	429a      	cmp	r2, r3
 800264a:	d109      	bne.n	8002660 <chequear_clave+0x60>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3303      	adds	r3, #3
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <chequear_clave+0x88>)
 8002654:	78db      	ldrb	r3, [r3, #3]
 8002656:	429a      	cmp	r2, r3
 8002658:	d102      	bne.n	8002660 <chequear_clave+0x60>
			out = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e004      	b.n	800266a <chequear_clave+0x6a>
		}
		else
			out = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	e001      	b.n	800266a <chequear_clave+0x6a>
	}
	else
		out = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(sem_clave);
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <chequear_clave+0x84>)
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	f004 fffe 	bl	8007674 <xQueueGenericSend>
	return out;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20003c6c 	.word	0x20003c6c
 8002688:	20003ea0 	.word	0x20003ea0

0800268c <init_teclado>:


void init_teclado(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	//Fila 1
	inicializar_arrebote(&boton[0][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002690:	2201      	movs	r2, #1
 8002692:	2100      	movs	r1, #0
 8002694:	4827      	ldr	r0, [pc, #156]	; (8002734 <init_teclado+0xa8>)
 8002696:	f7fe fa53 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800269a:	2201      	movs	r2, #1
 800269c:	2100      	movs	r1, #0
 800269e:	4826      	ldr	r0, [pc, #152]	; (8002738 <init_teclado+0xac>)
 80026a0:	f7fe fa4e 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026a4:	2201      	movs	r2, #1
 80026a6:	2100      	movs	r1, #0
 80026a8:	4824      	ldr	r0, [pc, #144]	; (800273c <init_teclado+0xb0>)
 80026aa:	f7fe fa49 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026ae:	2201      	movs	r2, #1
 80026b0:	2100      	movs	r1, #0
 80026b2:	4823      	ldr	r0, [pc, #140]	; (8002740 <init_teclado+0xb4>)
 80026b4:	f7fe fa44 	bl	8000b40 <inicializar_arrebote>

	//Fila 2
	inicializar_arrebote(&boton[1][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026b8:	2201      	movs	r2, #1
 80026ba:	2100      	movs	r1, #0
 80026bc:	4821      	ldr	r0, [pc, #132]	; (8002744 <init_teclado+0xb8>)
 80026be:	f7fe fa3f 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026c2:	2201      	movs	r2, #1
 80026c4:	2100      	movs	r1, #0
 80026c6:	4820      	ldr	r0, [pc, #128]	; (8002748 <init_teclado+0xbc>)
 80026c8:	f7fe fa3a 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026cc:	2201      	movs	r2, #1
 80026ce:	2100      	movs	r1, #0
 80026d0:	481e      	ldr	r0, [pc, #120]	; (800274c <init_teclado+0xc0>)
 80026d2:	f7fe fa35 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026d6:	2201      	movs	r2, #1
 80026d8:	2100      	movs	r1, #0
 80026da:	481d      	ldr	r0, [pc, #116]	; (8002750 <init_teclado+0xc4>)
 80026dc:	f7fe fa30 	bl	8000b40 <inicializar_arrebote>

	//Fila 3
	inicializar_arrebote(&boton[2][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2100      	movs	r1, #0
 80026e4:	481b      	ldr	r0, [pc, #108]	; (8002754 <init_teclado+0xc8>)
 80026e6:	f7fe fa2b 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2100      	movs	r1, #0
 80026ee:	481a      	ldr	r0, [pc, #104]	; (8002758 <init_teclado+0xcc>)
 80026f0:	f7fe fa26 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2100      	movs	r1, #0
 80026f8:	4818      	ldr	r0, [pc, #96]	; (800275c <init_teclado+0xd0>)
 80026fa:	f7fe fa21 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80026fe:	2201      	movs	r2, #1
 8002700:	2100      	movs	r1, #0
 8002702:	4817      	ldr	r0, [pc, #92]	; (8002760 <init_teclado+0xd4>)
 8002704:	f7fe fa1c 	bl	8000b40 <inicializar_arrebote>

	//Fila 4
	inicializar_arrebote(&boton[3][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002708:	2201      	movs	r2, #1
 800270a:	2100      	movs	r1, #0
 800270c:	4815      	ldr	r0, [pc, #84]	; (8002764 <init_teclado+0xd8>)
 800270e:	f7fe fa17 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002712:	2201      	movs	r2, #1
 8002714:	2100      	movs	r1, #0
 8002716:	4814      	ldr	r0, [pc, #80]	; (8002768 <init_teclado+0xdc>)
 8002718:	f7fe fa12 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800271c:	2201      	movs	r2, #1
 800271e:	2100      	movs	r1, #0
 8002720:	4812      	ldr	r0, [pc, #72]	; (800276c <init_teclado+0xe0>)
 8002722:	f7fe fa0d 	bl	8000b40 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002726:	2201      	movs	r2, #1
 8002728:	2100      	movs	r1, #0
 800272a:	4811      	ldr	r0, [pc, #68]	; (8002770 <init_teclado+0xe4>)
 800272c:	f7fe fa08 	bl	8000b40 <inicializar_arrebote>

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20003e20 	.word	0x20003e20
 8002738:	20003e28 	.word	0x20003e28
 800273c:	20003e30 	.word	0x20003e30
 8002740:	20003e38 	.word	0x20003e38
 8002744:	20003e40 	.word	0x20003e40
 8002748:	20003e48 	.word	0x20003e48
 800274c:	20003e50 	.word	0x20003e50
 8002750:	20003e58 	.word	0x20003e58
 8002754:	20003e60 	.word	0x20003e60
 8002758:	20003e68 	.word	0x20003e68
 800275c:	20003e70 	.word	0x20003e70
 8002760:	20003e78 	.word	0x20003e78
 8002764:	20003e80 	.word	0x20003e80
 8002768:	20003e88 	.word	0x20003e88
 800276c:	20003e90 	.word	0x20003e90
 8002770:	20003e98 	.word	0x20003e98

08002774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002776:	490d      	ldr	r1, [pc, #52]	; (80027ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800278c:	4c0a      	ldr	r4, [pc, #40]	; (80027b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800279a:	f7ff fba9 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800279e:	f006 ff05 	bl	80095ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a2:	f7fe fded 	bl	8001380 <main>
  bx lr
 80027a6:	4770      	bx	lr
  ldr r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027b0:	08009960 	.word	0x08009960
  ldr r2, =_sbss
 80027b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027b8:	20003eb4 	.word	0x20003eb4

080027bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC1_2_IRQHandler>
	...

080027c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_Init+0x28>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_Init+0x28>)
 80027ca:	f043 0310 	orr.w	r3, r3, #16
 80027ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 fd63 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	200f      	movs	r0, #15
 80027d8:	f7ff fb0a 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff f94e 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_IncTick+0x1c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_IncTick+0x20>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <HAL_IncTick+0x20>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000008 	.word	0x20000008
 800280c:	20003ea4 	.word	0x20003ea4

08002810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_GetTick+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20003ea4 	.word	0x20003ea4

08002824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff fff0 	bl	8002810 <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800283c:	d005      	beq.n	800284a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_Delay+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284a:	bf00      	nop
 800284c:	f7ff ffe0 	bl	8002810 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	429a      	cmp	r2, r3
 800285a:	d8f7      	bhi.n	800284c <HAL_Delay+0x28>
  {
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000008 	.word	0x20000008

0800286c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0be      	b.n	8002a0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff f91e 	bl	8001aec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 faf5 	bl	8002ea0 <ADC_ConversionStop_Disable>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 8099 	bne.w	80029fa <HAL_ADC_Init+0x18e>
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 8095 	bne.w	80029fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028d8:	f023 0302 	bic.w	r3, r3, #2
 80028dc:	f043 0202 	orr.w	r2, r3, #2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7b1b      	ldrb	r3, [r3, #12]
 80028f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d003      	beq.n	800290e <HAL_ADC_Init+0xa2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_ADC_Init+0xa8>
 800290e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002912:	e000      	b.n	8002916 <HAL_ADC_Init+0xaa>
 8002914:	2300      	movs	r3, #0
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7d1b      	ldrb	r3, [r3, #20]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b1b      	ldrb	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	3b01      	subs	r3, #1
 8002932:	035a      	lsls	r2, r3, #13
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	e00b      	b.n	8002958 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_ADC_Init+0x1a8>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	430b      	orrs	r3, r1
 800297e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002988:	d003      	beq.n	8002992 <HAL_ADC_Init+0x126>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d104      	bne.n	800299c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	3b01      	subs	r3, #1
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_ADC_Init+0x1ac>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d10b      	bne.n	80029d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f023 0312 	bic.w	r3, r3, #18
 80029e0:	f043 0210 	orr.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029f8:	e007      	b.n	8002a0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	ffe1f7fd 	.word	0xffe1f7fd
 8002a18:	ff1f0efe 	.word	0xff1f0efe

08002a1c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_ADC_Start_DMA+0x24>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_ADC_Start_DMA+0x1ac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_Start_DMA+0x32>
 8002a40:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 80b3 	bne.w	8002bb4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_Start_DMA+0x40>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0ae      	b.n	8002bba <HAL_ADC_Start_DMA+0x19e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9c1 	bl	8002dec <ADC_Enable>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 809a 	bne.w	8002baa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_ADC_Start_DMA+0x1ac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_Start_DMA+0x84>
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d115      	bne.n	8002acc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d026      	beq.n	8002b08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ac2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aca:	e01d      	b.n	8002b08 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_ADC_Start_DMA+0x1a8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_Start_DMA+0xd0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <HAL_ADC_Start_DMA+0x1ac>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10d      	bne.n	8002b08 <HAL_ADC_Start_DMA+0xec>
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <HAL_ADC_Start_DMA+0x1a8>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f023 0206 	bic.w	r2, r3, #6
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_ADC_Start_DMA+0x1b0>)
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_ADC_Start_DMA+0x1b4>)
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <HAL_ADC_Start_DMA+0x1b8>)
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0202 	mvn.w	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b60:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a18      	ldr	r0, [r3, #32]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	334c      	adds	r3, #76	; 0x4c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f000 fc23 	bl	80033bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b84:	d108      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b94:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b96:	e00f      	b.n	8002bb8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ba6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ba8:	e006      	b.n	8002bb8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002bb2:	e001      	b.n	8002bb8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40012400 	.word	0x40012400
 8002bc8:	40012800 	.word	0x40012800
 8002bcc:	08002f23 	.word	0x08002f23
 8002bd0:	08002f9f 	.word	0x08002f9f
 8002bd4:	08002fbb 	.word	0x08002fbb

08002bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x20>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0dc      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x1da>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d81c      	bhi.n	8002c66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b05      	subs	r3, #5
 8002c3e:	221f      	movs	r2, #31
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4019      	ands	r1, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b05      	subs	r3, #5
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
 8002c64:	e03c      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d81c      	bhi.n	8002ca8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b23      	subs	r3, #35	; 0x23
 8002c80:	221f      	movs	r2, #31
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	4019      	ands	r1, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	3b23      	subs	r3, #35	; 0x23
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca6:	e01b      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b41      	subs	r3, #65	; 0x41
 8002cba:	221f      	movs	r2, #31
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4019      	ands	r1, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b41      	subs	r3, #65	; 0x41
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	d91c      	bls.n	8002d22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4019      	ands	r1, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6898      	ldr	r0, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	3b1e      	subs	r3, #30
 8002d14:	fa00 f203 	lsl.w	r2, r0, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e019      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6919      	ldr	r1, [r3, #16]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	2207      	movs	r2, #7
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4019      	ands	r1, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6898      	ldr	r0, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d003      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d62:	2b11      	cmp	r3, #17
 8002d64:	d132      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d125      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d126      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d11a      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9a      	lsrs	r2, r3, #18
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f9      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x1b2>
 8002dba:	e007      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012400 	.word	0x40012400
 8002de4:	20000000 	.word	0x20000000
 8002de8:	431bde83 	.word	0x431bde83

08002dec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d040      	beq.n	8002e8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <ADC_Enable+0xac>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <ADC_Enable+0xb0>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e28:	e002      	b.n	8002e30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f9      	bne.n	8002e2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e36:	f7ff fceb 	bl	8002810 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e3c:	e01f      	b.n	8002e7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e3e:	f7ff fce7 	bl	8002810 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d918      	bls.n	8002e7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d011      	beq.n	8002e7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1d8      	bne.n	8002e3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	431bde83 	.word	0x431bde83

08002ea0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d12e      	bne.n	8002f18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eca:	f7ff fca1 	bl	8002810 <HAL_GetTick>
 8002ece:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ed0:	e01b      	b.n	8002f0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ed2:	f7ff fc9d 	bl	8002810 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d914      	bls.n	8002f0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10d      	bne.n	8002f0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d0dc      	beq.n	8002ed2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d127      	bne.n	8002f8c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f56:	d115      	bne.n	8002f84 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7fd fcb1 	bl	80008ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f8a:	e004      	b.n	8002f96 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fe13 	bl	8002bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff fe02 	bl	8002bea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADCEx_Calibration_Start+0x1e>
 800300a:	2302      	movs	r3, #2
 800300c:	e095      	b.n	800313a <HAL_ADCEx_Calibration_Start+0x14a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff42 	bl	8002ea0 <ADC_ConversionStop_Disable>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8084 	bne.w	8003130 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003030:	f023 0302 	bic.w	r3, r3, #2
 8003034:	f043 0202 	orr.w	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_ADCEx_Calibration_Start+0x154>)
 800303e:	681c      	ldr	r4, [r3, #0]
 8003040:	2002      	movs	r0, #2
 8003042:	f002 fba9 	bl	8005798 <HAL_RCCEx_GetPeriphCLKFreq>
 8003046:	4603      	mov	r3, r0
 8003048:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800304c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800304e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003050:	e002      	b.n	8003058 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3b01      	subs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff fec4 	bl	8002dec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003074:	f7ff fbcc 	bl	8002810 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800307a:	e01b      	b.n	80030b4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800307c:	f7ff fbc8 	bl	8002810 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b0a      	cmp	r3, #10
 8003088:	d914      	bls.n	80030b4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f023 0312 	bic.w	r3, r3, #18
 80030a0:	f043 0210 	orr.w	r2, r3, #16
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e042      	b.n	800313a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1dc      	bne.n	800307c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0204 	orr.w	r2, r2, #4
 80030d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80030d2:	f7ff fb9d 	bl	8002810 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030d8:	e01b      	b.n	8003112 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030da:	f7ff fb99 	bl	8002810 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	d914      	bls.n	8003112 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f023 0312 	bic.w	r3, r3, #18
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e013      	b.n	800313a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1dc      	bne.n	80030da <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003138:	7dfb      	ldrb	r3, [r7, #23]
}
 800313a:	4618      	mov	r0, r3
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60d3      	str	r3, [r2, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4906      	ldr	r1, [pc, #24]	; (80031e0 <__NVIC_EnableIRQ+0x34>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff4f 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff64 	bl	8003190 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ffb2 	bl	8003238 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff81 	bl	80031e4 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff57 	bl	80031ac <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e043      	b.n	80033a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_DMA_Init+0xa8>)
 8003326:	4413      	add	r3, r2
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_DMA_Init+0xac>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	009a      	lsls	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_DMA_Init+0xb0>)
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003352:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	bffdfff8 	.word	0xbffdfff8
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020000 	.word	0x40020000

080033bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_DMA_Start_IT+0x20>
 80033d8:	2302      	movs	r3, #2
 80033da:	e04a      	b.n	8003472 <HAL_DMA_Start_IT+0xb6>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d13a      	bne.n	8003464 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f938 	bl	8003688 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 020e 	orr.w	r2, r2, #14
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0204 	bic.w	r2, r2, #4
 8003440:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 020a 	orr.w	r2, r2, #10
 8003450:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e005      	b.n	8003470 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d04f      	beq.n	8003544 <HAL_DMA_IRQHandler+0xc8>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04a      	beq.n	8003544 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d029      	beq.n	800352a <HAL_DMA_IRQHandler+0xae>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a65      	ldr	r2, [pc, #404]	; (8003670 <HAL_DMA_IRQHandler+0x1f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_DMA_IRQHandler+0xaa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_DMA_IRQHandler+0x1f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01a      	beq.n	8003520 <HAL_DMA_IRQHandler+0xa4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_DMA_IRQHandler+0x1fc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d012      	beq.n	800351a <HAL_DMA_IRQHandler+0x9e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_DMA_IRQHandler+0x200>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x98>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5f      	ldr	r2, [pc, #380]	; (8003680 <HAL_DMA_IRQHandler+0x204>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d102      	bne.n	800350e <HAL_DMA_IRQHandler+0x92>
 8003508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800350c:	e00e      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800350e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003512:	e00b      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003518:	e008      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800351a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351e:	e005      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003524:	e002      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003526:	2340      	movs	r3, #64	; 0x40
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800352a:	2304      	movs	r3, #4
 800352c:	4a55      	ldr	r2, [pc, #340]	; (8003684 <HAL_DMA_IRQHandler+0x208>)
 800352e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8094 	beq.w	8003662 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003542:	e08e      	b.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2202      	movs	r2, #2
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d056      	beq.n	8003602 <HAL_DMA_IRQHandler+0x186>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d051      	beq.n	8003602 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020a 	bic.w	r2, r2, #10
 800357a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d029      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x166>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_DMA_IRQHandler+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0x162>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_DMA_IRQHandler+0x1f8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x15c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_DMA_IRQHandler+0x1fc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d012      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x156>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <HAL_DMA_IRQHandler+0x200>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x150>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_DMA_IRQHandler+0x204>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <HAL_DMA_IRQHandler+0x14a>
 80035c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035c4:	e00e      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ca:	e00b      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d0:	e008      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035d6:	e005      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035dc:	e002      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035de:	2320      	movs	r3, #32
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035e2:	2302      	movs	r3, #2
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_DMA_IRQHandler+0x208>)
 80035e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d034      	beq.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003600:	e02f      	b.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 020e 	bic.w	r2, r2, #14
 800362a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
    }
  }
  return;
 8003662:	bf00      	nop
 8003664:	bf00      	nop
}
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40020008 	.word	0x40020008
 8003670:	4002001c 	.word	0x4002001c
 8003674:	40020030 	.word	0x40020030
 8003678:	40020044 	.word	0x40020044
 800367c:	40020058 	.word	0x40020058
 8003680:	4002006c 	.word	0x4002006c
 8003684:	40020000 	.word	0x40020000

08003688 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d108      	bne.n	80036c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c6:	e007      	b.n	80036d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b08b      	sub	sp, #44	; 0x2c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e169      	b.n	80039cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036f8:	2201      	movs	r2, #1
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8158 	bne.w	80039c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a9a      	ldr	r2, [pc, #616]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d05e      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003720:	4a98      	ldr	r2, [pc, #608]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d875      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003726:	4a98      	ldr	r2, [pc, #608]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d058      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 800372c:	4a96      	ldr	r2, [pc, #600]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d86f      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003732:	4a96      	ldr	r2, [pc, #600]	; (800398c <HAL_GPIO_Init+0x2a8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d052      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003738:	4a94      	ldr	r2, [pc, #592]	; (800398c <HAL_GPIO_Init+0x2a8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d869      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800373e:	4a94      	ldr	r2, [pc, #592]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04c      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003744:	4a92      	ldr	r2, [pc, #584]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d863      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800374a:	4a92      	ldr	r2, [pc, #584]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d046      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003750:	4a90      	ldr	r2, [pc, #576]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d85d      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003756:	2b12      	cmp	r3, #18
 8003758:	d82a      	bhi.n	80037b0 <HAL_GPIO_Init+0xcc>
 800375a:	2b12      	cmp	r3, #18
 800375c:	d859      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_GPIO_Init+0x80>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037df 	.word	0x080037df
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037cb 	.word	0x080037cb
 8003770:	0800380d 	.word	0x0800380d
 8003774:	08003813 	.word	0x08003813
 8003778:	08003813 	.word	0x08003813
 800377c:	08003813 	.word	0x08003813
 8003780:	08003813 	.word	0x08003813
 8003784:	08003813 	.word	0x08003813
 8003788:	08003813 	.word	0x08003813
 800378c:	08003813 	.word	0x08003813
 8003790:	08003813 	.word	0x08003813
 8003794:	08003813 	.word	0x08003813
 8003798:	08003813 	.word	0x08003813
 800379c:	08003813 	.word	0x08003813
 80037a0:	08003813 	.word	0x08003813
 80037a4:	08003813 	.word	0x08003813
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	4a79      	ldr	r2, [pc, #484]	; (8003998 <HAL_GPIO_Init+0x2b4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037b6:	e02c      	b.n	8003812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	623b      	str	r3, [r7, #32]
          break;
 80037be:	e029      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	623b      	str	r3, [r7, #32]
          break;
 80037c8:	e024      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	3308      	adds	r3, #8
 80037d0:	623b      	str	r3, [r7, #32]
          break;
 80037d2:	e01f      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	330c      	adds	r3, #12
 80037da:	623b      	str	r3, [r7, #32]
          break;
 80037dc:	e01a      	b.n	8003814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037e6:	2304      	movs	r3, #4
 80037e8:	623b      	str	r3, [r7, #32]
          break;
 80037ea:	e013      	b.n	8003814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f4:	2308      	movs	r3, #8
 80037f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	611a      	str	r2, [r3, #16]
          break;
 80037fe:	e009      	b.n	8003814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003800:	2308      	movs	r3, #8
 8003802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	615a      	str	r2, [r3, #20]
          break;
 800380a:	e003      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x130>
          break;
 8003812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d801      	bhi.n	800381e <HAL_GPIO_Init+0x13a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_Init+0x13e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d802      	bhi.n	8003830 <HAL_GPIO_Init+0x14c>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x152>
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	3b08      	subs	r3, #8
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	210f      	movs	r1, #15
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80b1 	beq.w	80039c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4a4c      	ldr	r2, [pc, #304]	; (800399c <HAL_GPIO_Init+0x2b8>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800387c:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_GPIO_Init+0x2c0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_Init+0x1ec>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_GPIO_Init+0x2c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_Init+0x1e8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_GPIO_Init+0x2c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1e4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_GPIO_Init+0x2cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_Init+0x1e0>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e004      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e002      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	f002 0203 	and.w	r2, r2, #3
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	4093      	lsls	r3, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038e2:	492f      	ldr	r1, [pc, #188]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	492c      	ldr	r1, [pc, #176]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	4928      	ldr	r1, [pc, #160]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4922      	ldr	r1, [pc, #136]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	43db      	mvns	r3, r3
 800393a:	491e      	ldr	r1, [pc, #120]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800393c:	4013      	ands	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4918      	ldr	r1, [pc, #96]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	43db      	mvns	r3, r3
 8003962:	4914      	ldr	r1, [pc, #80]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003964:	4013      	ands	r3, r2
 8003966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d021      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
 8003980:	e021      	b.n	80039c6 <HAL_GPIO_Init+0x2e2>
 8003982:	bf00      	nop
 8003984:	10320000 	.word	0x10320000
 8003988:	10310000 	.word	0x10310000
 800398c:	10220000 	.word	0x10220000
 8003990:	10210000 	.word	0x10210000
 8003994:	10120000 	.word	0x10120000
 8003998:	10110000 	.word	0x10110000
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010800 	.word	0x40010800
 80039a8:	40010c00 	.word	0x40010c00
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40011400 	.word	0x40011400
 80039b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	43db      	mvns	r3, r3
 80039c0:	4909      	ldr	r1, [pc, #36]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3301      	adds	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f47f ae8e 	bne.w	80036f8 <HAL_GPIO_Init+0x14>
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	372c      	adds	r7, #44	; 0x2c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
 8003a26:	4613      	mov	r3, r2
 8003a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2a:	787b      	ldrb	r3, [r7, #1]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a36:	e003      	b.n	8003a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	041a      	lsls	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	611a      	str	r2, [r3, #16]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4013      	ands	r3, r2
 8003a62:	041a      	lsls	r2, r3, #16
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43d9      	mvns	r1, r3
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e12b      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe f88a 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f001 fd2e 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4a81      	ldr	r2, [pc, #516]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d807      	bhi.n	8003b00 <HAL_I2C_Init+0x84>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a80      	ldr	r2, [pc, #512]	; (8003cf4 <HAL_I2C_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e006      	b.n	8003b0e <HAL_I2C_Init+0x92>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_I2C_Init+0x27c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0e7      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a78      	ldr	r2, [pc, #480]	; (8003cfc <HAL_I2C_Init+0x280>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d802      	bhi.n	8003b50 <HAL_I2C_Init+0xd4>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	e009      	b.n	8003b64 <HAL_I2C_Init+0xe8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_I2C_Init+0x284>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	3301      	adds	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	495c      	ldr	r1, [pc, #368]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	d819      	bhi.n	8003bb8 <HAL_I2C_Init+0x13c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e59      	subs	r1, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b98:	400b      	ands	r3, r1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_I2C_Init+0x138>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e59      	subs	r1, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	e051      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e04f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_I2C_Init+0x168>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e012      	b.n	8003c0a <HAL_I2C_Init+0x18e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x196>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e022      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <HAL_I2C_Init+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e58      	subs	r0, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	e00f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	6809      	ldr	r1, [r1, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6911      	ldr	r1, [r2, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	000186a0 	.word	0x000186a0
 8003cf4:	001e847f 	.word	0x001e847f
 8003cf8:	003d08ff 	.word	0x003d08ff
 8003cfc:	431bde83 	.word	0x431bde83
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
 8003d14:	4613      	mov	r3, r2
 8003d16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7fe fd7a 	bl	8002810 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 80e0 	bne.w	8003eec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	4970      	ldr	r1, [pc, #448]	; (8003ef8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fe44 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0d3      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2C_Master_Transmit+0x50>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0cc      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d007      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	; 0x21
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2210      	movs	r2, #16
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a50      	ldr	r2, [pc, #320]	; (8003efc <HAL_I2C_Master_Transmit+0x1f8>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fbfe 	bl	80045c4 <I2C_MasterRequestWrite>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e08d      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de8:	e066      	b.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6a39      	ldr	r1, [r7, #32]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 febe 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	6a39      	ldr	r1, [r7, #32]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 feae 	bl	8004bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01a      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d194      	bne.n	8003dea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f1a:	f7fe fc79 	bl	8002810 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	f040 80d9 	bne.w	80040e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2319      	movs	r3, #25
 8003f34:	2201      	movs	r2, #1
 8003f36:	496d      	ldr	r1, [pc, #436]	; (80040ec <HAL_I2C_Mem_Write+0x1ec>)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fd43 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0cc      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Mem_Write+0x56>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0c5      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d007      	beq.n	8003f7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2221      	movs	r2, #33	; 0x21
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a4d      	ldr	r2, [pc, #308]	; (80040f0 <HAL_I2C_Mem_Write+0x1f0>)
 8003fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fbe:	88f8      	ldrh	r0, [r7, #6]
 8003fc0:	893a      	ldrh	r2, [r7, #8]
 8003fc2:	8979      	ldrh	r1, [r7, #10]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4603      	mov	r3, r0
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb7a 	bl	80046c8 <I2C_RequestMemoryWrite>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d052      	beq.n	8004080 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e081      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fdc4 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e06b      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	781a      	ldrb	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d11b      	bne.n	8004080 <HAL_I2C_Mem_Write+0x180>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d017      	beq.n	8004080 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1aa      	bne.n	8003fde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fdb0 	bl	8004bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b04      	cmp	r3, #4
 800409e:	d107      	bne.n	80040b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e016      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	00100002 	.word	0x00100002
 80040f0:	ffff0000 	.word	0xffff0000

080040f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08c      	sub	sp, #48	; 0x30
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004112:	f7fe fb7d 	bl	8002810 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	f040 8244 	bne.w	80045ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2319      	movs	r3, #25
 800412c:	2201      	movs	r2, #1
 800412e:	4982      	ldr	r1, [pc, #520]	; (8004338 <HAL_I2C_Mem_Read+0x244>)
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fc47 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
 800413e:	e237      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_I2C_Mem_Read+0x5a>
 800414a:	2302      	movs	r3, #2
 800414c:	e230      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d007      	beq.n	8004174 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2222      	movs	r2, #34	; 0x22
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a62      	ldr	r2, [pc, #392]	; (800433c <HAL_I2C_Mem_Read+0x248>)
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041b6:	88f8      	ldrh	r0, [r7, #6]
 80041b8:	893a      	ldrh	r2, [r7, #8]
 80041ba:	8979      	ldrh	r1, [r7, #10]
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4603      	mov	r3, r0
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb14 	bl	80047f4 <I2C_RequestMemoryRead>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e1ec      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d113      	bne.n	8004206 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e1c0      	b.n	8004588 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b01      	cmp	r3, #1
 800420c:	d11e      	bne.n	800424c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800421e:	b672      	cpsid	i
}
 8004220:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004248:	b662      	cpsie	i
}
 800424a:	e035      	b.n	80042b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	2b02      	cmp	r3, #2
 8004252:	d11e      	bne.n	8004292 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004264:	b672      	cpsid	i
}
 8004266:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800428e:	b662      	cpsie	i
}
 8004290:	e012      	b.n	80042b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042b8:	e166      	b.n	8004588 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b03      	cmp	r3, #3
 80042c0:	f200 811f 	bhi.w	8004502 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d123      	bne.n	8004314 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fccf 	bl	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e167      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004312:	e139      	b.n	8004588 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b02      	cmp	r3, #2
 800431a:	d152      	bne.n	80043c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2200      	movs	r2, #0
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_I2C_Mem_Read+0x24c>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fb4c 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e13c      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
 8004336:	bf00      	nop
 8004338:	00100002 	.word	0x00100002
 800433c:	ffff0000 	.word	0xffff0000
 8004340:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004344:	b672      	cpsid	i
}
 8004346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800438a:	b662      	cpsie	i
}
 800438c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c0:	e0e2      	b.n	8004588 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2200      	movs	r2, #0
 80043ca:	497b      	ldr	r1, [pc, #492]	; (80045b8 <HAL_I2C_Mem_Read+0x4c4>)
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 faf9 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0e9      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ec:	b672      	cpsid	i
}
 80043ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004422:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_I2C_Mem_Read+0x4c8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	4a65      	ldr	r2, [pc, #404]	; (80045c0 <HAL_I2C_Mem_Read+0x4cc>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0a1a      	lsrs	r2, r3, #8
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	3b01      	subs	r3, #1
 8004440:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d118      	bne.n	800447a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800446a:	b662      	cpsie	i
}
 800446c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e09a      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b04      	cmp	r3, #4
 8004486:	d1d9      	bne.n	800443c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044ca:	b662      	cpsie	i
}
 80044cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004500:	e042      	b.n	8004588 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fbb4 	bl	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e04c      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d118      	bne.n	8004588 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f ae94 	bne.w	80042ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3728      	adds	r7, #40	; 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	00010004 	.word	0x00010004
 80045bc:	20000000 	.word	0x20000000
 80045c0:	14f8b589 	.word	0x14f8b589

080045c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	460b      	mov	r3, r1
 80045d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d006      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d003      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ec:	d108      	bne.n	8004600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e00b      	b.n	8004618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b12      	cmp	r3, #18
 8004606:	d107      	bne.n	8004618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f9cd 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d103      	bne.n	8004648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e035      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004654:	d108      	bne.n	8004668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e01b      	b.n	80046a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004668:	897b      	ldrh	r3, [r7, #10]
 800466a:	11db      	asrs	r3, r3, #7
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f063 030f 	orn	r3, r3, #15
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <I2C_MasterRequestWrite+0xfc>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f9f3 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e010      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <I2C_MasterRequestWrite+0x100>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f9e3 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00010008 	.word	0x00010008
 80046c4:	00010002 	.word	0x00010002

080046c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f960 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d103      	bne.n	8004722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e05f      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	492d      	ldr	r1, [pc, #180]	; (80047f0 <I2C_RequestMemoryWrite+0x128>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f998 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa02 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02b      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e021      	b.n	80047e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f9dc 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8c2 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0aa      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	4952      	ldr	r1, [pc, #328]	; (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f8fa 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e097      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f964 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e076      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f93e 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e050      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	6a39      	ldr	r1, [r7, #32]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f923 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e035      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f82b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d103      	bne.n	800498c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e013      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	4906      	ldr	r1, [pc, #24]	; (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f863 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010002 	.word	0x00010002

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e025      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049dc:	d021      	beq.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fd ff17 	bl	8002810 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d116      	bne.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e023      	b.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10d      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	43da      	mvns	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	e00c      	b.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d0b6      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a80:	e051      	b.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a90:	d123      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f043 0204 	orr.w	r2, r3, #4
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e046      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae0:	d021      	beq.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fd fe95 	bl	8002810 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d116      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e020      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10c      	bne.n	8004b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e00b      	b.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d18d      	bne.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f8ce 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02d      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b94:	d021      	beq.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fd fe3b 	bl	8002810 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e007      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d1ca      	bne.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f88d 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e02d      	b.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d021      	beq.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fd fdfa 	bl	8002810 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d1ca      	bne.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c80:	e042      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d119      	bne.n	8004cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0210 	mvn.w	r2, #16
 8004c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e029      	b.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fd fda4 	bl	8002810 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d1b5      	bne.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d11b      	bne.n	8004d70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	420e0020 	.word	0x420e0020

08004d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e26e      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8089 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004db4:	4b93      	ldr	r3, [pc, #588]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d00c      	beq.n	8004dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dc0:	4b90      	ldr	r3, [pc, #576]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d112      	bne.n	8004df2 <HAL_RCC_OscConfig+0x5e>
 8004dcc:	4b8d      	ldr	r3, [pc, #564]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dda:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d06e      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x130>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d16a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e248      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x76>
 8004dfc:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a80      	ldr	r2, [pc, #512]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e02e      	b.n	8004e68 <HAL_RCC_OscConfig+0xd4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x98>
 8004e12:	4b7c      	ldr	r3, [pc, #496]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7b      	ldr	r2, [pc, #492]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a78      	ldr	r2, [pc, #480]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e01d      	b.n	8004e68 <HAL_RCC_OscConfig+0xd4>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0xbc>
 8004e36:	4b73      	ldr	r3, [pc, #460]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a72      	ldr	r2, [pc, #456]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b70      	ldr	r3, [pc, #448]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6f      	ldr	r2, [pc, #444]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCC_OscConfig+0xd4>
 8004e50:	4b6c      	ldr	r3, [pc, #432]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6b      	ldr	r2, [pc, #428]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b69      	ldr	r3, [pc, #420]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a68      	ldr	r2, [pc, #416]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d014      	beq.n	8004e9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fcce 	bl	8002810 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	e009      	b.n	8004e8c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fd fcca 	bl	8002810 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1fb      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8c:	4b5d      	ldr	r3, [pc, #372]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ef      	beq.n	8004e78 <HAL_RCC_OscConfig+0xe4>
 8004e98:	e015      	b.n	8004ec6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fcb9 	bl	8002810 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea0:	e009      	b.n	8004eb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea2:	f7fd fcb5 	bl	8002810 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1e6      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb6:	4b53      	ldr	r3, [pc, #332]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1ef      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x10e>
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_OscConfig+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed2:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ede:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d11c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x190>
 8004eea:	4b46      	ldr	r3, [pc, #280]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d116      	bne.n	8004f24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x17a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e1ba      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4939      	ldr	r1, [pc, #228]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	e03a      	b.n	8004f9a <HAL_RCC_OscConfig+0x206>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d020      	beq.n	8004f6e <HAL_RCC_OscConfig+0x1da>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fc6d 	bl	8002810 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fd fc69 	bl	8002810 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1b8>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e19b      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1a6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4927      	ldr	r1, [pc, #156]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0x206>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f6e:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCC_OscConfig+0x274>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd fc4c 	bl	8002810 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fd fc48 	bl	8002810 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e17a      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x1e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03a      	beq.n	800501c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d019      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <HAL_RCC_OscConfig+0x278>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fc2c 	bl	8002810 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x23a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbc:	f7fd fc28 	bl	8002810 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e15a      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x228>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f000 fb08 	bl	80055f0 <RCC_Delay>
 8004fe0:	e01c      	b.n	800501c <HAL_RCC_OscConfig+0x288>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_OscConfig+0x278>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe8:	f7fd fc12 	bl	8002810 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fee:	e00f      	b.n	8005010 <HAL_RCC_OscConfig+0x27c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd fc0e 	bl	8002810 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d908      	bls.n	8005010 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e140      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	42420000 	.word	0x42420000
 800500c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	4b9e      	ldr	r3, [pc, #632]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e9      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a6 	beq.w	8005176 <HAL_RCC_OscConfig+0x3e2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502e:	4b97      	ldr	r3, [pc, #604]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <HAL_RCC_OscConfig+0x2c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	4b94      	ldr	r3, [pc, #592]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4a93      	ldr	r2, [pc, #588]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005044:	61d3      	str	r3, [r2, #28]
 8005046:	4b91      	ldr	r3, [pc, #580]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b8e      	ldr	r3, [pc, #568]	; (8005290 <HAL_RCC_OscConfig+0x4fc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d118      	bne.n	8005094 <HAL_RCC_OscConfig+0x300>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005062:	4b8b      	ldr	r3, [pc, #556]	; (8005290 <HAL_RCC_OscConfig+0x4fc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a8a      	ldr	r2, [pc, #552]	; (8005290 <HAL_RCC_OscConfig+0x4fc>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fd fbcf 	bl	8002810 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005076:	f7fd fbcb 	bl	8002810 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	; 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0fd      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x4fc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x2e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <HAL_RCC_OscConfig+0x316>
 800509c:	4b7b      	ldr	r3, [pc, #492]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4a7a      	ldr	r2, [pc, #488]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6213      	str	r3, [r2, #32]
 80050a8:	e02d      	b.n	8005106 <HAL_RCC_OscConfig+0x372>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x338>
 80050b2:	4b76      	ldr	r3, [pc, #472]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4a75      	ldr	r2, [pc, #468]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	6213      	str	r3, [r2, #32]
 80050be:	4b73      	ldr	r3, [pc, #460]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	6213      	str	r3, [r2, #32]
 80050ca:	e01c      	b.n	8005106 <HAL_RCC_OscConfig+0x372>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x35a>
 80050d4:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4a6c      	ldr	r2, [pc, #432]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	4b6a      	ldr	r3, [pc, #424]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4a69      	ldr	r2, [pc, #420]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	e00b      	b.n	8005106 <HAL_RCC_OscConfig+0x372>
 80050ee:	4b67      	ldr	r3, [pc, #412]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4a66      	ldr	r2, [pc, #408]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6213      	str	r3, [r2, #32]
 80050fa:	4b64      	ldr	r3, [pc, #400]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4a63      	ldr	r2, [pc, #396]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fd fb7f 	bl	8002810 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x398>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fd fb7b 	bl	8002810 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	; 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e0ab      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	4b57      	ldr	r3, [pc, #348]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ee      	beq.n	8005116 <HAL_RCC_OscConfig+0x382>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513a:	f7fd fb69 	bl	8002810 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x3c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fd fb65 	bl	8002810 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e095      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005158:	4b4c      	ldr	r3, [pc, #304]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ee      	bne.n	8005142 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_RCC_OscConfig+0x3e2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516a:	4b48      	ldr	r3, [pc, #288]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	4a47      	ldr	r2, [pc, #284]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8081 	beq.w	8005282 <HAL_RCC_OscConfig+0x4ee>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005180:	4b42      	ldr	r3, [pc, #264]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	2b08      	cmp	r3, #8
 800518a:	d061      	beq.n	8005250 <HAL_RCC_OscConfig+0x4bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d146      	bne.n	8005222 <HAL_RCC_OscConfig+0x48e>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005194:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <HAL_RCC_OscConfig+0x500>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fd fb39 	bl	8002810 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x420>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fd fb35 	bl	8002810 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x420>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e067      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b4:	4b35      	ldr	r3, [pc, #212]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x40e>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d108      	bne.n	80051dc <HAL_RCC_OscConfig+0x448>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	492d      	ldr	r1, [pc, #180]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a19      	ldr	r1, [r3, #32]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	430b      	orrs	r3, r1
 80051ee:	4927      	ldr	r1, [pc, #156]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCC_OscConfig+0x500>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fd fb09 	bl	8002810 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x480>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005202:	f7fd fb05 	bl	8002810 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e037      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x46e>
 8005220:	e02f      	b.n	8005282 <HAL_RCC_OscConfig+0x4ee>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <HAL_RCC_OscConfig+0x500>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fd faf2 	bl	8002810 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x4ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd faee 	bl	8002810 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x4ae>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e020      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x49c>
 800524e:	e018      	b.n	8005282 <HAL_RCC_OscConfig+0x4ee>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_RCC_OscConfig+0x4c8>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e013      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_OscConfig+0x4f8>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	429a      	cmp	r2, r3
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0x4ee>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_RCC_OscConfig+0x4f0>
        }
      }
    }
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	40007000 	.word	0x40007000
 8005294:	42420060 	.word	0x42420060

08005298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0d0      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d910      	bls.n	80052dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b67      	ldr	r3, [pc, #412]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 0207 	bic.w	r2, r3, #7
 80052c2:	4965      	ldr	r1, [pc, #404]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b63      	ldr	r3, [pc, #396]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0b8      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d020      	beq.n	800532a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f4:	4b59      	ldr	r3, [pc, #356]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800530c:	4b53      	ldr	r3, [pc, #332]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a52      	ldr	r2, [pc, #328]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005318:	4b50      	ldr	r3, [pc, #320]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	494d      	ldr	r1, [pc, #308]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d040      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b47      	ldr	r3, [pc, #284]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d115      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e07f      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	4b41      	ldr	r3, [pc, #260]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e073      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005366:	4b3d      	ldr	r3, [pc, #244]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e06b      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f023 0203 	bic.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4936      	ldr	r1, [pc, #216]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005388:	f7fd fa42 	bl	8002810 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005390:	f7fd fa3e 	bl	8002810 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e053      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	4b2d      	ldr	r3, [pc, #180]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 020c 	and.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1eb      	bne.n	8005390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b8:	4b27      	ldr	r3, [pc, #156]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d210      	bcs.n	80053e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 0207 	bic.w	r2, r3, #7
 80053ce:	4922      	ldr	r1, [pc, #136]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <HAL_RCC_ClockConfig+0x1c0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e032      	b.n	800544e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4916      	ldr	r1, [pc, #88]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005412:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	490e      	ldr	r1, [pc, #56]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005426:	f000 f821 	bl	800546c <HAL_RCC_GetSysClockFreq>
 800542a:	4602      	mov	r2, r0
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	490a      	ldr	r1, [pc, #40]	; (8005460 <HAL_RCC_ClockConfig+0x1c8>)
 8005438:	5ccb      	ldrb	r3, [r1, r3]
 800543a:	fa22 f303 	lsr.w	r3, r2, r3
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <HAL_RCC_ClockConfig+0x1cc>)
 8005440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1d0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fc fcd2 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40022000 	.word	0x40022000
 800545c:	40021000 	.word	0x40021000
 8005460:	080098e0 	.word	0x080098e0
 8005464:	20000000 	.word	0x20000000
 8005468:	20000004 	.word	0x20000004

0800546c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	b490      	push	{r4, r7}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005474:	1d3c      	adds	r4, r7, #4
 8005476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800547c:	f240 2301 	movw	r3, #513	; 0x201
 8005480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005496:	4b22      	ldr	r3, [pc, #136]	; (8005520 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x40>
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d003      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x46>
 80054aa:	e02d      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ae:	623b      	str	r3, [r7, #32]
      break;
 80054b0:	e02d      	b.n	800550e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054be:	4413      	add	r3, r2
 80054c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	0c5b      	lsrs	r3, r3, #17
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054de:	4413      	add	r3, r2
 80054e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ea:	fb02 f203 	mul.w	r2, r2, r3
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	e004      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	623b      	str	r3, [r7, #32]
      break;
 8005506:	e002      	b.n	800550e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800550a:	623b      	str	r3, [r7, #32]
      break;
 800550c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550e:	6a3b      	ldr	r3, [r7, #32]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	; 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	bc90      	pop	{r4, r7}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	080098b8 	.word	0x080098b8
 8005520:	40021000 	.word	0x40021000
 8005524:	007a1200 	.word	0x007a1200
 8005528:	003d0900 	.word	0x003d0900

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <HAL_RCC_GetHCLKFreq+0x10>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	20000000 	.word	0x20000000

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005544:	f7ff fff2 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	0a1b      	lsrs	r3, r3, #8
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	080098f0 	.word	0x080098f0

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffde 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	0adb      	lsrs	r3, r3, #11
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	080098f0 	.word	0x080098f0

08005590 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	220f      	movs	r2, #15
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_RCC_GetClockConfig+0x58>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 0203 	and.w	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <HAL_RCC_GetClockConfig+0x58>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_GetClockConfig+0x58>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_RCC_GetClockConfig+0x58>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_RCC_GetClockConfig+0x5c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0207 	and.w	r2, r3, #7
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40022000 	.word	0x40022000

080055f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <RCC_Delay+0x34>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <RCC_Delay+0x38>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	0a5b      	lsrs	r3, r3, #9
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800560c:	bf00      	nop
  }
  while (Delay --);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	60fa      	str	r2, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f9      	bne.n	800560c <RCC_Delay+0x1c>
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	20000000 	.word	0x20000000
 8005628:	10624dd3 	.word	0x10624dd3

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d07d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564c:	4b4f      	ldr	r3, [pc, #316]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10d      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b4c      	ldr	r3, [pc, #304]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4a4b      	ldr	r2, [pc, #300]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	61d3      	str	r3, [r2, #28]
 8005664:	4b49      	ldr	r3, [pc, #292]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	4b46      	ldr	r3, [pc, #280]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d118      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005680:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568c:	f7fd f8c0 	bl	8002810 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005694:	f7fd f8bc 	bl	8002810 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e06d      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056b2:	4b36      	ldr	r3, [pc, #216]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02e      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d027      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d0:	4b2e      	ldr	r3, [pc, #184]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056e0:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056e6:	4a29      	ldr	r2, [pc, #164]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d014      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fd f88b 	bl	8002810 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	e00a      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fd f887 	bl	8002810 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e036      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ee      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4917      	ldr	r1, [pc, #92]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	4313      	orrs	r3, r2
 8005730:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4a13      	ldr	r2, [pc, #76]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	490b      	ldr	r1, [pc, #44]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	4313      	orrs	r3, r2
 8005760:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4904      	ldr	r1, [pc, #16]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	40007000 	.word	0x40007000
 8005794:	42420440 	.word	0x42420440

08005798 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b08d      	sub	sp, #52	; 0x34
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057a0:	4b5a      	ldr	r3, [pc, #360]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80057a2:	f107 040c 	add.w	r4, r7, #12
 80057a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057ac:	f240 2301 	movw	r3, #513	; 0x201
 80057b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ba:	2300      	movs	r3, #0
 80057bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	2300      	movs	r3, #0
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	f200 8091 	bhi.w	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d04c      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d07c      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80057e0:	e089      	b.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80057e2:	4b4b      	ldr	r3, [pc, #300]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80057e8:	4b49      	ldr	r3, [pc, #292]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8082 	beq.w	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	0c9b      	lsrs	r3, r3, #18
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005802:	4413      	add	r3, r2
 8005804:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005808:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d018      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005814:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	0c5b      	lsrs	r3, r3, #17
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005822:	4413      	add	r3, r2
 8005824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005834:	4a37      	ldr	r2, [pc, #220]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005844:	e004      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	4a33      	ldr	r2, [pc, #204]	; (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005850:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800585c:	d102      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005862:	e04a      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005872:	e042      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005874:	4b26      	ldr	r3, [pc, #152]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005884:	d108      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
 8005896:	e01f      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80058a4:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80058b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b6:	e00f      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c2:	d11c      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d016      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80058d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058d6:	e012      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80058d8:	e011      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80058da:	f7ff fe45 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0b9b      	lsrs	r3, r3, #14
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	3301      	adds	r3, #1
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80058fe:	bf00      	nop
    }
  }
  return (frequency);
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005902:	4618      	mov	r0, r3
 8005904:	3734      	adds	r7, #52	; 0x34
 8005906:	46bd      	mov	sp, r7
 8005908:	bd90      	pop	{r4, r7, pc}
 800590a:	bf00      	nop
 800590c:	080098c8 	.word	0x080098c8
 8005910:	40021000 	.word	0x40021000
 8005914:	007a1200 	.word	0x007a1200
 8005918:	003d0900 	.word	0x003d0900
 800591c:	aaaaaaab 	.word	0xaaaaaaab

08005920 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e084      	b.n	8005a40 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7c5b      	ldrb	r3, [r3, #17]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc f988 	bl	8001c5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f952 	bl	8005bfc <HAL_RTC_WaitForSynchro>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2204      	movs	r2, #4
 8005962:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e06b      	b.n	8005a40 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa0b 	bl	8005d84 <RTC_EnterInitMode>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2204      	movs	r2, #4
 8005978:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e060      	b.n	8005a40 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0207 	bic.w	r2, r2, #7
 800598c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005996:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <HAL_RTC_Init+0x128>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <HAL_RTC_Init+0x128>)
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RTC_Init+0x128>)
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	4926      	ldr	r1, [pc, #152]	; (8005a48 <HAL_RTC_Init+0x128>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059bc:	d003      	beq.n	80059c6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e00e      	b.n	80059e4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80059c6:	2001      	movs	r0, #1
 80059c8:	f7ff fee6 	bl	8005798 <HAL_RCCEx_GetPeriphCLKFreq>
 80059cc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2204      	movs	r2, #4
 80059d8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e030      	b.n	8005a40 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 010f 	bic.w	r1, r3, #15
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	0c1a      	lsrs	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	b291      	uxth	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9df 	bl	8005dd4 <RTC_ExitInitMode>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e00c      	b.n	8005a40 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40006c00 	.word	0x40006c00

08005a4c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_RTC_GetTime+0x28>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0b5      	b.n	8005be4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0ac      	b.n	8005be4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f8e3 	bl	8005c56 <RTC_ReadTimeCounter>
 8005a90:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	4a55      	ldr	r2, [pc, #340]	; (8005bec <HAL_RTC_GetTime+0x1a0>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	0adb      	lsrs	r3, r3, #11
 8005a9c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4b52      	ldr	r3, [pc, #328]	; (8005bec <HAL_RTC_GetTime+0x1a0>)
 8005aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa6:	0adb      	lsrs	r3, r3, #11
 8005aa8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	4a4f      	ldr	r2, [pc, #316]	; (8005bf0 <HAL_RTC_GetTime+0x1a4>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	4a4a      	ldr	r2, [pc, #296]	; (8005bec <HAL_RTC_GetTime+0x1a0>)
 8005ac4:	fba2 1203 	umull	r1, r2, r2, r3
 8005ac8:	0ad2      	lsrs	r2, r2, #11
 8005aca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005ace:	fb01 f202 	mul.w	r2, r1, r2
 8005ad2:	1a9a      	subs	r2, r3, r2
 8005ad4:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <HAL_RTC_GetTime+0x1a4>)
 8005ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ada:	0959      	lsrs	r1, r3, #5
 8005adc:	460b      	mov	r3, r1
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	1a5b      	subs	r3, r3, r1
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	1ad1      	subs	r1, r2, r3
 8005ae6:	b2ca      	uxtb	r2, r1
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b17      	cmp	r3, #23
 8005af0:	d955      	bls.n	8005b9e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4a3f      	ldr	r2, [pc, #252]	; (8005bf4 <HAL_RTC_GetTime+0x1a8>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005afe:	6939      	ldr	r1, [r7, #16]
 8005b00:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <HAL_RTC_GetTime+0x1a8>)
 8005b02:	fba3 2301 	umull	r2, r3, r3, r1
 8005b06:	091a      	lsrs	r2, r3, #4
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	1aca      	subs	r2, r1, r3
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f8f3 	bl	8005d04 <RTC_ReadAlarmCounter>
 8005b1e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b26:	d008      	beq.n	8005b3a <HAL_RTC_GetTime+0xee>
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d904      	bls.n	8005b3a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e002      	b.n	8005b40 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b3e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4a2d      	ldr	r2, [pc, #180]	; (8005bf8 <HAL_RTC_GetTime+0x1ac>)
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005b4e:	69b9      	ldr	r1, [r7, #24]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f8b0 	bl	8005cb6 <RTC_WriteTimeCounter>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e041      	b.n	8005be4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b66:	d00c      	beq.n	8005b82 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f8df 	bl	8005d36 <RTC_WriteAlarmCounter>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e030      	b.n	8005be4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f8d6 	bl	8005d36 <RTC_WriteAlarmCounter>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e027      	b.n	8005be4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f961 	bl	8005e5e <RTC_DateUpdate>
 8005b9c:	e003      	b.n	8005ba6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01a      	beq.n	8005be2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f937 	bl	8005e24 <RTC_ByteToBcd2>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f92e 	bl	8005e24 <RTC_ByteToBcd2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	789b      	ldrb	r3, [r3, #2]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f925 	bl	8005e24 <RTC_ByteToBcd2>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	91a2b3c5 	.word	0x91a2b3c5
 8005bf0:	88888889 	.word	0x88888889
 8005bf4:	aaaaaaab 	.word	0xaaaaaaab
 8005bf8:	00015180 	.word	0x00015180

08005bfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e01d      	b.n	8005c4e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0208 	bic.w	r2, r2, #8
 8005c20:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005c22:	f7fc fdf5 	bl	8002810 <HAL_GetTick>
 8005c26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005c28:	e009      	b.n	8005c3e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c2a:	f7fc fdf1 	bl	8002810 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c38:	d901      	bls.n	8005c3e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e007      	b.n	8005c4e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ee      	beq.n	8005c2a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	827b      	strh	r3, [r7, #18]
 8005c62:	2300      	movs	r3, #0
 8005c64:	823b      	strh	r3, [r7, #16]
 8005c66:	2300      	movs	r3, #0
 8005c68:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005c86:	8a7a      	ldrh	r2, [r7, #18]
 8005c88:	8a3b      	ldrh	r3, [r7, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d008      	beq.n	8005ca0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005c8e:	8a3b      	ldrh	r3, [r7, #16]
 8005c90:	041a      	lsls	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e004      	b.n	8005caa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ca0:	8a7b      	ldrh	r3, [r7, #18]
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005caa:	697b      	ldr	r3, [r7, #20]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f85d 	bl	8005d84 <RTC_EnterInitMode>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e011      	b.n	8005cfa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	0c12      	lsrs	r2, r2, #16
 8005cde:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f872 	bl	8005dd4 <RTC_ExitInitMode>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	81fb      	strh	r3, [r7, #14]
 8005d10:	2300      	movs	r3, #0
 8005d12:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	89bb      	ldrh	r3, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f81d 	bl	8005d84 <RTC_EnterInitMode>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e011      	b.n	8005d7a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	0c12      	lsrs	r2, r2, #16
 8005d5e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	b292      	uxth	r2, r2
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f832 	bl	8005dd4 <RTC_ExitInitMode>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005d90:	f7fc fd3e 	bl	8002810 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005d96:	e009      	b.n	8005dac <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d98:	f7fc fd3a 	bl	8002810 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da6:	d901      	bls.n	8005dac <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e00f      	b.n	8005dcc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ee      	beq.n	8005d98 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0210 	orr.w	r2, r2, #16
 8005dc8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0210 	bic.w	r2, r2, #16
 8005dee:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005df0:	f7fc fd0e 	bl	8002810 <HAL_GetTick>
 8005df4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005df6:	e009      	b.n	8005e0c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005df8:	f7fc fd0a 	bl	8002810 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e06:	d901      	bls.n	8005e0c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e007      	b.n	8005e1c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ee      	beq.n	8005df8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005e32:	e005      	b.n	8005e40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	3b0a      	subs	r3, #10
 8005e3e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d8f6      	bhi.n	8005e34 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b2db      	uxtb	r3, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7bdb      	ldrb	r3, [r3, #15]
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7b5b      	ldrb	r3, [r3, #13]
 8005e82:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	7b9b      	ldrb	r3, [r3, #14]
 8005e88:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	e06f      	b.n	8005f70 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d011      	beq.n	8005eba <RTC_DateUpdate+0x5c>
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d00e      	beq.n	8005eba <RTC_DateUpdate+0x5c>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d00b      	beq.n	8005eba <RTC_DateUpdate+0x5c>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d008      	beq.n	8005eba <RTC_DateUpdate+0x5c>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d005      	beq.n	8005eba <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b0a      	cmp	r3, #10
 8005eb2:	d002      	beq.n	8005eba <RTC_DateUpdate+0x5c>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d117      	bne.n	8005eea <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b1e      	cmp	r3, #30
 8005ebe:	d803      	bhi.n	8005ec8 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ec6:	e050      	b.n	8005f6a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b0c      	cmp	r3, #12
 8005ecc:	d005      	beq.n	8005eda <RTC_DateUpdate+0x7c>
        {
          month++;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ed8:	e047      	b.n	8005f6a <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005eda:	2301      	movs	r3, #1
 8005edc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
          year++;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005ee8:	e03f      	b.n	8005f6a <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d008      	beq.n	8005f02 <RTC_DateUpdate+0xa4>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d005      	beq.n	8005f02 <RTC_DateUpdate+0xa4>
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	d002      	beq.n	8005f02 <RTC_DateUpdate+0xa4>
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b0b      	cmp	r3, #11
 8005f00:	d10c      	bne.n	8005f1c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b1d      	cmp	r3, #29
 8005f06:	d803      	bhi.n	8005f10 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005f0e:	e02c      	b.n	8005f6a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005f16:	2301      	movs	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005f1a:	e026      	b.n	8005f6a <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d123      	bne.n	8005f6a <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b1b      	cmp	r3, #27
 8005f26:	d803      	bhi.n	8005f30 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e01c      	b.n	8005f6a <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b1c      	cmp	r3, #28
 8005f34:	d111      	bne.n	8005f5a <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f838 	bl	8005fb0 <RTC_IsLeapYear>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <RTC_DateUpdate+0xf0>
        {
          day++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e00d      	b.n	8005f6a <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3301      	adds	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005f54:	2301      	movs	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e007      	b.n	8005f6a <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b1d      	cmp	r3, #29
 8005f5e:	d104      	bne.n	8005f6a <RTC_DateUpdate+0x10c>
      {
        month++;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005f66:	2301      	movs	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d38b      	bcc.n	8005e90 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f000 f83a 	bl	8006014 <RTC_WeekDayNum>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	731a      	strb	r2, [r3, #12]
}
 8005fa8:	bf00      	nop
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e01d      	b.n	8006006 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	4a10      	ldr	r2, [pc, #64]	; (8006010 <RTC_IsLeapYear+0x60>)
 8005fce:	fba2 1203 	umull	r1, r2, r2, r3
 8005fd2:	0952      	lsrs	r2, r2, #5
 8005fd4:	2164      	movs	r1, #100	; 0x64
 8005fd6:	fb01 f202 	mul.w	r2, r1, r2
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e00f      	b.n	8006006 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <RTC_IsLeapYear+0x60>)
 8005fea:	fba2 1203 	umull	r1, r2, r2, r3
 8005fee:	09d2      	lsrs	r2, r2, #7
 8005ff0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ff4:	fb01 f202 	mul.w	r2, r1, r2
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006004:	2300      	movs	r3, #0
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	51eb851f 	.word	0x51eb851f

08006014 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
 8006020:	4613      	mov	r3, r2
 8006022:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006032:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d82d      	bhi.n	8006096 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <RTC_WeekDayNum+0xe4>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	085a      	lsrs	r2, r3, #1
 800604e:	78bb      	ldrb	r3, [r7, #2]
 8006050:	441a      	add	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3b01      	subs	r3, #1
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	441a      	add	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	4926      	ldr	r1, [pc, #152]	; (80060fc <RTC_WeekDayNum+0xe8>)
 8006064:	fba1 1303 	umull	r1, r3, r1, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	3b01      	subs	r3, #1
 8006070:	4922      	ldr	r1, [pc, #136]	; (80060fc <RTC_WeekDayNum+0xe8>)
 8006072:	fba1 1303 	umull	r1, r3, r1, r3
 8006076:	09db      	lsrs	r3, r3, #7
 8006078:	4413      	add	r3, r2
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	4b20      	ldr	r3, [pc, #128]	; (8006100 <RTC_WeekDayNum+0xec>)
 800607e:	fba3 1302 	umull	r1, r3, r3, r2
 8006082:	1ad1      	subs	r1, r2, r3
 8006084:	0849      	lsrs	r1, r1, #1
 8006086:	440b      	add	r3, r1
 8006088:	0899      	lsrs	r1, r3, #2
 800608a:	460b      	mov	r3, r1
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e029      	b.n	80060ea <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006096:	78fa      	ldrb	r2, [r7, #3]
 8006098:	4613      	mov	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <RTC_WeekDayNum+0xe4>)
 80060a4:	fba2 2303 	umull	r2, r3, r2, r3
 80060a8:	085a      	lsrs	r2, r3, #1
 80060aa:	78bb      	ldrb	r3, [r7, #2]
 80060ac:	441a      	add	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	441a      	add	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	089b      	lsrs	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4910      	ldr	r1, [pc, #64]	; (80060fc <RTC_WeekDayNum+0xe8>)
 80060bc:	fba1 1303 	umull	r1, r3, r1, r3
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	490d      	ldr	r1, [pc, #52]	; (80060fc <RTC_WeekDayNum+0xe8>)
 80060c8:	fba1 1303 	umull	r1, r3, r1, r3
 80060cc:	09db      	lsrs	r3, r3, #7
 80060ce:	4413      	add	r3, r2
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <RTC_WeekDayNum+0xec>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	1ad1      	subs	r1, r2, r3
 80060da:	0849      	lsrs	r1, r1, #1
 80060dc:	440b      	add	r3, r1
 80060de:	0899      	lsrs	r1, r3, #2
 80060e0:	460b      	mov	r3, r1
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	1a5b      	subs	r3, r3, r1
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	b2db      	uxtb	r3, r3
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	38e38e39 	.word	0x38e38e39
 80060fc:	51eb851f 	.word	0x51eb851f
 8006100:	24924925 	.word	0x24924925

08006104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e076      	b.n	8006204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d108      	bne.n	8006130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006126:	d009      	beq.n	800613c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	61da      	str	r2, [r3, #28]
 800612e:	e005      	b.n	800613c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fb fda4 	bl	8001ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	ea42 0103 	orr.w	r1, r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	0c1a      	lsrs	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f002 0204 	and.w	r2, r2, #4
 80061e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_SPI_Transmit+0x22>
 800622a:	2302      	movs	r3, #2
 800622c:	e126      	b.n	800647c <HAL_SPI_Transmit+0x270>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006236:	f7fc faeb 	bl	8002810 <HAL_GetTick>
 800623a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800624c:	2302      	movs	r3, #2
 800624e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006250:	e10b      	b.n	800646a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <HAL_SPI_Transmit+0x52>
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006262:	e102      	b.n	800646a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2203      	movs	r2, #3
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062aa:	d10f      	bne.n	80062cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d007      	beq.n	80062ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d14b      	bne.n	800638c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_Transmit+0xf6>
 80062fc:	8afb      	ldrh	r3, [r7, #22]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d13e      	bne.n	8006380 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006326:	e02b      	b.n	8006380 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d112      	bne.n	800635c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	86da      	strh	r2, [r3, #54]	; 0x36
 800635a:	e011      	b.n	8006380 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635c:	f7fc fa58 	bl	8002810 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d803      	bhi.n	8006374 <HAL_SPI_Transmit+0x168>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006372:	d102      	bne.n	800637a <HAL_SPI_Transmit+0x16e>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800637e:	e074      	b.n	800646a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1ce      	bne.n	8006328 <HAL_SPI_Transmit+0x11c>
 800638a:	e04c      	b.n	8006426 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_SPI_Transmit+0x18e>
 8006394:	8afb      	ldrh	r3, [r7, #22]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d140      	bne.n	800641c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063c0:	e02c      	b.n	800641c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d113      	bne.n	80063f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80063f6:	e011      	b.n	800641c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f8:	f7fc fa0a 	bl	8002810 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d803      	bhi.n	8006410 <HAL_SPI_Transmit+0x204>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640e:	d102      	bne.n	8006416 <HAL_SPI_Transmit+0x20a>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800641a:	e026      	b.n	800646a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1cd      	bne.n	80063c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fbb8 	bl	8006ba0 <SPI_EndRxTxTransaction>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e000      	b.n	800646a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800647a:	7ffb      	ldrb	r3, [r7, #31]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a0:	d112      	bne.n	80064c8 <HAL_SPI_Receive+0x44>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10e      	bne.n	80064c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2204      	movs	r2, #4
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f8f1 	bl	80066a6 <HAL_SPI_TransmitReceive>
 80064c4:	4603      	mov	r3, r0
 80064c6:	e0ea      	b.n	800669e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_SPI_Receive+0x52>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e0e3      	b.n	800669e <HAL_SPI_Receive+0x21a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064de:	f7fc f997 	bl	8002810 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
 80064f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f4:	e0ca      	b.n	800668c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SPI_Receive+0x7e>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006506:	e0c1      	b.n	800668c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2204      	movs	r2, #4
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d10f      	bne.n	8006570 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800656e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d007      	beq.n	800658e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d162      	bne.n	800665c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006596:	e02e      	b.n	80065f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d115      	bne.n	80065d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f103 020c 	add.w	r2, r3, #12
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d0:	e011      	b.n	80065f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d2:	f7fc f91d 	bl	8002810 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d803      	bhi.n	80065ea <HAL_SPI_Receive+0x166>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_Receive+0x16c>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065f4:	e04a      	b.n	800668c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1cb      	bne.n	8006598 <HAL_SPI_Receive+0x114>
 8006600:	e031      	b.n	8006666 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d113      	bne.n	8006638 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	b292      	uxth	r2, r2
 800661c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	1c9a      	adds	r2, r3, #2
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006636:	e011      	b.n	800665c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006638:	f7fc f8ea 	bl	8002810 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d803      	bhi.n	8006650 <HAL_SPI_Receive+0x1cc>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664e:	d102      	bne.n	8006656 <HAL_SPI_Receive+0x1d2>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	75fb      	strb	r3, [r7, #23]
          goto error;
 800665a:	e017      	b.n	800668c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1cd      	bne.n	8006602 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa46 	bl	8006afc <SPI_EndRxTransaction>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75fb      	strb	r3, [r7, #23]
 8006688:	e000      	b.n	800668c <HAL_SPI_Receive+0x208>
  }

error :
 800668a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b08c      	sub	sp, #48	; 0x30
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066b4:	2301      	movs	r3, #1
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x26>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e18a      	b.n	80069e2 <HAL_SPI_TransmitReceive+0x33c>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066d4:	f7fc f89c 	bl	8002810 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066ea:	887b      	ldrh	r3, [r7, #2]
 80066ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d00f      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x70>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fc:	d107      	bne.n	800670e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <HAL_SPI_TransmitReceive+0x68>
 8006706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800670a:	2b04      	cmp	r3, #4
 800670c:	d003      	beq.n	8006716 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800670e:	2302      	movs	r3, #2
 8006710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006714:	e15b      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x82>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x82>
 8006722:	887b      	ldrh	r3, [r7, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800672e:	e14e      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b04      	cmp	r3, #4
 800673a:	d003      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2205      	movs	r2, #5
 8006740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	887a      	ldrh	r2, [r7, #2]
 8006754:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	887a      	ldrh	r2, [r7, #2]
 800675a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	887a      	ldrh	r2, [r7, #2]
 8006766:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d007      	beq.n	8006798 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a0:	d178      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x10a>
 80067aa:	8b7b      	ldrh	r3, [r7, #26]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d166      	bne.n	800687e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	881a      	ldrh	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	1c9a      	adds	r2, r3, #2
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d4:	e053      	b.n	800687e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d11b      	bne.n	800681c <HAL_SPI_TransmitReceive+0x176>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_SPI_TransmitReceive+0x176>
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d113      	bne.n	800681c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	881a      	ldrh	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d119      	bne.n	800685e <HAL_SPI_TransmitReceive+0x1b8>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d014      	beq.n	800685e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	b292      	uxth	r2, r2
 8006840:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800685a:	2301      	movs	r3, #1
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800685e:	f7fb ffd7 	bl	8002810 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686a:	429a      	cmp	r2, r3
 800686c:	d807      	bhi.n	800687e <HAL_SPI_TransmitReceive+0x1d8>
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006874:	d003      	beq.n	800687e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800687c:	e0a7      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1a6      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x130>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1a1      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x130>
 8006892:	e07c      	b.n	800698e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x1fc>
 800689c:	8b7b      	ldrh	r3, [r7, #26]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d16b      	bne.n	800697a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	7812      	ldrb	r2, [r2, #0]
 80068ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c8:	e057      	b.n	800697a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d11c      	bne.n	8006912 <HAL_SPI_TransmitReceive+0x26c>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <HAL_SPI_TransmitReceive+0x26c>
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d114      	bne.n	8006912 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b01      	cmp	r3, #1
 800691e:	d119      	bne.n	8006954 <HAL_SPI_TransmitReceive+0x2ae>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d014      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006950:	2301      	movs	r3, #1
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006954:	f7fb ff5c 	bl	8002810 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006960:	429a      	cmp	r2, r3
 8006962:	d803      	bhi.n	800696c <HAL_SPI_TransmitReceive+0x2c6>
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800696a:	d102      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x2cc>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006978:	e029      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1a2      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x224>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d19d      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800698e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f904 	bl	8006ba0 <SPI_EndRxTxTransaction>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d006      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069aa:	e010      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069b4:	2300      	movs	r3, #0
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e000      	b.n	80069ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3730      	adds	r7, #48	; 0x30
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069fc:	f7fb ff08 	bl	8002810 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a0c:	f7fb ff00 	bl	8002810 <HAL_GetTick>
 8006a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	015b      	lsls	r3, r3, #5
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a22:	e054      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2a:	d050      	beq.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a2c:	f7fb fef0 	bl	8002810 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d13d      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5a:	d111      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d004      	beq.n	8006a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d107      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d10f      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e017      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d19b      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000000 	.word	0x20000000

08006afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b10:	d111      	bne.n	8006b36 <SPI_EndRxTransaction+0x3a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1a:	d004      	beq.n	8006b26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d107      	bne.n	8006b36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3e:	d117      	bne.n	8006b70 <SPI_EndRxTransaction+0x74>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d112      	bne.n	8006b70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2101      	movs	r1, #1
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff ff49 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01a      	beq.n	8006b96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e013      	b.n	8006b98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	2180      	movs	r1, #128	; 0x80
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff ff36 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e000      	b.n	8006b98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff ff18 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f043 0220 	orr.w	r2, r3, #32
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e000      	b.n	8006bd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e041      	b.n	8006c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f839 	bl	8006c7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f000 f9b4 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e03a      	b.n	8006d1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIM_Base_Start_IT+0x98>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x58>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x58>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <HAL_TIM_Base_Start_IT+0x9c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x58>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <HAL_TIM_Base_Start_IT+0xa0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d111      	bne.n	8006d08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d010      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	e007      	b.n	8006d18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800

08006d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d122      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d11b      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0202 	mvn.w	r2, #2
 8006d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8ed 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006d78:	e005      	b.n	8006d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8e0 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f8ef 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d122      	bne.n	8006de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d11b      	bne.n	8006de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0204 	mvn.w	r2, #4
 8006db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8c3 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006dcc:	e005      	b.n	8006dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8b6 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8c5 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d122      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d11b      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0208 	mvn.w	r2, #8
 8006e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f899 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f88c 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f89b 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d122      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d11b      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0210 	mvn.w	r2, #16
 8006e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f86f 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f862 	bl	8006f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f871 	bl	8006f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d10e      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d107      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0201 	mvn.w	r2, #1
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fa fd84 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ecc:	2b80      	cmp	r3, #128	; 0x80
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8bf 	bl	800705e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d10e      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f835 	bl	8006f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d10e      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d107      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0220 	mvn.w	r2, #32
 8006f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f88a 	bl	800704c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a29      	ldr	r2, [pc, #164]	; (8007040 <TIM_Base_SetConfig+0xb8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0x30>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0x30>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a26      	ldr	r2, [pc, #152]	; (8007044 <TIM_Base_SetConfig+0xbc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0x30>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a25      	ldr	r2, [pc, #148]	; (8007048 <TIM_Base_SetConfig+0xc0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <TIM_Base_SetConfig+0xb8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <TIM_Base_SetConfig+0x62>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d007      	beq.n	8006fea <TIM_Base_SetConfig+0x62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a19      	ldr	r2, [pc, #100]	; (8007044 <TIM_Base_SetConfig+0xbc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_Base_SetConfig+0x62>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a18      	ldr	r2, [pc, #96]	; (8007048 <TIM_Base_SetConfig+0xc0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d108      	bne.n	8006ffc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <TIM_Base_SetConfig+0xb8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d103      	bne.n	8007030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	615a      	str	r2, [r3, #20]
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800

0800704c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr

0800705e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e03f      	b.n	8007102 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fa fe50 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f829 	bl	800710c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007146:	f023 030c 	bic.w	r3, r3, #12
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	430b      	orrs	r3, r1
 8007152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <UART_SetConfig+0x114>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d103      	bne.n	800717c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007174:	f7fe f9f8 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	e002      	b.n	8007182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fe f9e0 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8007180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009a      	lsls	r2, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	4a22      	ldr	r2, [pc, #136]	; (8007224 <UART_SetConfig+0x118>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	0119      	lsls	r1, r3, #4
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009a      	lsls	r2, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <UART_SetConfig+0x118>)
 80071ba:	fba3 0302 	umull	r0, r3, r3, r2
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2064      	movs	r0, #100	; 0x64
 80071c2:	fb00 f303 	mul.w	r3, r0, r3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	3332      	adds	r3, #50	; 0x32
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <UART_SetConfig+0x118>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d8:	4419      	add	r1, r3
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009a      	lsls	r2, r3, #2
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <UART_SetConfig+0x118>)
 80071f2:	fba3 0302 	umull	r0, r3, r3, r2
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	2064      	movs	r0, #100	; 0x64
 80071fa:	fb00 f303 	mul.w	r3, r0, r3
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	3332      	adds	r3, #50	; 0x32
 8007204:	4a07      	ldr	r2, [pc, #28]	; (8007224 <UART_SetConfig+0x118>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	440a      	add	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40013800 	.word	0x40013800
 8007224:	51eb851f 	.word	0x51eb851f

08007228 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800723a:	2b84      	cmp	r3, #132	; 0x84
 800723c:	d005      	beq.n	800724a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800723e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	3303      	adds	r3, #3
 8007248:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800725a:	f000 ff7b 	bl	8008154 <vTaskStartScheduler>
  
  return osOK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}

08007264 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af04      	add	r7, sp, #16
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d020      	beq.n	80072b8 <osThreadCreate+0x54>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01c      	beq.n	80072b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685c      	ldr	r4, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691e      	ldr	r6, [r3, #16]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff ffc9 	bl	8007228 <makeFreeRtosPriority>
 8007296:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072a0:	9202      	str	r2, [sp, #8]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	9100      	str	r1, [sp, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	4632      	mov	r2, r6
 80072aa:	4629      	mov	r1, r5
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fd7a 	bl	8007da6 <xTaskCreateStatic>
 80072b2:	4603      	mov	r3, r0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e01c      	b.n	80072f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685c      	ldr	r4, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072c4:	b29e      	uxth	r6, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffab 	bl	8007228 <makeFreeRtosPriority>
 80072d2:	4602      	mov	r2, r0
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	9200      	str	r2, [sp, #0]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4632      	mov	r2, r6
 80072e0:	4629      	mov	r1, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fdbb 	bl	8007e5e <xTaskCreate>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e000      	b.n	80072f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072f2:	68fb      	ldr	r3, [r7, #12]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <osDelay+0x16>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	e000      	b.n	8007314 <osDelay+0x18>
 8007312:	2301      	movs	r3, #1
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fee9 	bl	80080ec <vTaskDelay>
  
  return osOK;
 800731a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f103 0208 	add.w	r2, r3, #8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800733c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 0208 	add.w	r2, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f103 0208 	add.w	r2, r3, #8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr

08007362 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d6:	d103      	bne.n	80073e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e00c      	b.n	80073fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3308      	adds	r3, #8
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e002      	b.n	80073ee <vListInsert+0x2e>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d2f6      	bcs.n	80073e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr

08007430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6892      	ldr	r2, [r2, #8]
 8007446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6852      	ldr	r2, [r2, #4]
 8007450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d103      	bne.n	8007464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
	...

08007484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074ae:	f001 fda5 	bl	8008ffc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	441a      	add	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	3b01      	subs	r3, #1
 80074e0:	68f9      	ldr	r1, [r7, #12]
 80074e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	441a      	add	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	22ff      	movs	r2, #255	; 0xff
 80074f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	; 0xff
 80074fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d114      	bne.n	800752e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01a      	beq.n	8007542 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3310      	adds	r3, #16
 8007510:	4618      	mov	r0, r3
 8007512:	f001 f877 	bl	8008604 <xTaskRemoveFromEventList>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <xQueueGenericReset+0xcc>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e009      	b.n	8007542 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3310      	adds	r3, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fef6 	bl	8007324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fef1 	bl	8007324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f001 fd8b 	bl	800905c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007546:	2301      	movs	r3, #1
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	613b      	str	r3, [r7, #16]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e004      	b.n	8007594 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	3348      	adds	r3, #72	; 0x48
 8007598:	4618      	mov	r0, r3
 800759a:	f001 fe2f 	bl	80091fc <pvPortMalloc>
 800759e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3348      	adds	r3, #72	; 0x48
 80075aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b4:	79fa      	ldrb	r2, [r7, #7]
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f805 	bl	80075d0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80075c6:	69bb      	ldr	r3, [r7, #24]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075fe:	2101      	movs	r1, #1
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f7ff ff3f 	bl	8007484 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800762e:	2300      	movs	r3, #0
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f81d 	bl	8007674 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007642:	b580      	push	{r7, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af00      	add	r7, sp, #0
 8007648:	4603      	mov	r3, r0
 800764a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800764c:	2301      	movs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	461a      	mov	r2, r3
 8007658:	6939      	ldr	r1, [r7, #16]
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	f7ff ff7a 	bl	8007554 <xQueueGenericCreate>
 8007660:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff ffd3 	bl	800760e <prvInitialiseMutex>

		return pxNewQueue;
 8007668:	68fb      	ldr	r3, [r7, #12]
	}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08e      	sub	sp, #56	; 0x38
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <xQueueGenericSend+0x32>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <xQueueGenericSend+0x40>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <xQueueGenericSend+0x44>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <xQueueGenericSend+0x46>
 80076b8:	2300      	movs	r3, #0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <xQueueGenericSend+0x60>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d103      	bne.n	80076e2 <xQueueGenericSend+0x6e>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <xQueueGenericSend+0x72>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <xQueueGenericSend+0x74>
 80076e6:	2300      	movs	r3, #0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <xQueueGenericSend+0x8e>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	623b      	str	r3, [r7, #32]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007702:	f001 f943 	bl	800898c <xTaskGetSchedulerState>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <xQueueGenericSend+0x9e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <xQueueGenericSend+0xa2>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericSend+0xa4>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericSend+0xbe>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	61fb      	str	r3, [r7, #28]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007732:	f001 fc63 	bl	8008ffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	429a      	cmp	r2, r3
 8007740:	d302      	bcc.n	8007748 <xQueueGenericSend+0xd4>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d129      	bne.n	800779c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774e:	f000 fa40 	bl	8007bd2 <prvCopyDataToQueue>
 8007752:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d010      	beq.n	800777e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	3324      	adds	r3, #36	; 0x24
 8007760:	4618      	mov	r0, r3
 8007762:	f000 ff4f 	bl	8008604 <xTaskRemoveFromEventList>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d013      	beq.n	8007794 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800776c:	4b3f      	ldr	r3, [pc, #252]	; (800786c <xQueueGenericSend+0x1f8>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	e00a      	b.n	8007794 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007784:	4b39      	ldr	r3, [pc, #228]	; (800786c <xQueueGenericSend+0x1f8>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007794:	f001 fc62 	bl	800905c <vPortExitCritical>
				return pdPASS;
 8007798:	2301      	movs	r3, #1
 800779a:	e063      	b.n	8007864 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077a2:	f001 fc5b 	bl	800905c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e05c      	b.n	8007864 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 ff87 	bl	80086c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077ba:	2301      	movs	r3, #1
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077be:	f001 fc4d 	bl	800905c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077c2:	f000 fd31 	bl	8008228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077c6:	f001 fc19 	bl	8008ffc <vPortEnterCritical>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d6:	d103      	bne.n	80077e0 <xQueueGenericSend+0x16c>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSend+0x182>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f6:	f001 fc31 	bl	800905c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077fa:	1d3a      	adds	r2, r7, #4
 80077fc:	f107 0314 	add.w	r3, r7, #20
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 ff76 	bl	80086f4 <xTaskCheckForTimeOut>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d124      	bne.n	8007858 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800780e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007810:	f000 fab1 	bl	8007d76 <prvIsQueueFull>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d018      	beq.n	800784c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	3310      	adds	r3, #16
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f000 feca 	bl	80085bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782a:	f000 fa3c 	bl	8007ca6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800782e:	f000 fd09 	bl	8008244 <xTaskResumeAll>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	f47f af7c 	bne.w	8007732 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <xQueueGenericSend+0x1f8>)
 800783c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	e772      	b.n	8007732 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800784c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800784e:	f000 fa2a 	bl	8007ca6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007852:	f000 fcf7 	bl	8008244 <xTaskResumeAll>
 8007856:	e76c      	b.n	8007732 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800785a:	f000 fa24 	bl	8007ca6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800785e:	f000 fcf1 	bl	8008244 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007862:	2300      	movs	r3, #0
		}
	}
}
 8007864:	4618      	mov	r0, r3
 8007866:	3738      	adds	r7, #56	; 0x38
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08e      	sub	sp, #56	; 0x38
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	623b      	str	r3, [r7, #32]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61fb      	str	r3, [r7, #28]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <xQueueGiveFromISR+0x58>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <xQueueGiveFromISR+0x5c>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <xQueueGiveFromISR+0x5e>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61bb      	str	r3, [r7, #24]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078e8:	f001 fc4a 	bl	8009180 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078ec:	f3ef 8211 	mrs	r2, BASEPRI
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	617a      	str	r2, [r7, #20]
 8007902:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007904:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007914:	429a      	cmp	r2, r3
 8007916:	d22b      	bcs.n	8007970 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800792a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007932:	d112      	bne.n	800795a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	3324      	adds	r3, #36	; 0x24
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fe5f 	bl	8008604 <xTaskRemoveFromEventList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00e      	beq.n	800796a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e007      	b.n	800796a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800795a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800795e:	3301      	adds	r3, #1
 8007960:	b2db      	uxtb	r3, r3
 8007962:	b25a      	sxtb	r2, r3
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800796a:	2301      	movs	r3, #1
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	e001      	b.n	8007974 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007970:	2300      	movs	r3, #0
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800797e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007982:	4618      	mov	r0, r3
 8007984:	3738      	adds	r7, #56	; 0x38
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08e      	sub	sp, #56	; 0x38
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	61fb      	str	r3, [r7, #28]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079dc:	f000 ffd6 	bl	800898c <xTaskGetSchedulerState>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <xQueueSemaphoreTake+0x60>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <xQueueSemaphoreTake+0x64>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <xQueueSemaphoreTake+0x66>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	61bb      	str	r3, [r7, #24]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a0c:	f001 faf6 	bl	8008ffc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d024      	beq.n	8007a66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	1e5a      	subs	r2, r3, #1
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007a2c:	f001 f978 	bl	8008d20 <pvTaskIncrementMutexHeldCount>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00f      	beq.n	8007a5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	3310      	adds	r3, #16
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fdde 	bl	8008604 <xTaskRemoveFromEventList>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a4e:	4b54      	ldr	r3, [pc, #336]	; (8007ba0 <xQueueSemaphoreTake+0x214>)
 8007a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a5e:	f001 fafd 	bl	800905c <vPortExitCritical>
				return pdPASS;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e097      	b.n	8007b96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d111      	bne.n	8007a90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	617b      	str	r3, [r7, #20]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a88:	f001 fae8 	bl	800905c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e082      	b.n	8007b96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a96:	f107 030c 	add.w	r3, r7, #12
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fe14 	bl	80086c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aa4:	f001 fada 	bl	800905c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aa8:	f000 fbbe 	bl	8008228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aac:	f001 faa6 	bl	8008ffc <vPortEnterCritical>
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abc:	d103      	bne.n	8007ac6 <xQueueSemaphoreTake+0x13a>
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad2:	d103      	bne.n	8007adc <xQueueSemaphoreTake+0x150>
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007adc:	f001 fabe 	bl	800905c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ae0:	463a      	mov	r2, r7
 8007ae2:	f107 030c 	add.w	r3, r7, #12
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fe03 	bl	80086f4 <xTaskCheckForTimeOut>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d132      	bne.n	8007b5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af6:	f000 f928 	bl	8007d4a <prvIsQueueEmpty>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d026      	beq.n	8007b4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007b08:	f001 fa78 	bl	8008ffc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 ff59 	bl	80089c8 <xTaskPriorityInherit>
 8007b16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b18:	f001 faa0 	bl	800905c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	3324      	adds	r3, #36	; 0x24
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fd49 	bl	80085bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b2c:	f000 f8bb 	bl	8007ca6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b30:	f000 fb88 	bl	8008244 <xTaskResumeAll>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f47f af68 	bne.w	8007a0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b3c:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <xQueueSemaphoreTake+0x214>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	e75e      	b.n	8007a0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b50:	f000 f8a9 	bl	8007ca6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b54:	f000 fb76 	bl	8008244 <xTaskResumeAll>
 8007b58:	e758      	b.n	8007a0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b5c:	f000 f8a3 	bl	8007ca6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b60:	f000 fb70 	bl	8008244 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b66:	f000 f8f0 	bl	8007d4a <prvIsQueueEmpty>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f43f af4d 	beq.w	8007a0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00d      	beq.n	8007b94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b78:	f001 fa40 	bl	8008ffc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b7e:	f000 f811 	bl	8007ba4 <prvGetDisinheritPriorityAfterTimeout>
 8007b82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 f828 	bl	8008be0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b90:	f001 fa64 	bl	800905c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3738      	adds	r7, #56	; 0x38
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1c3 0307 	rsb	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e001      	b.n	8007bc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d14d      	bne.n	8007c94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 ff69 	bl	8008ad4 <xTaskPriorityDisinherit>
 8007c02:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	e043      	b.n	8007c94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d119      	bne.n	8007c46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6898      	ldr	r0, [r3, #8]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	f001 fcf9 	bl	8009614 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	441a      	add	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d32b      	bcc.n	8007c94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	e026      	b.n	8007c94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68d8      	ldr	r0, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	f001 fcdf 	bl	8009614 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	425b      	negs	r3, r3
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d207      	bcs.n	8007c82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	425b      	negs	r3, r3
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d105      	bne.n	8007c94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c9c:	697b      	ldr	r3, [r7, #20]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cae:	f001 f9a5 	bl	8008ffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cba:	e011      	b.n	8007ce0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3324      	adds	r3, #36	; 0x24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fc9b 	bl	8008604 <xTaskRemoveFromEventList>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cd4:	f000 fd70 	bl	80087b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dce9      	bgt.n	8007cbc <prvUnlockQueue+0x16>
 8007ce8:	e000      	b.n	8007cec <prvUnlockQueue+0x46>
					break;
 8007cea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	22ff      	movs	r2, #255	; 0xff
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007cf4:	f001 f9b2 	bl	800905c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cf8:	f001 f980 	bl	8008ffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d04:	e011      	b.n	8007d2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d012      	beq.n	8007d34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3310      	adds	r3, #16
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fc76 	bl	8008604 <xTaskRemoveFromEventList>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d1e:	f000 fd4b 	bl	80087b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dce9      	bgt.n	8007d06 <prvUnlockQueue+0x60>
 8007d32:	e000      	b.n	8007d36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d3e:	f001 f98d 	bl	800905c <vPortExitCritical>
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d52:	f001 f953 	bl	8008ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d102      	bne.n	8007d64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e001      	b.n	8007d68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d68:	f001 f978 	bl	800905c <vPortExitCritical>

	return xReturn;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d7e:	f001 f93d 	bl	8008ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d102      	bne.n	8007d94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e001      	b.n	8007d98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d98:	f001 f960 	bl	800905c <vPortExitCritical>

	return xReturn;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b08e      	sub	sp, #56	; 0x38
 8007daa:	af04      	add	r7, sp, #16
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	623b      	str	r3, [r7, #32]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <xTaskCreateStatic+0x46>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	61fb      	str	r3, [r7, #28]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dec:	23e0      	movs	r3, #224	; 0xe0
 8007dee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2be0      	cmp	r3, #224	; 0xe0
 8007df4:	d00a      	beq.n	8007e0c <xTaskCreateStatic+0x66>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61bb      	str	r3, [r7, #24]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01e      	beq.n	8007e50 <xTaskCreateStatic+0xaa>
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01b      	beq.n	8007e50 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2202      	movs	r2, #2
 8007e26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	f107 0314 	add.w	r3, r7, #20
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 f850 	bl	8007ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e4a:	f000 f8e5 	bl	8008018 <prvAddNewTaskToReadyList>
 8007e4e:	e001      	b.n	8007e54 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e54:	697b      	ldr	r3, [r7, #20]
	}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3728      	adds	r7, #40	; 0x28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b08c      	sub	sp, #48	; 0x30
 8007e62:	af04      	add	r7, sp, #16
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	603b      	str	r3, [r7, #0]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 f9c2 	bl	80091fc <pvPortMalloc>
 8007e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007e80:	20e0      	movs	r0, #224	; 0xe0
 8007e82:	f001 f9bb 	bl	80091fc <pvPortMalloc>
 8007e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
 8007e94:	e005      	b.n	8007ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e96:	6978      	ldr	r0, [r7, #20]
 8007e98:	f001 fa74 	bl	8009384 <vPortFree>
 8007e9c:	e001      	b.n	8007ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d017      	beq.n	8007ed8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	9302      	str	r3, [sp, #8]
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 f80e 	bl	8007ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ecc:	69f8      	ldr	r0, [r7, #28]
 8007ece:	f000 f8a3 	bl	8008018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e002      	b.n	8007ede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007edc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ede:	69bb      	ldr	r3, [r7, #24]
	}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f00:	3b01      	subs	r3, #1
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	617b      	str	r3, [r7, #20]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
 8007f34:	e012      	b.n	8007f5c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	7819      	ldrb	r1, [r3, #0]
 8007f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	3334      	adds	r3, #52	; 0x34
 8007f46:	460a      	mov	r2, r1
 8007f48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b3b      	cmp	r3, #59	; 0x3b
 8007f60:	d9e9      	bls.n	8007f36 <prvInitialiseNewTask+0x4e>
 8007f62:	e000      	b.n	8007f66 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007f64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2b06      	cmp	r3, #6
 8007f72:	d901      	bls.n	8007f78 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f74:	2306      	movs	r3, #6
 8007f76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f82:	671a      	str	r2, [r3, #112]	; 0x70
		pxNewTCB->uxMutexesHeld = 0;
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	2200      	movs	r2, #0
 8007f88:	675a      	str	r2, [r3, #116]	; 0x74
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff f9e7 	bl	8007362 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	3318      	adds	r3, #24
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff f9e2 	bl	8007362 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	f1c3 0207 	rsb	r2, r3, #7
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	3378      	adds	r3, #120	; 0x78
 8007fc8:	2260      	movs	r2, #96	; 0x60
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fb2f 	bl	8009630 <memset>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	; (800800c <prvInitialiseNewTask+0x124>)
 8007fd6:	67da      	str	r2, [r3, #124]	; 0x7c
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	4a0d      	ldr	r2, [pc, #52]	; (8008010 <prvInitialiseNewTask+0x128>)
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	4a0c      	ldr	r2, [pc, #48]	; (8008014 <prvInitialiseNewTask+0x12c>)
 8007fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	69b8      	ldr	r0, [r7, #24]
 8007fee:	f000 ff11 	bl	8008e14 <pxPortInitialiseStack>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008004:	bf00      	nop
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	08009918 	.word	0x08009918
 8008010:	08009938 	.word	0x08009938
 8008014:	080098f8 	.word	0x080098f8

08008018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008020:	f000 ffec 	bl	8008ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008024:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <prvAddNewTaskToReadyList+0xb8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	4a29      	ldr	r2, [pc, #164]	; (80080d0 <prvAddNewTaskToReadyList+0xb8>)
 800802c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800802e:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <prvAddNewTaskToReadyList+0xbc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008036:	4a27      	ldr	r2, [pc, #156]	; (80080d4 <prvAddNewTaskToReadyList+0xbc>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800803c:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <prvAddNewTaskToReadyList+0xb8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008044:	f000 fbdc 	bl	8008800 <prvInitialiseTaskLists>
 8008048:	e00d      	b.n	8008066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800804a:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <prvAddNewTaskToReadyList+0xc0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <prvAddNewTaskToReadyList+0xbc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d802      	bhi.n	8008066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008060:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <prvAddNewTaskToReadyList+0xbc>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a1b      	ldr	r2, [pc, #108]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 800806e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	2201      	movs	r2, #1
 8008076:	409a      	lsls	r2, r3
 8008078:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4313      	orrs	r3, r2
 800807e:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <prvAddNewTaskToReadyList+0xcc>)
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3304      	adds	r3, #4
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7ff f96e 	bl	800737a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800809e:	f000 ffdd 	bl	800905c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <prvAddNewTaskToReadyList+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <prvAddNewTaskToReadyList+0xbc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d207      	bcs.n	80080c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080b8:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 80080ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	2000039c 	.word	0x2000039c
 80080d4:	2000029c 	.word	0x2000029c
 80080d8:	200003a8 	.word	0x200003a8
 80080dc:	200003b8 	.word	0x200003b8
 80080e0:	200003a4 	.word	0x200003a4
 80080e4:	200002a0 	.word	0x200002a0
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <vTaskDelay+0x60>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <vTaskDelay+0x30>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60bb      	str	r3, [r7, #8]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800811c:	f000 f884 	bl	8008228 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fe10 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008128:	f000 f88c 	bl	8008244 <xTaskResumeAll>
 800812c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d107      	bne.n	8008144 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <vTaskDelay+0x64>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200003c4 	.word	0x200003c4
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008162:	463a      	mov	r2, r7
 8008164:	1d39      	adds	r1, r7, #4
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	4618      	mov	r0, r3
 800816c:	f7f8 ffa4 	bl	80010b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	9202      	str	r2, [sp, #8]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	2300      	movs	r3, #0
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	460a      	mov	r2, r1
 8008182:	4921      	ldr	r1, [pc, #132]	; (8008208 <vTaskStartScheduler+0xb4>)
 8008184:	4821      	ldr	r0, [pc, #132]	; (800820c <vTaskStartScheduler+0xb8>)
 8008186:	f7ff fe0e 	bl	8007da6 <xTaskCreateStatic>
 800818a:	4603      	mov	r3, r0
 800818c:	4a20      	ldr	r2, [pc, #128]	; (8008210 <vTaskStartScheduler+0xbc>)
 800818e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008190:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <vTaskStartScheduler+0xbc>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008198:	2301      	movs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e001      	b.n	80081a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d11b      	bne.n	80081e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	613b      	str	r3, [r7, #16]
}
 80081ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <vTaskStartScheduler+0xc0>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3378      	adds	r3, #120	; 0x78
 80081c2:	4a15      	ldr	r2, [pc, #84]	; (8008218 <vTaskStartScheduler+0xc4>)
 80081c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <vTaskStartScheduler+0xc8>)
 80081c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081ce:	4b14      	ldr	r3, [pc, #80]	; (8008220 <vTaskStartScheduler+0xcc>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <vTaskStartScheduler+0xd0>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081da:	f000 fe9d 	bl	8008f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081de:	e00e      	b.n	80081fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e6:	d10a      	bne.n	80081fe <vTaskStartScheduler+0xaa>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	60fb      	str	r3, [r7, #12]
}
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <vTaskStartScheduler+0xa8>
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	080098d8 	.word	0x080098d8
 800820c:	080087d1 	.word	0x080087d1
 8008210:	200003c0 	.word	0x200003c0
 8008214:	2000029c 	.word	0x2000029c
 8008218:	20000010 	.word	0x20000010
 800821c:	200003bc 	.word	0x200003bc
 8008220:	200003a8 	.word	0x200003a8
 8008224:	200003a0 	.word	0x200003a0

08008228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800822c:	4b04      	ldr	r3, [pc, #16]	; (8008240 <vTaskSuspendAll+0x18>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	4a03      	ldr	r2, [pc, #12]	; (8008240 <vTaskSuspendAll+0x18>)
 8008234:	6013      	str	r3, [r2, #0]
}
 8008236:	bf00      	nop
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	200003c4 	.word	0x200003c4

08008244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008252:	4b41      	ldr	r3, [pc, #260]	; (8008358 <xTaskResumeAll+0x114>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <xTaskResumeAll+0x2c>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008270:	f000 fec4 	bl	8008ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008274:	4b38      	ldr	r3, [pc, #224]	; (8008358 <xTaskResumeAll+0x114>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	4a37      	ldr	r2, [pc, #220]	; (8008358 <xTaskResumeAll+0x114>)
 800827c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827e:	4b36      	ldr	r3, [pc, #216]	; (8008358 <xTaskResumeAll+0x114>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d161      	bne.n	800834a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008286:	4b35      	ldr	r3, [pc, #212]	; (800835c <xTaskResumeAll+0x118>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d05d      	beq.n	800834a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828e:	e02e      	b.n	80082ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008290:	4b33      	ldr	r3, [pc, #204]	; (8008360 <xTaskResumeAll+0x11c>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3318      	adds	r3, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff f8c7 	bl	8007430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff f8c2 	bl	8007430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	2201      	movs	r2, #1
 80082b2:	409a      	lsls	r2, r3
 80082b4:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <xTaskResumeAll+0x120>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <xTaskResumeAll+0x120>)
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a27      	ldr	r2, [pc, #156]	; (8008368 <xTaskResumeAll+0x124>)
 80082cc:	441a      	add	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7ff f850 	bl	800737a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	4b23      	ldr	r3, [pc, #140]	; (800836c <xTaskResumeAll+0x128>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <xTaskResumeAll+0x12c>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ee:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <xTaskResumeAll+0x11c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1cc      	bne.n	8008290 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082fc:	f000 fb22 	bl	8008944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008300:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <xTaskResumeAll+0x130>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d010      	beq.n	800832e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800830c:	f000 f836 	bl	800837c <xTaskIncrementTick>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <xTaskResumeAll+0x12c>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3b01      	subs	r3, #1
 8008320:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f1      	bne.n	800830c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008328:	4b12      	ldr	r3, [pc, #72]	; (8008374 <xTaskResumeAll+0x130>)
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskResumeAll+0x12c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskResumeAll+0x134>)
 800833c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800834a:	f000 fe87 	bl	800905c <vPortExitCritical>

	return xAlreadyYielded;
 800834e:	68bb      	ldr	r3, [r7, #8]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200003c4 	.word	0x200003c4
 800835c:	2000039c 	.word	0x2000039c
 8008360:	2000035c 	.word	0x2000035c
 8008364:	200003a4 	.word	0x200003a4
 8008368:	200002a0 	.word	0x200002a0
 800836c:	2000029c 	.word	0x2000029c
 8008370:	200003b0 	.word	0x200003b0
 8008374:	200003ac 	.word	0x200003ac
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008386:	4b51      	ldr	r3, [pc, #324]	; (80084cc <xTaskIncrementTick+0x150>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 808d 	bne.w	80084aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008390:	4b4f      	ldr	r3, [pc, #316]	; (80084d0 <xTaskIncrementTick+0x154>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008398:	4a4d      	ldr	r2, [pc, #308]	; (80084d0 <xTaskIncrementTick+0x154>)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d120      	bne.n	80083e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083a4:	4b4b      	ldr	r3, [pc, #300]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	603b      	str	r3, [r7, #0]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <xTaskIncrementTick+0x46>
 80083c4:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	4b43      	ldr	r3, [pc, #268]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a41      	ldr	r2, [pc, #260]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	4a41      	ldr	r2, [pc, #260]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	4b40      	ldr	r3, [pc, #256]	; (80084dc <xTaskIncrementTick+0x160>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	4a3f      	ldr	r2, [pc, #252]	; (80084dc <xTaskIncrementTick+0x160>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	f000 faaf 	bl	8008944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083e6:	4b3e      	ldr	r3, [pc, #248]	; (80084e0 <xTaskIncrementTick+0x164>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d34d      	bcc.n	800848c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f0:	4b38      	ldr	r3, [pc, #224]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <xTaskIncrementTick+0x82>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xTaskIncrementTick+0x84>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008404:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <xTaskIncrementTick+0x164>)
 8008406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800840a:	601a      	str	r2, [r3, #0]
					break;
 800840c:	e03e      	b.n	800848c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800840e:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <xTaskIncrementTick+0x158>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d203      	bcs.n	800842e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008426:	4a2e      	ldr	r2, [pc, #184]	; (80084e0 <xTaskIncrementTick+0x164>)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6013      	str	r3, [r2, #0]
						break;
 800842c:	e02e      	b.n	800848c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3304      	adds	r3, #4
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fffc 	bl	8007430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3318      	adds	r3, #24
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fff3 	bl	8007430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	2201      	movs	r2, #1
 8008450:	409a      	lsls	r2, r3
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <xTaskIncrementTick+0x168>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4313      	orrs	r3, r2
 8008458:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <xTaskIncrementTick+0x168>)
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <xTaskIncrementTick+0x16c>)
 800846a:	441a      	add	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fe ff81 	bl	800737a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <xTaskIncrementTick+0x170>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	429a      	cmp	r2, r3
 8008484:	d3b4      	bcc.n	80083f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848a:	e7b1      	b.n	80083f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800848c:	4b17      	ldr	r3, [pc, #92]	; (80084ec <xTaskIncrementTick+0x170>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4915      	ldr	r1, [pc, #84]	; (80084e8 <xTaskIncrementTick+0x16c>)
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d907      	bls.n	80084b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e004      	b.n	80084b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084aa:	4b11      	ldr	r3, [pc, #68]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	4a0f      	ldr	r2, [pc, #60]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084b4:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <xTaskIncrementTick+0x178>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084c0:	697b      	ldr	r3, [r7, #20]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200003c4 	.word	0x200003c4
 80084d0:	200003a0 	.word	0x200003a0
 80084d4:	20000354 	.word	0x20000354
 80084d8:	20000358 	.word	0x20000358
 80084dc:	200003b4 	.word	0x200003b4
 80084e0:	200003bc 	.word	0x200003bc
 80084e4:	200003a4 	.word	0x200003a4
 80084e8:	200002a0 	.word	0x200002a0
 80084ec:	2000029c 	.word	0x2000029c
 80084f0:	200003ac 	.word	0x200003ac
 80084f4:	200003b0 	.word	0x200003b0

080084f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <vTaskSwitchContext+0xac>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <vTaskSwitchContext+0xb0>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800850c:	e044      	b.n	8008598 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <vTaskSwitchContext+0xb0>)
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008514:	4b25      	ldr	r3, [pc, #148]	; (80085ac <vTaskSwitchContext+0xb4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	fab3 f383 	clz	r3, r3
 8008520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	f1c3 031f 	rsb	r3, r3, #31
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	4921      	ldr	r1, [pc, #132]	; (80085b0 <vTaskSwitchContext+0xb8>)
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <vTaskSwitchContext+0x5c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vTaskSwitchContext+0x5a>
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a14      	ldr	r2, [pc, #80]	; (80085b0 <vTaskSwitchContext+0xb8>)
 8008560:	4413      	add	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3308      	adds	r3, #8
 8008576:	429a      	cmp	r2, r3
 8008578:	d104      	bne.n	8008584 <vTaskSwitchContext+0x8c>
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	605a      	str	r2, [r3, #4]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	4a0a      	ldr	r2, [pc, #40]	; (80085b4 <vTaskSwitchContext+0xbc>)
 800858c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <vTaskSwitchContext+0xbc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3378      	adds	r3, #120	; 0x78
 8008594:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <vTaskSwitchContext+0xc0>)
 8008596:	6013      	str	r3, [r2, #0]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	200003c4 	.word	0x200003c4
 80085a8:	200003b0 	.word	0x200003b0
 80085ac:	200003a4 	.word	0x200003a4
 80085b0:	200002a0 	.word	0x200002a0
 80085b4:	2000029c 	.word	0x2000029c
 80085b8:	20000010 	.word	0x20000010

080085bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <vTaskPlaceOnEventList+0x44>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3318      	adds	r3, #24
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe fee8 	bl	80073c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085f0:	2101      	movs	r1, #1
 80085f2:	6838      	ldr	r0, [r7, #0]
 80085f4:	f000 fba8 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
}
 80085f8:	bf00      	nop
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	2000029c 	.word	0x2000029c

08008604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10a      	bne.n	8008630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60fb      	str	r3, [r7, #12]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	3318      	adds	r3, #24
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe fefb 	bl	8007430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <xTaskRemoveFromEventList+0xac>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d11c      	bne.n	800867c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3304      	adds	r3, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fef2 	bl	8007430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	2201      	movs	r2, #1
 8008652:	409a      	lsls	r2, r3
 8008654:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <xTaskRemoveFromEventList+0xb0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4313      	orrs	r3, r2
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <xTaskRemoveFromEventList+0xb0>)
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4a13      	ldr	r2, [pc, #76]	; (80086b8 <xTaskRemoveFromEventList+0xb4>)
 800866c:	441a      	add	r2, r3
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3304      	adds	r3, #4
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f7fe fe80 	bl	800737a <vListInsertEnd>
 800867a:	e005      	b.n	8008688 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3318      	adds	r3, #24
 8008680:	4619      	mov	r1, r3
 8008682:	480e      	ldr	r0, [pc, #56]	; (80086bc <xTaskRemoveFromEventList+0xb8>)
 8008684:	f7fe fe79 	bl	800737a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <xTaskRemoveFromEventList+0xbc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	429a      	cmp	r2, r3
 8008694:	d905      	bls.n	80086a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <xTaskRemoveFromEventList+0xc0>)
 800869c:	2201      	movs	r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e001      	b.n	80086a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086a6:	697b      	ldr	r3, [r7, #20]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	200003c4 	.word	0x200003c4
 80086b4:	200003a4 	.word	0x200003a4
 80086b8:	200002a0 	.word	0x200002a0
 80086bc:	2000035c 	.word	0x2000035c
 80086c0:	2000029c 	.word	0x2000029c
 80086c4:	200003b0 	.word	0x200003b0

080086c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <vTaskInternalSetTimeOutState+0x24>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <vTaskInternalSetTimeOutState+0x28>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	200003b4 	.word	0x200003b4
 80086f0:	200003a0 	.word	0x200003a0

080086f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008736:	f000 fc61 	bl	8008ffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800873a:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <xTaskCheckForTimeOut+0xbc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008752:	d102      	bne.n	800875a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e023      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <xTaskCheckForTimeOut+0xc0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d007      	beq.n	8008776 <xTaskCheckForTimeOut+0x82>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	d302      	bcc.n	8008776 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008770:	2301      	movs	r3, #1
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e015      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	429a      	cmp	r2, r3
 800877e:	d20b      	bcs.n	8008798 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff9b 	bl	80086c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e004      	b.n	80087a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800879e:	2301      	movs	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087a2:	f000 fc5b 	bl	800905c <vPortExitCritical>

	return xReturn;
 80087a6:	69fb      	ldr	r3, [r7, #28]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200003a0 	.word	0x200003a0
 80087b4:	200003b4 	.word	0x200003b4

080087b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087bc:	4b03      	ldr	r3, [pc, #12]	; (80087cc <vTaskMissedYield+0x14>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
}
 80087c2:	bf00      	nop
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200003b0 	.word	0x200003b0

080087d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087d8:	f000 f852 	bl	8008880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <prvIdleTask+0x28>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d9f9      	bls.n	80087d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <prvIdleTask+0x2c>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087f4:	e7f0      	b.n	80087d8 <prvIdleTask+0x8>
 80087f6:	bf00      	nop
 80087f8:	200002a0 	.word	0x200002a0
 80087fc:	e000ed04 	.word	0xe000ed04

08008800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	e00c      	b.n	8008826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <prvInitialiseTaskLists+0x60>)
 8008818:	4413      	add	r3, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd82 	bl	8007324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3301      	adds	r3, #1
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b06      	cmp	r3, #6
 800882a:	d9ef      	bls.n	800880c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800882c:	480d      	ldr	r0, [pc, #52]	; (8008864 <prvInitialiseTaskLists+0x64>)
 800882e:	f7fe fd79 	bl	8007324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008832:	480d      	ldr	r0, [pc, #52]	; (8008868 <prvInitialiseTaskLists+0x68>)
 8008834:	f7fe fd76 	bl	8007324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008838:	480c      	ldr	r0, [pc, #48]	; (800886c <prvInitialiseTaskLists+0x6c>)
 800883a:	f7fe fd73 	bl	8007324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800883e:	480c      	ldr	r0, [pc, #48]	; (8008870 <prvInitialiseTaskLists+0x70>)
 8008840:	f7fe fd70 	bl	8007324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008844:	480b      	ldr	r0, [pc, #44]	; (8008874 <prvInitialiseTaskLists+0x74>)
 8008846:	f7fe fd6d 	bl	8007324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800884a:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <prvInitialiseTaskLists+0x78>)
 800884c:	4a05      	ldr	r2, [pc, #20]	; (8008864 <prvInitialiseTaskLists+0x64>)
 800884e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <prvInitialiseTaskLists+0x7c>)
 8008852:	4a05      	ldr	r2, [pc, #20]	; (8008868 <prvInitialiseTaskLists+0x68>)
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200002a0 	.word	0x200002a0
 8008864:	2000032c 	.word	0x2000032c
 8008868:	20000340 	.word	0x20000340
 800886c:	2000035c 	.word	0x2000035c
 8008870:	20000370 	.word	0x20000370
 8008874:	20000388 	.word	0x20000388
 8008878:	20000354 	.word	0x20000354
 800887c:	20000358 	.word	0x20000358

08008880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008886:	e019      	b.n	80088bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008888:	f000 fbb8 	bl	8008ffc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <prvCheckTasksWaitingTermination+0x50>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fdc9 	bl	8007430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4a0b      	ldr	r2, [pc, #44]	; (80088d4 <prvCheckTasksWaitingTermination+0x54>)
 80088a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088b2:	f000 fbd3 	bl	800905c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f810 	bl	80088dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <prvCheckTasksWaitingTermination+0x58>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e1      	bne.n	8008888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000370 	.word	0x20000370
 80088d4:	2000039c 	.word	0x2000039c
 80088d8:	20000384 	.word	0x20000384

080088dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3378      	adds	r3, #120	; 0x78
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 feb7 	bl	800965c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d108      	bne.n	800890a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fd41 	bl	8009384 <vPortFree>
				vPortFree( pxTCB );
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fd3e 	bl	8009384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008908:	e018      	b.n	800893c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008910:	2b01      	cmp	r3, #1
 8008912:	d103      	bne.n	800891c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fd35 	bl	8009384 <vPortFree>
	}
 800891a:	e00f      	b.n	800893c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008922:	2b02      	cmp	r3, #2
 8008924:	d00a      	beq.n	800893c <prvDeleteTCB+0x60>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <prvDeleteTCB+0x5e>
	}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <prvResetNextTaskUnblockTime+0x40>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <prvResetNextTaskUnblockTime+0x14>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <prvResetNextTaskUnblockTime+0x16>
 8008958:	2300      	movs	r3, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800895e:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <prvResetNextTaskUnblockTime+0x44>)
 8008960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008964:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008966:	e008      	b.n	800897a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvResetNextTaskUnblockTime+0x40>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	4a04      	ldr	r2, [pc, #16]	; (8008988 <prvResetNextTaskUnblockTime+0x44>)
 8008978:	6013      	str	r3, [r2, #0]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr
 8008984:	20000354 	.word	0x20000354
 8008988:	200003bc 	.word	0x200003bc

0800898c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <xTaskGetSchedulerState+0x34>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800899a:	2301      	movs	r3, #1
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	e008      	b.n	80089b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a0:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <xTaskGetSchedulerState+0x38>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089a8:	2302      	movs	r3, #2
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	e001      	b.n	80089b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089ae:	2300      	movs	r3, #0
 80089b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089b2:	687b      	ldr	r3, [r7, #4]
	}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	200003a8 	.word	0x200003a8
 80089c4:	200003c4 	.word	0x200003c4

080089c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d06e      	beq.n	8008abc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e2:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <xTaskPriorityInherit+0x100>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d25e      	bcs.n	8008aaa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	db06      	blt.n	8008a02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f4:	4b34      	ldr	r3, [pc, #208]	; (8008ac8 <xTaskPriorityInherit+0x100>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	f1c3 0207 	rsb	r2, r3, #7
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6959      	ldr	r1, [r3, #20]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4a2e      	ldr	r2, [pc, #184]	; (8008acc <xTaskPriorityInherit+0x104>)
 8008a14:	4413      	add	r3, r2
 8008a16:	4299      	cmp	r1, r3
 8008a18:	d101      	bne.n	8008a1e <xTaskPriorityInherit+0x56>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xTaskPriorityInherit+0x58>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d03a      	beq.n	8008a9a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe fd01 	bl	8007430 <uxListRemove>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d115      	bne.n	8008a60 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4924      	ldr	r1, [pc, #144]	; (8008acc <xTaskPriorityInherit+0x104>)
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <xTaskPriorityInherit+0x98>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	2201      	movs	r2, #1
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	43da      	mvns	r2, r3
 8008a56:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <xTaskPriorityInherit+0x108>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ad0 <xTaskPriorityInherit+0x108>)
 8008a5e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <xTaskPriorityInherit+0x100>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	2201      	movs	r2, #1
 8008a70:	409a      	lsls	r2, r3
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <xTaskPriorityInherit+0x108>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <xTaskPriorityInherit+0x108>)
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4a10      	ldr	r2, [pc, #64]	; (8008acc <xTaskPriorityInherit+0x104>)
 8008a8a:	441a      	add	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe fc71 	bl	800737a <vListInsertEnd>
 8008a98:	e004      	b.n	8008aa4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <xTaskPriorityInherit+0x100>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	e008      	b.n	8008abc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <xTaskPriorityInherit+0x100>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d201      	bcs.n	8008abc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008abc:	68fb      	ldr	r3, [r7, #12]
	}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000029c 	.word	0x2000029c
 8008acc:	200002a0 	.word	0x200002a0
 8008ad0:	200003a4 	.word	0x200003a4

08008ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d06e      	beq.n	8008bc8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aea:	4b3a      	ldr	r3, [pc, #232]	; (8008bd4 <xTaskPriorityDisinherit+0x100>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d00a      	beq.n	8008b0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60bb      	str	r3, [r7, #8]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2c:	1e5a      	subs	r2, r3, #1
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	675a      	str	r2, [r3, #116]	; 0x74

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d044      	beq.n	8008bc8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d140      	bne.n	8008bc8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fc70 	bl	8007430 <uxListRemove>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d115      	bne.n	8008b82 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	491f      	ldr	r1, [pc, #124]	; (8008bd8 <xTaskPriorityDisinherit+0x104>)
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <xTaskPriorityDisinherit+0xae>
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	2201      	movs	r2, #1
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	43da      	mvns	r2, r3
 8008b78:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <xTaskPriorityDisinherit+0x108>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <xTaskPriorityDisinherit+0x108>)
 8008b80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	f1c3 0207 	rsb	r2, r3, #7
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	409a      	lsls	r2, r3
 8008b9e:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <xTaskPriorityDisinherit+0x108>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	4a0d      	ldr	r2, [pc, #52]	; (8008bdc <xTaskPriorityDisinherit+0x108>)
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <xTaskPriorityDisinherit+0x104>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe fbdb 	bl	800737a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bc8:	697b      	ldr	r3, [r7, #20]
	}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000029c 	.word	0x2000029c
 8008bd8:	200002a0 	.word	0x200002a0
 8008bdc:	200003a4 	.word	0x200003a4

08008be0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8088 	beq.w	8008d0a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60fb      	str	r3, [r7, #12]
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d902      	bls.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	e002      	b.n	8008c2e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d068      	beq.n	8008d0a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d163      	bne.n	8008d0a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c42:	4b34      	ldr	r3, [pc, #208]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d10a      	bne.n	8008c62 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60bb      	str	r3, [r7, #8]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	db04      	blt.n	8008c80 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f1c3 0207 	rsb	r2, r3, #7
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	6959      	ldr	r1, [r3, #20]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c90:	4413      	add	r3, r2
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d101      	bne.n	8008c9a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d034      	beq.n	8008d0a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fe fbc3 	bl	8007430 <uxListRemove>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d115      	bne.n	8008cdc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	4918      	ldr	r1, [pc, #96]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	2201      	movs	r2, #1
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	43da      	mvns	r2, r3
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	4a10      	ldr	r2, [pc, #64]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cda:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	409a      	lsls	r2, r3
 8008ce4:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	4a0c      	ldr	r2, [pc, #48]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008cfc:	441a      	add	r2, r3
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fe fb38 	bl	800737a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d0a:	bf00      	nop
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	2000029c 	.word	0x2000029c
 8008d18:	200002a0 	.word	0x200002a0
 8008d1c:	200003a4 	.word	0x200003a4

08008d20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008d32:	3201      	adds	r2, #1
 8008d34:	675a      	str	r2, [r3, #116]	; 0x74
		}

		return pxCurrentTCB;
 8008d36:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d38:	681b      	ldr	r3, [r3, #0]
	}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	2000029c 	.word	0x2000029c

08008d48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d52:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d58:	4b28      	ldr	r3, [pc, #160]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fb66 	bl	8007430 <uxListRemove>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d6a:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	2201      	movs	r2, #1
 8008d72:	fa02 f303 	lsl.w	r3, r2, r3
 8008d76:	43da      	mvns	r2, r3
 8008d78:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	4a20      	ldr	r2, [pc, #128]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d88:	d10a      	bne.n	8008da0 <prvAddCurrentTaskToDelayedList+0x58>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d007      	beq.n	8008da0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	481a      	ldr	r0, [pc, #104]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d9a:	f7fe faee 	bl	800737a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d9e:	e026      	b.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da8:	4b14      	ldr	r3, [pc, #80]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d209      	bcs.n	8008dcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f7fe fafb 	bl	80073c0 <vListInsert>
}
 8008dca:	e010      	b.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f7fe faf1 	bl	80073c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d202      	bcs.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6013      	str	r3, [r2, #0]
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200003a0 	.word	0x200003a0
 8008dfc:	2000029c 	.word	0x2000029c
 8008e00:	200003a4 	.word	0x200003a4
 8008e04:	20000388 	.word	0x20000388
 8008e08:	20000358 	.word	0x20000358
 8008e0c:	20000354 	.word	0x20000354
 8008e10:	200003bc 	.word	0x200003bc

08008e14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3b04      	subs	r3, #4
 8008e24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 0201 	bic.w	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <pxPortInitialiseStack+0x54>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b14      	subs	r3, #20
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b20      	subs	r3, #32
 8008e5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr
 8008e68:	08008e6d 	.word	0x08008e6d

08008e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <prvTaskExitError+0x54>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e7e:	d00a      	beq.n	8008e96 <prvTaskExitError+0x2a>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <prvTaskExitError+0x28>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60bb      	str	r3, [r7, #8]
}
 8008ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eaa:	bf00      	nop
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0fc      	beq.n	8008eac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	2000000c 	.word	0x2000000c
	...

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8008eee:	4770      	bx	lr

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ef8:	4806      	ldr	r0, [pc, #24]	; (8008f14 <prvPortStartFirstTask+0x1c>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	b662      	cpsie	i
 8008f04:	b661      	cpsie	f
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	df00      	svc	0
 8008f10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f12:	bf00      	nop
 8008f14:	e000ed08 	.word	0xe000ed08

08008f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f1e:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <xPortStartScheduler+0xd0>)
 8008f20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f46:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f48:	2207      	movs	r2, #7
 8008f4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f4c:	e009      	b.n	8008f62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f4e:	4b28      	ldr	r3, [pc, #160]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	d0ef      	beq.n	8008f4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f6e:	4b20      	ldr	r3, [pc, #128]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1c3 0307 	rsb	r3, r3, #7
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d00a      	beq.n	8008f90 <xPortStartScheduler+0x78>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60bb      	str	r3, [r7, #8]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f90:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	4a16      	ldr	r2, [pc, #88]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fa2:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fa4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fc6:	f000 f8b9 	bl	800913c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <xPortStartScheduler+0xe0>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fd0:	f7ff ff92 	bl	8008ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fd4:	f7ff fa90 	bl	80084f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008fd8:	f7ff ff48 	bl	8008e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	e000e400 	.word	0xe000e400
 8008fec:	200003c8 	.word	0x200003c8
 8008ff0:	200003cc 	.word	0x200003cc
 8008ff4:	e000ed20 	.word	0xe000ed20
 8008ff8:	2000000c 	.word	0x2000000c

08008ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	607b      	str	r3, [r7, #4]
}
 8009014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <vPortEnterCritical+0x58>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3301      	adds	r3, #1
 800901c:	4a0d      	ldr	r2, [pc, #52]	; (8009054 <vPortEnterCritical+0x58>)
 800901e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <vPortEnterCritical+0x58>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10f      	bne.n	8009048 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <vPortEnterCritical+0x5c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <vPortEnterCritical+0x4c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <vPortEnterCritical+0x4a>
	}
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	2000000c 	.word	0x2000000c
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <vPortExitCritical+0x4c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <vPortExitCritical+0x24>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	607b      	str	r3, [r7, #4]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <vPortExitCritical+0x4c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3b01      	subs	r3, #1
 8009086:	4a08      	ldr	r2, [pc, #32]	; (80090a8 <vPortExitCritical+0x4c>)
 8009088:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <vPortExitCritical+0x4c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d105      	bne.n	800909e <vPortExitCritical+0x42>
 8009092:	2300      	movs	r3, #0
 8009094:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f383 8811 	msr	BASEPRI, r3
}
 800909c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr
 80090a8:	2000000c 	.word	0x2000000c
 80090ac:	00000000 	.word	0x00000000

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090c0:	6010      	str	r0, [r2, #0]
 80090c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ca:	f380 8811 	msr	BASEPRI, r0
 80090ce:	f7ff fa13 	bl	80084f8 <vTaskSwitchContext>
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090e6:	f380 8809 	msr	PSP, r0
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	4770      	bx	lr

080090f0 <pxCurrentTCBConst>:
 80090f0:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009112:	f7ff f933 	bl	800837c <xTaskIncrementTick>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <SysTick_Handler+0x40>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f383 8811 	msr	BASEPRI, r3
}
 800912e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <vPortSetupTimerInterrupt+0x34>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <vPortSetupTimerInterrupt+0x38>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a09      	ldr	r2, [pc, #36]	; (8009178 <vPortSetupTimerInterrupt+0x3c>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	099b      	lsrs	r3, r3, #6
 8009158:	4a08      	ldr	r2, [pc, #32]	; (800917c <vPortSetupTimerInterrupt+0x40>)
 800915a:	3b01      	subs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800915e:	4b03      	ldr	r3, [pc, #12]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009160:	2207      	movs	r2, #7
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	e000e010 	.word	0xe000e010
 8009170:	e000e018 	.word	0xe000e018
 8009174:	20000000 	.word	0x20000000
 8009178:	10624dd3 	.word	0x10624dd3
 800917c:	e000e014 	.word	0xe000e014

08009180 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009186:	f3ef 8305 	mrs	r3, IPSR
 800918a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d914      	bls.n	80091bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009192:	4a16      	ldr	r2, [pc, #88]	; (80091ec <vPortValidateInterruptPriority+0x6c>)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800919c:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <vPortValidateInterruptPriority+0x70>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	7afa      	ldrb	r2, [r7, #11]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d20a      	bcs.n	80091bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	607b      	str	r3, [r7, #4]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <vPortValidateInterruptPriority+0x74>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <vPortValidateInterruptPriority+0x78>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d90a      	bls.n	80091e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	603b      	str	r3, [r7, #0]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <vPortValidateInterruptPriority+0x60>
	}
 80091e2:	bf00      	nop
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr
 80091ec:	e000e3f0 	.word	0xe000e3f0
 80091f0:	200003c8 	.word	0x200003c8
 80091f4:	e000ed0c 	.word	0xe000ed0c
 80091f8:	200003cc 	.word	0x200003cc

080091fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009208:	f7ff f80e 	bl	8008228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800920c:	4b58      	ldr	r3, [pc, #352]	; (8009370 <pvPortMalloc+0x174>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009214:	f000 f910 	bl	8009438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009218:	4b56      	ldr	r3, [pc, #344]	; (8009374 <pvPortMalloc+0x178>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4013      	ands	r3, r2
 8009220:	2b00      	cmp	r3, #0
 8009222:	f040 808e 	bne.w	8009342 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01d      	beq.n	8009268 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800922c:	2208      	movs	r2, #8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d014      	beq.n	8009268 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f023 0307 	bic.w	r3, r3, #7
 8009244:	3308      	adds	r3, #8
 8009246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <pvPortMalloc+0x6c>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	617b      	str	r3, [r7, #20]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d069      	beq.n	8009342 <pvPortMalloc+0x146>
 800926e:	4b42      	ldr	r3, [pc, #264]	; (8009378 <pvPortMalloc+0x17c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	429a      	cmp	r2, r3
 8009276:	d864      	bhi.n	8009342 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009278:	4b40      	ldr	r3, [pc, #256]	; (800937c <pvPortMalloc+0x180>)
 800927a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800927c:	4b3f      	ldr	r3, [pc, #252]	; (800937c <pvPortMalloc+0x180>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009282:	e004      	b.n	800928e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d903      	bls.n	80092a0 <pvPortMalloc+0xa4>
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f1      	bne.n	8009284 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092a0:	4b33      	ldr	r3, [pc, #204]	; (8009370 <pvPortMalloc+0x174>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d04b      	beq.n	8009342 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2208      	movs	r2, #8
 80092b0:	4413      	add	r3, r2
 80092b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	2308      	movs	r3, #8
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d91f      	bls.n	800930c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0xf8>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	613b      	str	r3, [r7, #16]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	1ad2      	subs	r2, r2, r3
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009306:	69b8      	ldr	r0, [r7, #24]
 8009308:	f000 f8f8 	bl	80094fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800930c:	4b1a      	ldr	r3, [pc, #104]	; (8009378 <pvPortMalloc+0x17c>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	4a18      	ldr	r2, [pc, #96]	; (8009378 <pvPortMalloc+0x17c>)
 8009318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800931a:	4b17      	ldr	r3, [pc, #92]	; (8009378 <pvPortMalloc+0x17c>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b18      	ldr	r3, [pc, #96]	; (8009380 <pvPortMalloc+0x184>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d203      	bcs.n	800932e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <pvPortMalloc+0x17c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a15      	ldr	r2, [pc, #84]	; (8009380 <pvPortMalloc+0x184>)
 800932c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	4b10      	ldr	r3, [pc, #64]	; (8009374 <pvPortMalloc+0x178>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	431a      	orrs	r2, r3
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009342:	f7fe ff7f 	bl	8008244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <pvPortMalloc+0x16a>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	60fb      	str	r3, [r7, #12]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <pvPortMalloc+0x168>
	return pvReturn;
 8009366:	69fb      	ldr	r3, [r7, #28]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3728      	adds	r7, #40	; 0x28
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20003ba8 	.word	0x20003ba8
 8009374:	20003bb4 	.word	0x20003bb4
 8009378:	20003bac 	.word	0x20003bac
 800937c:	20003ba0 	.word	0x20003ba0
 8009380:	20003bb0 	.word	0x20003bb0

08009384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d048      	beq.n	8009428 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009396:	2308      	movs	r3, #8
 8009398:	425b      	negs	r3, r3
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	4413      	add	r3, r2
 800939e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	4b21      	ldr	r3, [pc, #132]	; (8009430 <vPortFree+0xac>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4013      	ands	r3, r2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <vPortFree+0x44>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	60fb      	str	r3, [r7, #12]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <vPortFree+0x62>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60bb      	str	r3, [r7, #8]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	4b11      	ldr	r3, [pc, #68]	; (8009430 <vPortFree+0xac>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d019      	beq.n	8009428 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d115      	bne.n	8009428 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <vPortFree+0xac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	43db      	mvns	r3, r3
 8009406:	401a      	ands	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800940c:	f7fe ff0c 	bl	8008228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <vPortFree+0xb0>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4413      	add	r3, r2
 800941a:	4a06      	ldr	r2, [pc, #24]	; (8009434 <vPortFree+0xb0>)
 800941c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800941e:	6938      	ldr	r0, [r7, #16]
 8009420:	f000 f86c 	bl	80094fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009424:	f7fe ff0e 	bl	8008244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009428:	bf00      	nop
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20003bb4 	.word	0x20003bb4
 8009434:	20003bac 	.word	0x20003bac

08009438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800943e:	f243 73d0 	movw	r3, #14288	; 0x37d0
 8009442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009444:	4b27      	ldr	r3, [pc, #156]	; (80094e4 <prvHeapInit+0xac>)
 8009446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00c      	beq.n	800946c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3307      	adds	r3, #7
 8009456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0307 	bic.w	r3, r3, #7
 800945e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	4a1f      	ldr	r2, [pc, #124]	; (80094e4 <prvHeapInit+0xac>)
 8009468:	4413      	add	r3, r2
 800946a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009470:	4a1d      	ldr	r2, [pc, #116]	; (80094e8 <prvHeapInit+0xb0>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009476:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <prvHeapInit+0xb0>)
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009484:	2208      	movs	r2, #8
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a15      	ldr	r2, [pc, #84]	; (80094ec <prvHeapInit+0xb4>)
 8009498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <prvHeapInit+0xb4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094a2:	4b12      	ldr	r3, [pc, #72]	; (80094ec <prvHeapInit+0xb4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <prvHeapInit+0xb4>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <prvHeapInit+0xb8>)
 80094c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <prvHeapInit+0xbc>)
 80094ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <prvHeapInit+0xc0>)
 80094d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	200003d0 	.word	0x200003d0
 80094e8:	20003ba0 	.word	0x20003ba0
 80094ec:	20003ba8 	.word	0x20003ba8
 80094f0:	20003bb0 	.word	0x20003bb0
 80094f4:	20003bac 	.word	0x20003bac
 80094f8:	20003bb4 	.word	0x20003bb4

080094fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009504:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <prvInsertBlockIntoFreeList+0xa8>)
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e002      	b.n	8009510 <prvInsertBlockIntoFreeList+0x14>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d8f7      	bhi.n	800950a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	4413      	add	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d108      	bne.n	800953e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d118      	bne.n	8009584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d00d      	beq.n	800957a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	441a      	add	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e008      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	e003      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d002      	beq.n	800959a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800959a:	bf00      	nop
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr
 80095a4:	20003ba0 	.word	0x20003ba0
 80095a8:	20003ba8 	.word	0x20003ba8

080095ac <__libc_init_array>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	2600      	movs	r6, #0
 80095b0:	4d0c      	ldr	r5, [pc, #48]	; (80095e4 <__libc_init_array+0x38>)
 80095b2:	4c0d      	ldr	r4, [pc, #52]	; (80095e8 <__libc_init_array+0x3c>)
 80095b4:	1b64      	subs	r4, r4, r5
 80095b6:	10a4      	asrs	r4, r4, #2
 80095b8:	42a6      	cmp	r6, r4
 80095ba:	d109      	bne.n	80095d0 <__libc_init_array+0x24>
 80095bc:	f000 f902 	bl	80097c4 <_init>
 80095c0:	2600      	movs	r6, #0
 80095c2:	4d0a      	ldr	r5, [pc, #40]	; (80095ec <__libc_init_array+0x40>)
 80095c4:	4c0a      	ldr	r4, [pc, #40]	; (80095f0 <__libc_init_array+0x44>)
 80095c6:	1b64      	subs	r4, r4, r5
 80095c8:	10a4      	asrs	r4, r4, #2
 80095ca:	42a6      	cmp	r6, r4
 80095cc:	d105      	bne.n	80095da <__libc_init_array+0x2e>
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d4:	4798      	blx	r3
 80095d6:	3601      	adds	r6, #1
 80095d8:	e7ee      	b.n	80095b8 <__libc_init_array+0xc>
 80095da:	f855 3b04 	ldr.w	r3, [r5], #4
 80095de:	4798      	blx	r3
 80095e0:	3601      	adds	r6, #1
 80095e2:	e7f2      	b.n	80095ca <__libc_init_array+0x1e>
 80095e4:	08009958 	.word	0x08009958
 80095e8:	08009958 	.word	0x08009958
 80095ec:	08009958 	.word	0x08009958
 80095f0:	0800995c 	.word	0x0800995c

080095f4 <__retarget_lock_acquire_recursive>:
 80095f4:	4770      	bx	lr

080095f6 <__retarget_lock_release_recursive>:
 80095f6:	4770      	bx	lr

080095f8 <memcmp>:
 80095f8:	b530      	push	{r4, r5, lr}
 80095fa:	2400      	movs	r4, #0
 80095fc:	3901      	subs	r1, #1
 80095fe:	42a2      	cmp	r2, r4
 8009600:	d101      	bne.n	8009606 <memcmp+0xe>
 8009602:	2000      	movs	r0, #0
 8009604:	e005      	b.n	8009612 <memcmp+0x1a>
 8009606:	5d03      	ldrb	r3, [r0, r4]
 8009608:	3401      	adds	r4, #1
 800960a:	5d0d      	ldrb	r5, [r1, r4]
 800960c:	42ab      	cmp	r3, r5
 800960e:	d0f6      	beq.n	80095fe <memcmp+0x6>
 8009610:	1b58      	subs	r0, r3, r5
 8009612:	bd30      	pop	{r4, r5, pc}

08009614 <memcpy>:
 8009614:	440a      	add	r2, r1
 8009616:	4291      	cmp	r1, r2
 8009618:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800961c:	d100      	bne.n	8009620 <memcpy+0xc>
 800961e:	4770      	bx	lr
 8009620:	b510      	push	{r4, lr}
 8009622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009626:	4291      	cmp	r1, r2
 8009628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800962c:	d1f9      	bne.n	8009622 <memcpy+0xe>
 800962e:	bd10      	pop	{r4, pc}

08009630 <memset>:
 8009630:	4603      	mov	r3, r0
 8009632:	4402      	add	r2, r0
 8009634:	4293      	cmp	r3, r2
 8009636:	d100      	bne.n	800963a <memset+0xa>
 8009638:	4770      	bx	lr
 800963a:	f803 1b01 	strb.w	r1, [r3], #1
 800963e:	e7f9      	b.n	8009634 <memset+0x4>

08009640 <cleanup_glue>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	6809      	ldr	r1, [r1, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	b109      	cbz	r1, 800964e <cleanup_glue+0xe>
 800964a:	f7ff fff9 	bl	8009640 <cleanup_glue>
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009656:	f000 b869 	b.w	800972c <_free_r>
	...

0800965c <_reclaim_reent>:
 800965c:	4b2c      	ldr	r3, [pc, #176]	; (8009710 <_reclaim_reent+0xb4>)
 800965e:	b570      	push	{r4, r5, r6, lr}
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4604      	mov	r4, r0
 8009664:	4283      	cmp	r3, r0
 8009666:	d051      	beq.n	800970c <_reclaim_reent+0xb0>
 8009668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800966a:	b143      	cbz	r3, 800967e <_reclaim_reent+0x22>
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d14a      	bne.n	8009708 <_reclaim_reent+0xac>
 8009672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009674:	6819      	ldr	r1, [r3, #0]
 8009676:	b111      	cbz	r1, 800967e <_reclaim_reent+0x22>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 f857 	bl	800972c <_free_r>
 800967e:	6961      	ldr	r1, [r4, #20]
 8009680:	b111      	cbz	r1, 8009688 <_reclaim_reent+0x2c>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f852 	bl	800972c <_free_r>
 8009688:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800968a:	b111      	cbz	r1, 8009692 <_reclaim_reent+0x36>
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f84d 	bl	800972c <_free_r>
 8009692:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009694:	b111      	cbz	r1, 800969c <_reclaim_reent+0x40>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f848 	bl	800972c <_free_r>
 800969c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800969e:	b111      	cbz	r1, 80096a6 <_reclaim_reent+0x4a>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f843 	bl	800972c <_free_r>
 80096a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096a8:	b111      	cbz	r1, 80096b0 <_reclaim_reent+0x54>
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f83e 	bl	800972c <_free_r>
 80096b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096b2:	b111      	cbz	r1, 80096ba <_reclaim_reent+0x5e>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 f839 	bl	800972c <_free_r>
 80096ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096bc:	b111      	cbz	r1, 80096c4 <_reclaim_reent+0x68>
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f834 	bl	800972c <_free_r>
 80096c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096c6:	b111      	cbz	r1, 80096ce <_reclaim_reent+0x72>
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f82f 	bl	800972c <_free_r>
 80096ce:	69a3      	ldr	r3, [r4, #24]
 80096d0:	b1e3      	cbz	r3, 800970c <_reclaim_reent+0xb0>
 80096d2:	4620      	mov	r0, r4
 80096d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096d6:	4798      	blx	r3
 80096d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096da:	b1b9      	cbz	r1, 800970c <_reclaim_reent+0xb0>
 80096dc:	4620      	mov	r0, r4
 80096de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096e2:	f7ff bfad 	b.w	8009640 <cleanup_glue>
 80096e6:	5949      	ldr	r1, [r1, r5]
 80096e8:	b941      	cbnz	r1, 80096fc <_reclaim_reent+0xa0>
 80096ea:	3504      	adds	r5, #4
 80096ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ee:	2d80      	cmp	r5, #128	; 0x80
 80096f0:	68d9      	ldr	r1, [r3, #12]
 80096f2:	d1f8      	bne.n	80096e6 <_reclaim_reent+0x8a>
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f819 	bl	800972c <_free_r>
 80096fa:	e7ba      	b.n	8009672 <_reclaim_reent+0x16>
 80096fc:	680e      	ldr	r6, [r1, #0]
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 f814 	bl	800972c <_free_r>
 8009704:	4631      	mov	r1, r6
 8009706:	e7ef      	b.n	80096e8 <_reclaim_reent+0x8c>
 8009708:	2500      	movs	r5, #0
 800970a:	e7ef      	b.n	80096ec <_reclaim_reent+0x90>
 800970c:	bd70      	pop	{r4, r5, r6, pc}
 800970e:	bf00      	nop
 8009710:	20000010 	.word	0x20000010

08009714 <__malloc_lock>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__malloc_lock+0x8>)
 8009716:	f7ff bf6d 	b.w	80095f4 <__retarget_lock_acquire_recursive>
 800971a:	bf00      	nop
 800971c:	20003eac 	.word	0x20003eac

08009720 <__malloc_unlock>:
 8009720:	4801      	ldr	r0, [pc, #4]	; (8009728 <__malloc_unlock+0x8>)
 8009722:	f7ff bf68 	b.w	80095f6 <__retarget_lock_release_recursive>
 8009726:	bf00      	nop
 8009728:	20003eac 	.word	0x20003eac

0800972c <_free_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4605      	mov	r5, r0
 8009730:	2900      	cmp	r1, #0
 8009732:	d043      	beq.n	80097bc <_free_r+0x90>
 8009734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009738:	1f0c      	subs	r4, r1, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfb8      	it	lt
 800973e:	18e4      	addlt	r4, r4, r3
 8009740:	f7ff ffe8 	bl	8009714 <__malloc_lock>
 8009744:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <_free_r+0x94>)
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	4610      	mov	r0, r2
 800974a:	b933      	cbnz	r3, 800975a <_free_r+0x2e>
 800974c:	6063      	str	r3, [r4, #4]
 800974e:	6014      	str	r4, [r2, #0]
 8009750:	4628      	mov	r0, r5
 8009752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009756:	f7ff bfe3 	b.w	8009720 <__malloc_unlock>
 800975a:	42a3      	cmp	r3, r4
 800975c:	d90a      	bls.n	8009774 <_free_r+0x48>
 800975e:	6821      	ldr	r1, [r4, #0]
 8009760:	1862      	adds	r2, r4, r1
 8009762:	4293      	cmp	r3, r2
 8009764:	bf01      	itttt	eq
 8009766:	681a      	ldreq	r2, [r3, #0]
 8009768:	685b      	ldreq	r3, [r3, #4]
 800976a:	1852      	addeq	r2, r2, r1
 800976c:	6022      	streq	r2, [r4, #0]
 800976e:	6063      	str	r3, [r4, #4]
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	e7ed      	b.n	8009750 <_free_r+0x24>
 8009774:	461a      	mov	r2, r3
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	b10b      	cbz	r3, 800977e <_free_r+0x52>
 800977a:	42a3      	cmp	r3, r4
 800977c:	d9fa      	bls.n	8009774 <_free_r+0x48>
 800977e:	6811      	ldr	r1, [r2, #0]
 8009780:	1850      	adds	r0, r2, r1
 8009782:	42a0      	cmp	r0, r4
 8009784:	d10b      	bne.n	800979e <_free_r+0x72>
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	4401      	add	r1, r0
 800978a:	1850      	adds	r0, r2, r1
 800978c:	4283      	cmp	r3, r0
 800978e:	6011      	str	r1, [r2, #0]
 8009790:	d1de      	bne.n	8009750 <_free_r+0x24>
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	4401      	add	r1, r0
 8009798:	6011      	str	r1, [r2, #0]
 800979a:	6053      	str	r3, [r2, #4]
 800979c:	e7d8      	b.n	8009750 <_free_r+0x24>
 800979e:	d902      	bls.n	80097a6 <_free_r+0x7a>
 80097a0:	230c      	movs	r3, #12
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	e7d4      	b.n	8009750 <_free_r+0x24>
 80097a6:	6820      	ldr	r0, [r4, #0]
 80097a8:	1821      	adds	r1, r4, r0
 80097aa:	428b      	cmp	r3, r1
 80097ac:	bf01      	itttt	eq
 80097ae:	6819      	ldreq	r1, [r3, #0]
 80097b0:	685b      	ldreq	r3, [r3, #4]
 80097b2:	1809      	addeq	r1, r1, r0
 80097b4:	6021      	streq	r1, [r4, #0]
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6054      	str	r4, [r2, #4]
 80097ba:	e7c9      	b.n	8009750 <_free_r+0x24>
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20003bb8 	.word	0x20003bb8

080097c4 <_init>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr

080097d0 <_fini>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	bf00      	nop
 80097d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d6:	bc08      	pop	{r3}
 80097d8:	469e      	mov	lr, r3
 80097da:	4770      	bx	lr
