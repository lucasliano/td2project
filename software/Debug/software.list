
software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000942c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009694  08009694  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009694  08009694  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800969c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e40  20000074  08009710  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eb4  08009710  00023eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fe3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d0  00000000  00000000  00047080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  0004c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  0004e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fde0  00000000  00000000  0004fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024253  00000000  00000000  0006faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b38  00000000  00000000  00093d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013487b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007800  00000000  00000000  001348d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009524 	.word	0x08009524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009524 	.word	0x08009524

08000150 <rfid_add_id>:
static SPI_HandleTypeDef *spi;
/* ===========================================*/


uint8_t rfid_add_id(uint32_t id)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	static uint8_t current_index = 0;
	uint8_t wbuff[4];
	uint8_t status = CARD_NOT_ADDED;
 8000158:	2301      	movs	r3, #1
 800015a:	75fb      	strb	r3, [r7, #23]
 800015c:	687b      	ldr	r3, [r7, #4]

	memcpy(wbuff, &id , 4);
 800015e:	613b      	str	r3, [r7, #16]


	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8000160:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <rfid_add_id+0x94>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000168:	4618      	mov	r0, r3
 800016a:	f007 fac5 	bl	80076f8 <xQueueSemaphoreTake>
	status = eeprom_write_page(RFID_INIT_PAGE, 4*current_index, wbuff, 4);
 800016e:	4b1e      	ldr	r3, [pc, #120]	; (80001e8 <rfid_add_id+0x98>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	b2d9      	uxtb	r1, r3
 8000176:	f107 0210 	add.w	r2, r7, #16
 800017a:	2304      	movs	r3, #4
 800017c:	2003      	movs	r0, #3
 800017e:	f000 fed3 	bl	8000f28 <eeprom_write_page>
 8000182:	4603      	mov	r3, r0
 8000184:	75fb      	strb	r3, [r7, #23]
	xSemaphoreGive(sem_eeprom);
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <rfid_add_id+0x94>)
 8000188:	6818      	ldr	r0, [r3, #0]
 800018a:	2300      	movs	r3, #0
 800018c:	2200      	movs	r2, #0
 800018e:	2100      	movs	r1, #0
 8000190:	f007 f926 	bl	80073e0 <xQueueGenericSend>

	current_index++;
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <rfid_add_id+0x98>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	b2da      	uxtb	r2, r3
 800019c:	4b12      	ldr	r3, [pc, #72]	; (80001e8 <rfid_add_id+0x98>)
 800019e:	701a      	strb	r2, [r3, #0]
	current_index %= 2;
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <rfid_add_id+0x98>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <rfid_add_id+0x98>)
 80001ac:	701a      	strb	r2, [r3, #0]

	uint8_t valid_id[8];
	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <rfid_add_id+0x94>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80001b6:	4618      	mov	r0, r3
 80001b8:	f007 fa9e 	bl	80076f8 <xQueueSemaphoreTake>
	eeprom_read_page(RFID_INIT_PAGE, 0, valid_id, 8);
 80001bc:	f107 0208 	add.w	r2, r7, #8
 80001c0:	2308      	movs	r3, #8
 80001c2:	2100      	movs	r1, #0
 80001c4:	2003      	movs	r0, #3
 80001c6:	f000 fed8 	bl	8000f7a <eeprom_read_page>
	xSemaphoreGive(sem_eeprom);
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <rfid_add_id+0x94>)
 80001cc:	6818      	ldr	r0, [r3, #0]
 80001ce:	2300      	movs	r3, #0
 80001d0:	2200      	movs	r2, #0
 80001d2:	2100      	movs	r1, #0
 80001d4:	f007 f904 	bl	80073e0 <xQueueGenericSend>

	return CARD_ADDED;
 80001d8:	2300      	movs	r3, #0
}
 80001da:	4618      	mov	r0, r3
 80001dc:	3718      	adds	r7, #24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20003cb0 	.word	0x20003cb0
 80001e8:	2000009c 	.word	0x2000009c

080001ec <rfid_toggle_state>:
 * Input Parameters:
 * 					None.
 * Return value: None
 */
void rfid_toggle_state(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	if (rfid_debounce() == CARD_DETECTED)
 80001f0:	f000 f81a 	bl	8000228 <rfid_debounce>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d110      	bne.n	800021c <rfid_toggle_state+0x30>
	{
		// Toggle clave state
		xSemaphoreTake(sem_state,portMAX_DELAY);
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <rfid_toggle_state+0x34>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000202:	4618      	mov	r0, r3
 8000204:	f007 fa78 	bl	80076f8 <xQueueSemaphoreTake>
		clave_ok = 1;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <rfid_toggle_state+0x38>)
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(sem_state);
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <rfid_toggle_state+0x34>)
 8000210:	6818      	ldr	r0, [r3, #0]
 8000212:	2300      	movs	r3, #0
 8000214:	2200      	movs	r2, #0
 8000216:	2100      	movs	r1, #0
 8000218:	f007 f8e2 	bl	80073e0 <xQueueGenericSend>
	}
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20003d90 	.word	0x20003d90
 8000224:	20000298 	.word	0x20000298

08000228 <rfid_debounce>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not validated nor detected.
 *					CARD_DETECTED 	if card was detected and validated.
 */
uint8_t rfid_debounce(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	static uint8_t estado = WAITING_CARD;
	static uint32_t initial_time = 0;
	uint8_t return_value = CARD_NOT_FOUND;
 800022e:	2301      	movs	r3, #1
 8000230:	73fb      	strb	r3, [r7, #15]
	uint32_t current_time = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
	uint8_t id[4];	// Not important here

	switch(estado)
 8000236:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <rfid_debounce+0xc8>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d040      	beq.n	80002c0 <rfid_debounce+0x98>
 800023e:	2b02      	cmp	r3, #2
 8000240:	dc50      	bgt.n	80002e4 <rfid_debounce+0xbc>
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <rfid_debounce+0x24>
 8000246:	2b01      	cmp	r3, #1
 8000248:	d010      	beq.n	800026c <rfid_debounce+0x44>
 800024a:	e04b      	b.n	80002e4 <rfid_debounce+0xbc>
	{
		case WAITING_CARD:
			if (rfid_find_card(id) == CARD_DETECTED)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f892 	bl	8000378 <rfid_find_card>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d13f      	bne.n	80002da <rfid_debounce+0xb2>
			{
				initial_time = HAL_GetTick();
 800025a:	f002 f98f 	bl	800257c <HAL_GetTick>
 800025e:	4603      	mov	r3, r0
 8000260:	4a24      	ldr	r2, [pc, #144]	; (80002f4 <rfid_debounce+0xcc>)
 8000262:	6013      	str	r3, [r2, #0]
				estado = VALIDATING_CARD;
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <rfid_debounce+0xc8>)
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
			}
			break;
 800026a:	e036      	b.n	80002da <rfid_debounce+0xb2>

		case VALIDATING_CARD:
			if (rfid_find_card(id) == CARD_NOT_FOUND)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f882 	bl	8000378 <rfid_find_card>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d103      	bne.n	8000282 <rfid_debounce+0x5a>
			{
				estado = WAITING_CARD;
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <rfid_debounce+0xc8>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
						initial_time = 0;
						estado = REMOVING_CARD;
					}
				}
			}
			break;
 8000280:	e02d      	b.n	80002de <rfid_debounce+0xb6>
				current_time = HAL_GetTick();
 8000282:	f002 f97b 	bl	800257c <HAL_GetTick>
 8000286:	60b8      	str	r0, [r7, #8]
				if (current_time - initial_time >= DETECTION_TIMEOUT)
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <rfid_debounce+0xcc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000294:	d323      	bcc.n	80002de <rfid_debounce+0xb6>
					if (rfid_identify_card() == CARD_DETECTED)
 8000296:	f000 f82f 	bl	80002f8 <rfid_identify_card>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d108      	bne.n	80002b2 <rfid_debounce+0x8a>
						initial_time = 0;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <rfid_debounce+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
						estado = REMOVING_CARD;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <rfid_debounce+0xc8>)
 80002a8:	2202      	movs	r2, #2
 80002aa:	701a      	strb	r2, [r3, #0]
						return_value = CARD_DETECTED;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
			break;
 80002b0:	e015      	b.n	80002de <rfid_debounce+0xb6>
						initial_time = 0;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <rfid_debounce+0xcc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
						estado = REMOVING_CARD;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <rfid_debounce+0xc8>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
			break;
 80002be:	e00e      	b.n	80002de <rfid_debounce+0xb6>

		case REMOVING_CARD:
			return_value = CARD_NOT_FOUND;
 80002c0:	2301      	movs	r3, #1
 80002c2:	73fb      	strb	r3, [r7, #15]
			if (rfid_find_card(id) == CARD_NOT_FOUND)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f856 	bl	8000378 <rfid_find_card>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d107      	bne.n	80002e2 <rfid_debounce+0xba>
			{
				estado = WAITING_CARD;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <rfid_debounce+0xc8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80002d8:	e003      	b.n	80002e2 <rfid_debounce+0xba>
			break;
 80002da:	bf00      	nop
 80002dc:	e002      	b.n	80002e4 <rfid_debounce+0xbc>
			break;
 80002de:	bf00      	nop
 80002e0:	e000      	b.n	80002e4 <rfid_debounce+0xbc>
			break;
 80002e2:	bf00      	nop
	}
	return return_value;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000009d 	.word	0x2000009d
 80002f4:	200000a0 	.word	0x200000a0

080002f8 <rfid_identify_card>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not detected.
 *					CARD_DETECTED 	if card was detected.
 */
uint8_t rfid_identify_card(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t id[4];
	uint8_t valid_id[2*4];

	status = rfid_find_card(id);
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f838 	bl	8000378 <rfid_find_card>
 8000308:	4603      	mov	r3, r0
 800030a:	73bb      	strb	r3, [r7, #14]
	if (status == CARD_DETECTED)
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12b      	bne.n	800036a <rfid_identify_card+0x72>
	{

		xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <rfid_identify_card+0x7c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800031a:	4618      	mov	r0, r3
 800031c:	f007 f9ec 	bl	80076f8 <xQueueSemaphoreTake>
		eeprom_read_page(RFID_INIT_PAGE, 0, valid_id, 8);
 8000320:	463a      	mov	r2, r7
 8000322:	2308      	movs	r3, #8
 8000324:	2100      	movs	r1, #0
 8000326:	2003      	movs	r0, #3
 8000328:	f000 fe27 	bl	8000f7a <eeprom_read_page>
		xSemaphoreGive(sem_eeprom);
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <rfid_identify_card+0x7c>)
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	2300      	movs	r3, #0
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	f007 f853 	bl	80073e0 <xQueueGenericSend>

		for (uint8_t n = 0; n < 2; n++)
 800033a:	2300      	movs	r3, #0
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	e011      	b.n	8000364 <rfid_identify_card+0x6c>
		{
			if( memcmp(&valid_id[n*4], id, 4) == 0)
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	463a      	mov	r2, r7
 8000346:	4413      	add	r3, r2
 8000348:	f107 0108 	add.w	r1, r7, #8
 800034c:	2204      	movs	r2, #4
 800034e:	4618      	mov	r0, r3
 8000350:	f009 f802 	bl	8009358 <memcmp>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d101      	bne.n	800035e <rfid_identify_card+0x66>
				return CARD_DETECTED;
 800035a:	2300      	movs	r3, #0
 800035c:	e006      	b.n	800036c <rfid_identify_card+0x74>
		for (uint8_t n = 0; n < 2; n++)
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	3301      	adds	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d9ea      	bls.n	8000340 <rfid_identify_card+0x48>
		}
	}

	// Si todavia no se retorno
	return CARD_NOT_FOUND;
 800036a:	2301      	movs	r3, #1
}
 800036c:	4618      	mov	r0, r3
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20003cb0 	.word	0x20003cb0

08000378 <rfid_find_card>:
 * Return value:
 *					CARD_NOT_FOUND  if card was not detected.
 *					CARD_DETECTED 	if card was detected.
 */
uint8_t rfid_find_card( uint8_t* id)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t cardstr[MAX_LEN+1];

	status = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	77fb      	strb	r3, [r7, #31]
	memset(cardstr,0,sizeof(cardstr));
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	2211      	movs	r2, #17
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f008 ffff 	bl	8009390 <memset>
	status = (uint8_t) MFRC522_Request(PICC_REQIDL, cardstr);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	2026      	movs	r0, #38	; 0x26
 800039a:	f000 f917 	bl	80005cc <MFRC522_Request>
 800039e:	4603      	mov	r3, r0
 80003a0:	77fb      	strb	r3, [r7, #31]
	if (status == MI_OK)
 80003a2:	7ffb      	ldrb	r3, [r7, #31]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d111      	bne.n	80003cc <rfid_find_card+0x54>
	{
		HAL_Delay(2);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f002 f8f1 	bl	8002590 <HAL_Delay>
		MFRC522_Anticoll(cardstr);
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f9f5 	bl	80007a2 <MFRC522_Anticoll>
 80003b8:	68fa      	ldr	r2, [r7, #12]
		memcpy(id, &cardstr , 4);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
		MFRC522_Halt();
 80003be:	f000 fa76 	bl	80008ae <MFRC522_Halt>
		HAL_Delay(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f002 f8e4 	bl	8002590 <HAL_Delay>
		return CARD_DETECTED;
 80003c8:	2300      	movs	r3, #0
 80003ca:	e000      	b.n	80003ce <rfid_find_card+0x56>
	}

	// Si todavia no se retorno
	return CARD_NOT_FOUND;
 80003cc:	2301      	movs	r3, #1
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <Write_MFRC522>:
 * Input Parameters:
 * 					addr - register address
 * 					val  - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	4613      	mov	r3, r2
 80003e6:	71bb      	strb	r3, [r7, #6]
	u_char addr_bits = ((addr<<1) & 0x7E);
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <Write_MFRC522+0x68>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <Write_MFRC522+0x6c>)
 80003fc:	8811      	ldrh	r1, [r2, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f003 f9c0 	bl	8003786 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &addr_bits, 1, 500);
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <Write_MFRC522+0x70>)
 8000408:	6818      	ldr	r0, [r3, #0]
 800040a:	f107 010f 	add.w	r1, r7, #15
 800040e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000412:	2201      	movs	r2, #1
 8000414:	f005 fdb0 	bl	8005f78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi, &val, 1, 500);
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <Write_MFRC522+0x70>)
 800041a:	6818      	ldr	r0, [r3, #0]
 800041c:	1db9      	adds	r1, r7, #6
 800041e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000422:	2201      	movs	r2, #1
 8000424:	f005 fda8 	bl	8005f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <Write_MFRC522+0x68>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <Write_MFRC522+0x6c>)
 800042e:	8811      	ldrh	r1, [r2, #0]
 8000430:	2201      	movs	r2, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f003 f9a7 	bl	8003786 <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000090 	.word	0x20000090
 8000444:	20000094 	.word	0x20000094
 8000448:	20000098 	.word	0x20000098

0800044c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters:
 * 					addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
    u_char rx_bits;
    u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	b25b      	sxtb	r3, r3
 800045c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000460:	b25b      	sxtb	r3, r3
 8000462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000466:	b25b      	sxtb	r3, r3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <Read_MFRC522+0x70>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <Read_MFRC522+0x74>)
 8000472:	8811      	ldrh	r1, [r2, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f003 f985 	bl	8003786 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi, &addr_bits, 1, 500);
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <Read_MFRC522+0x78>)
 800047e:	6818      	ldr	r0, [r3, #0]
 8000480:	f107 010e 	add.w	r1, r7, #14
 8000484:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000488:	2201      	movs	r2, #1
 800048a:	f005 fd75 	bl	8005f78 <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, &rx_bits, 1, 500);
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <Read_MFRC522+0x78>)
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f107 010f 	add.w	r1, r7, #15
 8000496:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800049a:	2201      	movs	r2, #1
 800049c:	f005 fea8 	bl	80061f0 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <Read_MFRC522+0x70>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <Read_MFRC522+0x74>)
 80004a6:	8811      	ldrh	r1, [r2, #0]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 f96b 	bl	8003786 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000090 	.word	0x20000090
 80004c0:	20000094 	.word	0x20000094
 80004c4:	20000098 	.word	0x20000098

080004c8 <SetBitMask>:
 * 					reg  - register address
 * 					mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffb6 	bl	800044c <Read_MFRC522>
 80004e0:	4603      	mov	r3, r0
 80004e2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff71 	bl	80003d8 <Write_MFRC522>
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <ClearBitMask>:
 * 					reg  - register address
 * 					mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b084      	sub	sp, #16
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	460a      	mov	r2, r1
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	4613      	mov	r3, r2
 800050c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff9b 	bl	800044c <Read_MFRC522>
 8000516:	4603      	mov	r3, r0
 8000518:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800051a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800051e:	43db      	mvns	r3, r3
 8000520:	b25a      	sxtb	r2, r3
 8000522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000526:	4013      	ands	r3, r2
 8000528:	b25b      	sxtb	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff51 	bl	80003d8 <Write_MFRC522>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 8000542:	2103      	movs	r1, #3
 8000544:	2014      	movs	r0, #20
 8000546:	f7ff ffbf 	bl	80004c8 <SetBitMask>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}

0800054e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000552:	210f      	movs	r1, #15
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ff3f 	bl	80003d8 <Write_MFRC522>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(SPI_HandleTypeDef *s, GPIO_TypeDef *g, uint16_t pin)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	4613      	mov	r3, r2
 800056c:	80fb      	strh	r3, [r7, #6]
	spi = s;
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <MFRC522_Init+0x60>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6013      	str	r3, [r2, #0]
	RC522_CS_GPIO_Port = g;
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MFRC522_Init+0x64>)
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6013      	str	r3, [r2, #0]
	RC522_CS_Pin = pin;
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <MFRC522_Init+0x68>)
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	8013      	strh	r3, [r2, #0]

	//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
    MFRC522_Reset();
 8000580:	f7ff ffe5 	bl	800054e <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	202a      	movs	r0, #42	; 0x2a
 8000588:	f7ff ff26 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 800058c:	21a9      	movs	r1, #169	; 0xa9
 800058e:	202b      	movs	r0, #43	; 0x2b
 8000590:	f7ff ff22 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TReloadRegL, 0x03); //30);
 8000594:	2103      	movs	r1, #3
 8000596:	202d      	movs	r0, #45	; 0x2d
 8000598:	f7ff ff1e 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TReloadRegH, 0xE8); //0);
 800059c:	21e8      	movs	r1, #232	; 0xe8
 800059e:	202c      	movs	r0, #44	; 0x2c
 80005a0:	f7ff ff1a 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	2015      	movs	r0, #21
 80005a8:	f7ff ff16 	bl	80003d8 <Write_MFRC522>
    Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80005ac:	213d      	movs	r1, #61	; 0x3d
 80005ae:	2011      	movs	r0, #17
 80005b0:	f7ff ff12 	bl	80003d8 <Write_MFRC522>

    // turn antenna on
    AntennaOn();
 80005b4:	f7ff ffc3 	bl	800053e <AntennaOn>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000098 	.word	0x20000098
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000094 	.word	0x20000094

080005cc <MFRC522_Request>:
 *    						0x0800 = Mifare_Pro(X)
 *    						0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
	u_char status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80005d8:	2107      	movs	r1, #7
 80005da:	200d      	movs	r0, #13
 80005dc:	f7ff fefc 	bl	80003d8 <Write_MFRC522>

	TagType[0] = reqMode;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2201      	movs	r2, #1
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	200c      	movs	r0, #12
 80005f4:	f000 f80f 	bl	8000616 <MFRC522_ToCard>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <MFRC522_Request+0x3c>
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b10      	cmp	r3, #16
 8000606:	d001      	beq.n	800060c <MFRC522_Request+0x40>
	status = MI_ERR;
 8000608:	2302      	movs	r3, #2
 800060a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <MFRC522_ToCard>:
 *			 		backData - Received the card returns data,
 *			 		backLen  - Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000616:	b590      	push	{r4, r7, lr}
 8000618:	b089      	sub	sp, #36	; 0x24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	4613      	mov	r3, r2
 8000626:	73bb      	strb	r3, [r7, #14]
	u_char status = MI_ERR;
 8000628:	2302      	movs	r3, #2
 800062a:	77fb      	strb	r3, [r7, #31]
	u_char irqEn = 0x00;
 800062c:	2300      	movs	r3, #0
 800062e:	77bb      	strb	r3, [r7, #30]
	u_char waitIRq = 0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	777b      	strb	r3, [r7, #29]
	u_char lastBits;
	u_char n;
	uint i;

	switch (command)
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b0c      	cmp	r3, #12
 8000638:	d006      	beq.n	8000648 <MFRC522_ToCard+0x32>
 800063a:	2b0e      	cmp	r3, #14
 800063c:	d109      	bne.n	8000652 <MFRC522_ToCard+0x3c>
	{
	case PCD_AUTHENT:     // Certification cards close
	  {
		irqEn = 0x12;
 800063e:	2312      	movs	r3, #18
 8000640:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8000642:	2310      	movs	r3, #16
 8000644:	777b      	strb	r3, [r7, #29]
		break;
 8000646:	e005      	b.n	8000654 <MFRC522_ToCard+0x3e>
	  }
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	  {
		irqEn = 0x77;
 8000648:	2377      	movs	r3, #119	; 0x77
 800064a:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 800064c:	2330      	movs	r3, #48	; 0x30
 800064e:	777b      	strb	r3, [r7, #29]
		break;
 8000650:	e000      	b.n	8000654 <MFRC522_ToCard+0x3e>
	  }
	default:
	  break;
 8000652:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8000654:	7fbb      	ldrb	r3, [r7, #30]
 8000656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	2002      	movs	r0, #2
 8000660:	f7ff feba 	bl	80003d8 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	2004      	movs	r0, #4
 8000668:	f7ff ff49 	bl	80004fe <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	200a      	movs	r0, #10
 8000670:	f7ff ff2a 	bl	80004c8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff feae 	bl	80003d8 <Write_MFRC522>

	// Writing data to the FIFO
	for (i=0; i<sendLen; i++)
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	e00a      	b.n	8000698 <MFRC522_ToCard+0x82>
	{
	Write_MFRC522(FIFODataReg, sendData[i]);
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2009      	movs	r0, #9
 800068e:	f7ff fea3 	bl	80003d8 <Write_MFRC522>
	for (i=0; i<sendLen; i++)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	3301      	adds	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3f0      	bcc.n	8000682 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4619      	mov	r1, r3
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fe97 	bl	80003d8 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE)
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	d103      	bne.n	80006b8 <MFRC522_ToCard+0xa2>
	{
	SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	200d      	movs	r0, #13
 80006b4:	f7ff ff08 	bl	80004c8 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006bc:	61bb      	str	r3, [r7, #24]
	do
	{
	// CommIrqReg[7..0]
	// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
	n = Read_MFRC522(CommIrqReg);
 80006be:	2004      	movs	r0, #4
 80006c0:	f7ff fec4 	bl	800044c <Read_MFRC522>
 80006c4:	4603      	mov	r3, r0
 80006c6:	773b      	strb	r3, [r7, #28]
	i--;
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <MFRC522_ToCard+0xd4>
 80006d4:	7f3b      	ldrb	r3, [r7, #28]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <MFRC522_ToCard+0xd4>
 80006de:	7f3a      	ldrb	r2, [r7, #28]
 80006e0:	7f7b      	ldrb	r3, [r7, #29]
 80006e2:	4013      	ands	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0e9      	beq.n	80006be <MFRC522_ToCard+0xa8>

	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	200d      	movs	r0, #13
 80006ee:	f7ff ff06 	bl	80004fe <ClearBitMask>

	if (i != 0)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d04f      	beq.n	8000798 <MFRC522_ToCard+0x182>
	{
		if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80006f8:	2006      	movs	r0, #6
 80006fa:	f7ff fea7 	bl	800044c <Read_MFRC522>
 80006fe:	4603      	mov	r3, r0
 8000700:	f003 031b 	and.w	r3, r3, #27
 8000704:	2b00      	cmp	r3, #0
 8000706:	d147      	bne.n	8000798 <MFRC522_ToCard+0x182>
		{
		  status = MI_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
		  if (n & irqEn & 0x01)
 800070c:	7f3a      	ldrb	r2, [r7, #28]
 800070e:	7fbb      	ldrb	r3, [r7, #30]
 8000710:	4013      	ands	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MFRC522_ToCard+0x10a>
		  {
			status = MI_NOTAGERR;             // ??
 800071c:	2301      	movs	r3, #1
 800071e:	77fb      	strb	r3, [r7, #31]
		  }

		  if (command == PCD_TRANSCEIVE)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b0c      	cmp	r3, #12
 8000724:	d138      	bne.n	8000798 <MFRC522_ToCard+0x182>
		  {
			n = Read_MFRC522(FIFOLevelReg);
 8000726:	200a      	movs	r0, #10
 8000728:	f7ff fe90 	bl	800044c <Read_MFRC522>
 800072c:	4603      	mov	r3, r0
 800072e:	773b      	strb	r3, [r7, #28]
			lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000730:	200c      	movs	r0, #12
 8000732:	f7ff fe8b 	bl	800044c <Read_MFRC522>
 8000736:	4603      	mov	r3, r0
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	75fb      	strb	r3, [r7, #23]
			if (lastBits)
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <MFRC522_ToCard+0x140>
			{
			  *backLen = (n-1)*8 + lastBits;
 8000744:	7f3b      	ldrb	r3, [r7, #28]
 8000746:	3b01      	subs	r3, #1
 8000748:	00da      	lsls	r2, r3, #3
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	4413      	add	r3, r2
 800074e:	461a      	mov	r2, r3
 8000750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e004      	b.n	8000760 <MFRC522_ToCard+0x14a>
			}
			else
			{
			  *backLen = n*8;
 8000756:	7f3b      	ldrb	r3, [r7, #28]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	461a      	mov	r2, r3
 800075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075e:	601a      	str	r2, [r3, #0]
			}

			if (n == 0)
 8000760:	7f3b      	ldrb	r3, [r7, #28]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <MFRC522_ToCard+0x154>
			{
			  n = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	773b      	strb	r3, [r7, #28]
			}
			if (n > MAX_LEN)
 800076a:	7f3b      	ldrb	r3, [r7, #28]
 800076c:	2b10      	cmp	r3, #16
 800076e:	d901      	bls.n	8000774 <MFRC522_ToCard+0x15e>
			{
			  n = MAX_LEN;
 8000770:	2310      	movs	r3, #16
 8000772:	773b      	strb	r3, [r7, #28]
			}

			// Reading the received data in FIFO
			for (i=0; i<n; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	e00a      	b.n	8000790 <MFRC522_ToCard+0x17a>
			{
			  backData[i] = Read_MFRC522(FIFODataReg);
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	18d4      	adds	r4, r2, r3
 8000780:	2009      	movs	r0, #9
 8000782:	f7ff fe63 	bl	800044c <Read_MFRC522>
 8000786:	4603      	mov	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
			for (i=0; i<n; i++)
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	3301      	adds	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	7f3b      	ldrb	r3, [r7, #28]
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3f0      	bcc.n	800077a <MFRC522_ToCard+0x164>
			}
		  }
		}
	}

	return status;
 8000798:	7ffb      	ldrb	r3, [r7, #31]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}

080007a2 <MFRC522_Anticoll>:
 * Input parameters:
 * 					serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af02      	add	r7, sp, #8
 80007a8:	6078      	str	r0, [r7, #4]
	u_char status;
	u_char i;
	u_char serNumCheck=0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	737b      	strb	r3, [r7, #13]
	uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80007ae:	2100      	movs	r1, #0
 80007b0:	200d      	movs	r0, #13
 80007b2:	f7ff fe11 	bl	80003d8 <Write_MFRC522>
	serNum[0] = PICC_ANTICOLL;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2293      	movs	r2, #147	; 0x93
 80007ba:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	2220      	movs	r2, #32
 80007c2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2202      	movs	r2, #2
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	200c      	movs	r0, #12
 80007d2:	f7ff ff20 	bl	8000616 <MFRC522_ToCard>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d118      	bne.n	8000812 <MFRC522_Anticoll+0x70>
	{
		//Check card serial number
		for (i=0; i<4; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	73bb      	strb	r3, [r7, #14]
 80007e4:	e009      	b.n	80007fa <MFRC522_Anticoll+0x58>
		{
		  serNumCheck ^= serNum[i];
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	7b7b      	ldrb	r3, [r7, #13]
 80007f0:	4053      	eors	r3, r2
 80007f2:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	3301      	adds	r3, #1
 80007f8:	73bb      	strb	r3, [r7, #14]
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d9f2      	bls.n	80007e6 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	7b7a      	ldrb	r2, [r7, #13]
 800080a:	429a      	cmp	r2, r3
 800080c:	d001      	beq.n	8000812 <MFRC522_Anticoll+0x70>
		{
		  status = MI_ERR;
 800080e:	2302      	movs	r3, #2
 8000810:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <CalulateCRC>:
 * 					len 	 - the data length
 * 					pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	460b      	mov	r3, r1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	72fb      	strb	r3, [r7, #11]
	u_char i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 800082a:	2104      	movs	r1, #4
 800082c:	2005      	movs	r0, #5
 800082e:	f7ff fe66 	bl	80004fe <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	200a      	movs	r0, #10
 8000836:	f7ff fe47 	bl	80004c8 <SetBitMask>

	//Writing data to the FIFO
	for (i=0; i<len; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e00a      	b.n	8000856 <CalulateCRC+0x3a>
	{
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	2009      	movs	r0, #9
 800084c:	f7ff fdc4 	bl	80003d8 <Write_MFRC522>
	for (i=0; i<len; i++)
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	3301      	adds	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]
 8000856:	7dfa      	ldrb	r2, [r7, #23]
 8000858:	7afb      	ldrb	r3, [r7, #11]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3f0      	bcc.n	8000840 <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 800085e:	2103      	movs	r1, #3
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fdb9 	bl	80003d8 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 800086a:	2005      	movs	r0, #5
 800086c:	f7ff fdee 	bl	800044c <Read_MFRC522>
 8000870:	4603      	mov	r3, r0
 8000872:	75bb      	strb	r3, [r7, #22]
		i--;
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3b01      	subs	r3, #1
 8000878:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d004      	beq.n	800088a <CalulateCRC+0x6e>
 8000880:	7dbb      	ldrb	r3, [r7, #22]
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0ef      	beq.n	800086a <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 800088a:	2022      	movs	r0, #34	; 0x22
 800088c:	f7ff fdde 	bl	800044c <Read_MFRC522>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	1c5c      	adds	r4, r3, #1
 800089c:	2021      	movs	r0, #33	; 0x21
 800089e:	f7ff fdd5 	bl	800044c <Read_MFRC522>
 80008a2:	4603      	mov	r3, r0
 80008a4:	7023      	strb	r3, [r4, #0]
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}

080008ae <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af02      	add	r7, sp, #8
	u_char status;
	uint unLen;
	u_char buff[4];

	buff[0] = PICC_HALT;
 80008b4:	2350      	movs	r3, #80	; 0x50
 80008b6:	713b      	strb	r3, [r7, #4]
	buff[1] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	717b      	strb	r3, [r7, #5]
	CalulateCRC(buff, 2, &buff[2]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	1c9a      	adds	r2, r3, #2
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffa9 	bl	800081c <CalulateCRC>

	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	1d39      	adds	r1, r7, #4
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4613      	mov	r3, r2
 80008d6:	2204      	movs	r2, #4
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff fe9c 	bl	8000616 <MFRC522_ToCard>
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
	UNUSED(status);
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_ADC_ConvCpltCallback>:
/* ---------  Variables de estado ------------*/
static ADC_HandleTypeDef* adc;
/* ===========================================*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	BaseType_t pxTaskWoken;
	cambiar_punteros();
 80008f4:	f000 f85a 	bl	80009ac <cambiar_punteros>
	xSemaphoreGiveFromISR(sem_DMA,&pxTaskWoken);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fe6a 	bl	80075dc <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(pxTaskWoken);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d007      	beq.n	800091e <HAL_ADC_ConvCpltCallback+0x32>
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_ADC_ConvCpltCallback+0x40>)
 8000910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	f3bf 8f6f 	isb	sy
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20003d28 	.word	0x20003d28
 800092c:	e000ed04 	.word	0xe000ed04

08000930 <inic_punteros>:


void inic_punteros(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	memset(datos_adc_1,0,sizeof(datos_adc_1));
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	2100      	movs	r1, #0
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <inic_punteros+0x28>)
 800093a:	f008 fd29 	bl	8009390 <memset>
	memset(datos_adc_2,0,sizeof(datos_adc_2));
 800093e:	2240      	movs	r2, #64	; 0x40
 8000940:	2100      	movs	r1, #0
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <inic_punteros+0x2c>)
 8000944:	f008 fd24 	bl	8009390 <memset>
	datos_adc_dma = datos_adc_1;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <inic_punteros+0x30>)
 800094a:	4a03      	ldr	r2, [pc, #12]	; (8000958 <inic_punteros+0x28>)
 800094c:	601a      	str	r2, [r3, #0]
	datos_adc_uso = datos_adc_2;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <inic_punteros+0x34>)
 8000950:	4a02      	ldr	r2, [pc, #8]	; (800095c <inic_punteros+0x2c>)
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20003d94 	.word	0x20003d94
 800095c:	20003c70 	.word	0x20003c70
 8000960:	20003dd4 	.word	0x20003dd4
 8000964:	20003d8c 	.word	0x20003d8c

08000968 <adc_init>:

void adc_init(ADC_HandleTypeDef* handler)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	adc = handler;
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <adc_init+0x3c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
	HAL_ADCEx_Calibration_Start(adc);
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <adc_init+0x3c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f002 f9ee 	bl	8002d5c <HAL_ADCEx_Calibration_Start>
	HAL_Delay(100);
 8000980:	2064      	movs	r0, #100	; 0x64
 8000982:	f001 fe05 	bl	8002590 <HAL_Delay>
	inic_punteros();
 8000986:	f7ff ffd3 	bl	8000930 <inic_punteros>
	adc_buffer.power_supply = 0xFFFFFFFF;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <adc_init+0x40>)
 800098c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000990:	601a      	str	r2, [r3, #0]
	adc_buffer.batt = 0xFFFFFFFF;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <adc_init+0x40>)
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000998:	605a      	str	r2, [r3, #4]

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	20003d84 	.word	0x20003d84

080009ac <cambiar_punteros>:


void cambiar_punteros(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	if(datos_adc_dma == datos_adc_1)
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <cambiar_punteros+0x30>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <cambiar_punteros+0x34>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <cambiar_punteros+0x1c>
	{
		datos_adc_dma = datos_adc_2;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <cambiar_punteros+0x30>)
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <cambiar_punteros+0x38>)
 80009be:	601a      	str	r2, [r3, #0]
		datos_adc_uso = datos_adc_1;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <cambiar_punteros+0x3c>)
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <cambiar_punteros+0x34>)
 80009c4:	601a      	str	r2, [r3, #0]
	else
	{
		datos_adc_dma = datos_adc_1;
		datos_adc_uso = datos_adc_2;
	}
}
 80009c6:	e005      	b.n	80009d4 <cambiar_punteros+0x28>
		datos_adc_dma = datos_adc_1;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <cambiar_punteros+0x30>)
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <cambiar_punteros+0x34>)
 80009cc:	601a      	str	r2, [r3, #0]
		datos_adc_uso = datos_adc_2;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <cambiar_punteros+0x3c>)
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <cambiar_punteros+0x38>)
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20003dd4 	.word	0x20003dd4
 80009e0:	20003d94 	.word	0x20003d94
 80009e4:	20003c70 	.word	0x20003c70
 80009e8:	20003d8c 	.word	0x20003d8c

080009ec <tarea_conversiones>:


void tarea_conversiones(void *p)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_ADC_Start_DMA(adc, (uint32_t*)datos_adc_dma, N_SAMPLES);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <tarea_conversiones+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <tarea_conversiones+0x24>)
 80009fa:	6811      	ldr	r1, [r2, #0]
 80009fc:	2220      	movs	r2, #32
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fec2 	bl	8002788 <HAL_ADC_Start_DMA>
		vTaskDelay(TS_MS);
 8000a04:	200a      	movs	r0, #10
 8000a06:	f007 fa27 	bl	8007e58 <vTaskDelay>
		HAL_ADC_Start_DMA(adc, (uint32_t*)datos_adc_dma, N_SAMPLES);
 8000a0a:	e7f3      	b.n	80009f4 <tarea_conversiones+0x8>
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	20003dd4 	.word	0x20003dd4

08000a14 <update_adc>:
	}
}

void update_adc(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	if (xSemaphoreTake(sem_DMA,portMAX_DELAY) == pdTRUE)
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <update_adc+0x80>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 fe68 	bl	80076f8 <xQueueSemaphoreTake>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d12d      	bne.n	8000a8a <update_adc+0x76>
	{
		uint32_t i, x, y;
		x = y = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < N_SAMPLES / 2; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e017      	b.n	8000a6c <update_adc+0x58>
		{
			x += datos_adc_uso[i * 2 + 1];
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <update_adc+0x84>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60bb      	str	r3, [r7, #8]
			y += datos_adc_uso[i * 2 + 0];
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <update_adc+0x84>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	607b      	str	r3, [r7, #4]
		for (i = 0; i < N_SAMPLES / 2; i++)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d9e4      	bls.n	8000a3c <update_adc+0x28>
		}
		x /= N_SAMPLES / 2;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
		y /= N_SAMPLES / 2;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	607b      	str	r3, [r7, #4]
		adc_buffer.power_supply = x;
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <update_adc+0x88>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	6013      	str	r3, [r2, #0]
		adc_buffer.batt = y;
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <update_adc+0x88>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6053      	str	r3, [r2, #4]
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20003d28 	.word	0x20003d28
 8000a98:	20003d8c 	.word	0x20003d8c
 8000a9c:	20003d84 	.word	0x20003d84

08000aa0 <fsm_power_supply>:

void fsm_power_supply(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	static uint8_t state;

	switch(state)
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <fsm_power_supply+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <fsm_power_supply+0x12>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d00c      	beq.n	8000aca <fsm_power_supply+0x2a>
 8000ab0:	e018      	b.n	8000ae4 <fsm_power_supply+0x44>
	{
		case WITH_POWER:
			if (adc_buffer.power_supply < 1000)
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <fsm_power_supply+0x5c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aba:	d217      	bcs.n	8000aec <fsm_power_supply+0x4c>
			{
				save_event(EVENT_POWER_OFF);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f000 fa83 	bl	8000fc8 <save_event>
				state = WITHOUT_POWER;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <fsm_power_supply+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ac8:	e010      	b.n	8000aec <fsm_power_supply+0x4c>
		case WITHOUT_POWER:
			if (adc_buffer.power_supply > 2500)
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <fsm_power_supply+0x5c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d90c      	bls.n	8000af0 <fsm_power_supply+0x50>
			{
				save_event(EVENT_POWER_ON);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fa76 	bl	8000fc8 <save_event>
				state = WITH_POWER;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <fsm_power_supply+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ae2:	e005      	b.n	8000af0 <fsm_power_supply+0x50>

		default:
			state = WITH_POWER;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <fsm_power_supply+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aea:	e002      	b.n	8000af2 <fsm_power_supply+0x52>
			break;
 8000aec:	bf00      	nop
 8000aee:	e000      	b.n	8000af2 <fsm_power_supply+0x52>
			break;
 8000af0:	bf00      	nop
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000a8 	.word	0x200000a8
 8000afc:	20003d84 	.word	0x20003d84

08000b00 <inicializar_arrebote>:


#include "main.h"

void inicializar_arrebote(arrebote *s, uint8_t activo_en_cero, uint16_t debounce)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	803b      	strh	r3, [r7, #0]
	s->debounce = debounce;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	883a      	ldrh	r2, [r7, #0]
 8000b14:	805a      	strh	r2, [r3, #2]
	s->debounce_ticks=0;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
	s->activo_en_cero = (activo_en_cero)?1:0;
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	71da      	strb	r2, [r3, #7]
	s->estado = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	711a      	strb	r2, [r3, #4]
	s->estado_pin = (uint8_t)BTN_LIBRE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	715a      	strb	r2, [r3, #5]
	s->estado_anterior_pin = (uint8_t)BTN_PRESIONADO;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	719a      	strb	r2, [r3, #6]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
	...

08000b4c <chequear_arrebote>:

void chequear_arrebote(arrebote *s, uint32_t estado)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	int boton;
	boton = (estado) ? 1 : 0;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	60fb      	str	r3, [r7, #12]
	boton = boton ^ s->activo_en_cero;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	79db      	ldrb	r3, [r3, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4053      	eors	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

	switch (s->estado)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d866      	bhi.n	8000c46 <chequear_arrebote+0xfa>
 8000b78:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <chequear_arrebote+0x34>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000bb3 	.word	0x08000bb3
 8000b88:	08000be9 	.word	0x08000be9
 8000b8c:	08000c0b 	.word	0x08000c0b
	{
	case 0:
		if (boton)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <chequear_arrebote+0x58>
		{
			s->debounce_ticks = s->debounce;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	885a      	ldrh	r2, [r3, #2]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	801a      	strh	r2, [r3, #0]
			s->estado = 1;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_LIBRE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_LIBRE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	719a      	strb	r2, [r3, #6]
		break;
 8000bb0:	e049      	b.n	8000c46 <chequear_arrebote+0xfa>
	case 1:
		if (!(--(s->debounce_ticks)))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	801a      	strh	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d13c      	bne.n	8000c40 <chequear_arrebote+0xf4>
		{
			if (boton)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d009      	beq.n	8000be0 <chequear_arrebote+0x94>
			{
				s->estado_pin = BTN_PRESIONADO;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_LIBRE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	719a      	strb	r2, [r3, #6]
				s->estado = 2;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 0;
			}
		}
		break;
 8000bde:	e02f      	b.n	8000c40 <chequear_arrebote+0xf4>
				s->estado = 0;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	711a      	strb	r2, [r3, #4]
		break;
 8000be6:	e02b      	b.n	8000c40 <chequear_arrebote+0xf4>
	case 2:
		if (!boton)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d106      	bne.n	8000bfc <chequear_arrebote+0xb0>
		{
			s->debounce_ticks = s->debounce;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	885a      	ldrh	r2, [r3, #2]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	801a      	strh	r2, [r3, #0]
			s->estado = 3;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	711a      	strb	r2, [r3, #4]
		}
		s->estado_pin = BTN_PRESIONADO;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	715a      	strb	r2, [r3, #5]
		s->estado_anterior_pin = BTN_PRESIONADO;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	719a      	strb	r2, [r3, #6]
		break;
 8000c08:	e01d      	b.n	8000c46 <chequear_arrebote+0xfa>
	case 3:
		if (!(--(s->debounce_ticks)))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d112      	bne.n	8000c44 <chequear_arrebote+0xf8>
		{
			if (!boton)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <chequear_arrebote+0xec>
			{
				s->estado_pin = BTN_LIBRE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	715a      	strb	r2, [r3, #5]
				s->estado_anterior_pin = BTN_PRESIONADO;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	719a      	strb	r2, [r3, #6]
				s->estado = 0;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	711a      	strb	r2, [r3, #4]
			else
			{
				s->estado = 2;
			}
		}
		break;
 8000c36:	e005      	b.n	8000c44 <chequear_arrebote+0xf8>
				s->estado = 2;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	711a      	strb	r2, [r3, #4]
		break;
 8000c3e:	e001      	b.n	8000c44 <chequear_arrebote+0xf8>
		break;
 8000c40:	bf00      	nop
 8000c42:	e000      	b.n	8000c46 <chequear_arrebote+0xfa>
		break;
 8000c44:	bf00      	nop
	}
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <hay_flanco_arrebote>:

int hay_flanco_arrebote(arrebote *s)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	return (s->estado_pin == BTN_PRESIONADO) && (s->estado_anterior_pin == BTN_LIBRE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <hay_flanco_arrebote+0x1c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	799b      	ldrb	r3, [r3, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <hay_flanco_arrebote+0x1c>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <hay_flanco_arrebote+0x1e>
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <init_eeprom>:
 * Input Parameters:
 * 					I2C_HandleTypeDef *s - Handler del I2C
 * Return value: None.
 */
void init_eeprom(I2C_HandleTypeDef *s)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	i2c = s;
 8000c80:	4a79      	ldr	r2, [pc, #484]	; (8000e68 <init_eeprom+0x1f0>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
	uint8_t wbuff[EEPROM_PAGE_SIZE];
	uint32_t id;

	// Escribimos toda la memoria con 0xFF
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c8c:	e024      	b.n	8000cd8 <init_eeprom+0x60>
	{
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c94:	e00c      	b.n	8000cb0 <init_eeprom+0x38>
			wbuff[i] = 255;
 8000c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c9e:	4413      	add	r3, r2
 8000ca0:	22ff      	movs	r2, #255	; 0xff
 8000ca2:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000caa:	3301      	adds	r3, #1
 8000cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cb4:	2b07      	cmp	r3, #7
 8000cb6:	d9ee      	bls.n	8000c96 <init_eeprom+0x1e>
		eeprom_write_page(page, 0, wbuff, EEPROM_PAGE_SIZE);
 8000cb8:	f107 0218 	add.w	r2, r7, #24
 8000cbc:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f000 f930 	bl	8000f28 <eeprom_write_page>
		HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f001 fc61 	bl	8002590 <HAL_Delay>
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	d9d6      	bls.n	8000c8e <init_eeprom+0x16>
	}

	// Cargo valores por default de Signature
	memcpy(wbuff, "tecnicas",8);
 8000ce0:	4a62      	ldr	r2, [pc, #392]	; (8000e6c <init_eeprom+0x1f4>)
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cea:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(ID_INIT_PAGE, 0, wbuff, EEPROM_PAGE_SIZE);
 8000cee:	f107 0218 	add.w	r2, r7, #24
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f916 	bl	8000f28 <eeprom_write_page>
	HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f001 fc47 	bl	8002590 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d08:	e00c      	b.n	8000d24 <init_eeprom+0xac>
		wbuff[i] = 0;
 8000d0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d12:	4413      	add	r3, r2
 8000d14:	2200      	movs	r2, #0
 8000d16:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d9ee      	bls.n	8000d0a <init_eeprom+0x92>

	memcpy(wbuff, "digitale",8);
 8000d2c:	4a50      	ldr	r2, [pc, #320]	; (8000e70 <init_eeprom+0x1f8>)
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d36:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(ID_INIT_PAGE+1, 0, wbuff, EEPROM_PAGE_SIZE);
 8000d3a:	f107 0218 	add.w	r2, r7, #24
 8000d3e:	2308      	movs	r3, #8
 8000d40:	2100      	movs	r1, #0
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 f8f0 	bl	8000f28 <eeprom_write_page>
	HAL_Delay(10);
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f001 fc21 	bl	8002590 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d54:	e00c      	b.n	8000d70 <init_eeprom+0xf8>
		wbuff[i] = 0;
 8000d56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d5e:	4413      	add	r3, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d9ee      	bls.n	8000d56 <init_eeprom+0xde>

	// Cargo valor por default de password
	memcpy(clave, "1234", 4);
 8000d78:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <init_eeprom+0x1fc>)
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <init_eeprom+0x200>)
 8000d7c:	6810      	ldr	r0, [r2, #0]
 8000d7e:	6018      	str	r0, [r3, #0]
	memcpy(wbuff, "1234XXXX", 8);
 8000d80:	4a3e      	ldr	r2, [pc, #248]	; (8000e7c <init_eeprom+0x204>)
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8a:	e883 0003 	stmia.w	r3, {r0, r1}
	eeprom_write_page(PASS_INIT_PAGE, 0, wbuff, EEPROM_PAGE_SIZE);
 8000d8e:	f107 0218 	add.w	r2, r7, #24
 8000d92:	2308      	movs	r3, #8
 8000d94:	2100      	movs	r1, #0
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 f8c6 	bl	8000f28 <eeprom_write_page>
	HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f001 fbf7 	bl	8002590 <HAL_Delay>

	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000da8:	e00c      	b.n	8000dc4 <init_eeprom+0x14c>
		wbuff[i] = 0;
 8000daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000db2:	4413      	add	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc8:	2b07      	cmp	r3, #7
 8000dca:	d9ee      	bls.n	8000daa <init_eeprom+0x132>

	// Cargo valor por default de Tarjeta ID
	id = (uint32_t)( 2 << 24 | 50 << 16 | 121 << 8 | 195 );	// ID tarjeta blanca
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <init_eeprom+0x208>)
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
	memcpy(wbuff, &id , 4);	// Nota: Debido al endianess, se guarda LSB primero
 8000dd2:	61bb      	str	r3, [r7, #24]
	eeprom_write_page(RFID_INIT_PAGE, 0, wbuff, 4);
 8000dd4:	f107 0218 	add.w	r2, r7, #24
 8000dd8:	2304      	movs	r3, #4
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f8a3 	bl	8000f28 <eeprom_write_page>
	HAL_Delay(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f001 fbd4 	bl	8002590 <HAL_Delay>
	id = (uint32_t)( 176 << 24 | 166 << 16 | 1 << 8 | 105 );	// ID llavero
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <init_eeprom+0x20c>)
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
	memcpy(wbuff, &id , 4);	// Nota: Debido al endianess, se guarda LSB primero
 8000dee:	61bb      	str	r3, [r7, #24]
	eeprom_write_page(RFID_INIT_PAGE, 4, wbuff, 4);
 8000df0:	f107 0218 	add.w	r2, r7, #24
 8000df4:	2304      	movs	r3, #4
 8000df6:	2104      	movs	r1, #4
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f895 	bl	8000f28 <eeprom_write_page>
	HAL_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f001 fbc6 	bl	8002590 <HAL_Delay>

	uint8_t rbuff[EEPROM_PAGE_SIZE];
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000e0a:	e024      	b.n	8000e56 <init_eeprom+0x1de>
	{
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000e12:	e00c      	b.n	8000e2e <init_eeprom+0x1b6>
			rbuff[i] = 0;
 8000e14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; i++)
 8000e24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000e2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d9ee      	bls.n	8000e14 <init_eeprom+0x19c>
		eeprom_read_page(page, 0, rbuff, EEPROM_PAGE_SIZE);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000e3e:	2308      	movs	r3, #8
 8000e40:	2100      	movs	r1, #0
 8000e42:	f000 f89a 	bl	8000f7a <eeprom_read_page>
		HAL_Delay(10);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f001 fba2 	bl	8002590 <HAL_Delay>
	for (uint8_t page = 0; page < EEPROM_TOTAL_PAGES; page++)
 8000e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000e56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e5a:	2b1f      	cmp	r3, #31
 8000e5c:	d9d6      	bls.n	8000e0c <init_eeprom+0x194>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000ac 	.word	0x200000ac
 8000e6c:	0800953c 	.word	0x0800953c
 8000e70:	08009548 	.word	0x08009548
 8000e74:	20003ea0 	.word	0x20003ea0
 8000e78:	08009554 	.word	0x08009554
 8000e7c:	0800955c 	.word	0x0800955c
 8000e80:	023279c3 	.word	0x023279c3
 8000e84:	b0a60169 	.word	0xb0a60169

08000e88 <write_eeprom>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t write_eeprom(uint8_t addr, uint8_t* data, uint8_t size)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]

	ret =  HAL_I2C_Mem_Write(i2c, EEPROM_ADDRESS_I2C,
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <write_eeprom+0x4c>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	9102      	str	r1, [sp, #8]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	21a0      	movs	r1, #160	; 0xa0
 8000eb8:	f002 fed8 	bl	8003c6c <HAL_I2C_Mem_Write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
							 addr, I2C_MEMADD_SIZE_8BIT,
							 data, size, HAL_MAX_DELAY);
	if (ret != HAL_OK) return EEPROM_ERROR;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <write_eeprom+0x42>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <write_eeprom+0x44>

	return EEPROM_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000ac 	.word	0x200000ac

08000ed8 <read_eeprom>:
 * Return value:
 * 					EEPROM_OK si funciono la lectura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t read_eeprom(uint8_t addr, uint8_t* rbuff, uint8_t size)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]

	ret =  HAL_I2C_Mem_Read(i2c, EEPROM_ADDRESS_I2C,
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <read_eeprom+0x4c>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	9102      	str	r1, [sp, #8]
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	21a0      	movs	r1, #160	; 0xa0
 8000f08:	f002 ffaa 	bl	8003e60 <HAL_I2C_Mem_Read>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]
							addr, I2C_MEMADD_SIZE_8BIT, rbuff,
							size,  HAL_MAX_DELAY);
	if (ret != HAL_OK) return EEPROM_ERROR;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <read_eeprom+0x42>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <read_eeprom+0x44>

	return EEPROM_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000ac 	.word	0x200000ac

08000f28 <eeprom_write_page>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t eeprom_write_page(uint8_t page, uint8_t offset, uint8_t* data, uint8_t size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	603a      	str	r2, [r7, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	uint8_t addr = EEPROM_INITIAL_ADDR + (page * EEPROM_PAGE_SIZE) + offset;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	4413      	add	r3, r2
 8000f48:	73fb      	strb	r3, [r7, #15]

	if (offset > EEPROM_PAGE_SIZE)	return EEPROM_ERROR;
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d901      	bls.n	8000f54 <eeprom_write_page+0x2c>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00e      	b.n	8000f72 <eeprom_write_page+0x4a>
	if (size > EEPROM_PAGE_SIZE-offset) return EEPROM_ERROR;
 8000f54:	797a      	ldrb	r2, [r7, #5]
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	f1c3 0308 	rsb	r3, r3, #8
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dd01      	ble.n	8000f64 <eeprom_write_page+0x3c>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e006      	b.n	8000f72 <eeprom_write_page+0x4a>
	return write_eeprom(addr, data, size);
 8000f64:	797a      	ldrb	r2, [r7, #5]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff8c 	bl	8000e88 <write_eeprom>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <eeprom_read_page>:
 * Return value:
 * 					EEPROM_OK si funciono la lectura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t eeprom_read_page(uint8_t page, uint8_t offset, uint8_t* rbuff, uint8_t size)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	603a      	str	r2, [r7, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	71bb      	strb	r3, [r7, #6]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	717b      	strb	r3, [r7, #5]
	uint8_t addr = EEPROM_INITIAL_ADDR + (page * EEPROM_PAGE_SIZE);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	73fb      	strb	r3, [r7, #15]

	if (offset > EEPROM_PAGE_SIZE)	return EEPROM_ERROR;
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d901      	bls.n	8000fa0 <eeprom_read_page+0x26>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e00e      	b.n	8000fbe <eeprom_read_page+0x44>
	if (size > EEPROM_PAGE_SIZE-offset) return EEPROM_ERROR;
 8000fa0:	797a      	ldrb	r2, [r7, #5]
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	f1c3 0308 	rsb	r3, r3, #8
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dd01      	ble.n	8000fb0 <eeprom_read_page+0x36>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e006      	b.n	8000fbe <eeprom_read_page+0x44>
	return read_eeprom(addr, rbuff, size);
 8000fb0:	797a      	ldrb	r2, [r7, #5]
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff8e 	bl	8000ed8 <read_eeprom>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <save_event>:
 * Return value:
 * 					EEPROM_OK si funciono la escritura.
 * 					EEPROM_ERROR si no funciono.
 */
uint8_t save_event(uint8_t event)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	static uint8_t mem_pointer_index = 0;
	uint8_t status = EEPROM_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]

	struct eeprom_logs_block data;
	uint8_t page;
	uint8_t offset;

	page = mem_pointer_index / 2;	// Divisio-n entera
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <save_event+0xa4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	73bb      	strb	r3, [r7, #14]
	offset = mem_pointer_index % 2;	// Resto
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <save_event+0xa4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]

	data.evento = event;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	72fb      	strb	r3, [r7, #11]
	data.hora = obtener_tiempo();
 8000fec:	f000 fc5e 	bl	80018ac <obtener_tiempo>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	723a      	strb	r2, [r7, #8]
 8000ff6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ffa:	727a      	strb	r2, [r7, #9]
 8000ffc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001000:	72bb      	strb	r3, [r7, #10]

	xSemaphoreTake(sem_eeprom,portMAX_DELAY);
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <save_event+0xa8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fb74 	bl	80076f8 <xQueueSemaphoreTake>
	status = eeprom_write_page(LOGS_INIT_PAGE+page, offset*4, (uint8_t*) &data, sizeof(data));
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3304      	adds	r3, #4
 8001014:	b2d8      	uxtb	r0, r3
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	f107 0208 	add.w	r2, r7, #8
 8001020:	2304      	movs	r3, #4
 8001022:	f7ff ff81 	bl	8000f28 <eeprom_write_page>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(sem_eeprom);
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <save_event+0xa8>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	f006 f9d4 	bl	80073e0 <xQueueGenericSend>

	mem_pointer_index++;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <save_event+0xa4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <save_event+0xa4>)
 8001042:	701a      	strb	r2, [r3, #0]
	mem_pointer_index %= LOGS_BLOCK_DEPTH*2;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <save_event+0xa4>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	08d3      	lsrs	r3, r2, #3
 800104a:	490a      	ldr	r1, [pc, #40]	; (8001074 <save_event+0xac>)
 800104c:	fba1 3103 	umull	r3, r1, r1, r3
 8001050:	460b      	mov	r3, r1
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a5b      	subs	r3, r3, r1
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <save_event+0xa4>)
 800105e:	701a      	strb	r2, [r3, #0]

	return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000b0 	.word	0x200000b0
 8001070:	20003cb0 	.word	0x20003cb0
 8001074:	24924925 	.word	0x24924925

08001078 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <vApplicationGetIdleTaskMemory+0x28>)
 8001088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800108e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200000b4 	.word	0x200000b4
 80010a4:	20000194 	.word	0x20000194

080010a8 <led_init>:
 */
#include <own_drivers.h>


void led_init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 	LED_OFF);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <led_init+0x20>)
 80010b2:	f002 fb68 	bl	8003786 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,	LED_OFF);
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <led_init+0x24>)
 80010be:	f002 fb62 	bl	8003786 <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <toggle_led>:

void toggle_led(uint8_t led)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	switch(led)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <toggle_led+0x16>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d005      	beq.n	80010f0 <toggle_led+0x20>
 80010e4:	e00a      	b.n	80010fc <toggle_led+0x2c>
	{
		case LED_1:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <toggle_led+0x3c>)
 80010ea:	f002 fb64 	bl	80037b6 <HAL_GPIO_TogglePin>
			break;
 80010ee:	e008      	b.n	8001102 <toggle_led+0x32>
		case LED_2:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <toggle_led+0x40>)
 80010f6:	f002 fb5e 	bl	80037b6 <HAL_GPIO_TogglePin>
			break;
 80010fa:	e002      	b.n	8001102 <toggle_led+0x32>
		default:
			Error_Handler();
 80010fc:	f000 fbd0 	bl	80018a0 <Error_Handler>
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00

08001114 <start_buzzer>:

void start_buzzer(uint32_t ontime, uint32_t offtime, uint8_t ncycles)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	71fb      	strb	r3, [r7, #7]
	uint8_t jj;
	for(jj = 0; jj < ncycles; jj++)
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	e014      	b.n	8001152 <start_buzzer+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <start_buzzer+0x50>)
 8001130:	f002 fb29 	bl	8003786 <HAL_GPIO_WritePin>
		vTaskDelay(ontime);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f006 fe8f 	bl	8007e58 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	4808      	ldr	r0, [pc, #32]	; (8001164 <start_buzzer+0x50>)
 8001142:	f002 fb20 	bl	8003786 <HAL_GPIO_WritePin>
		vTaskDelay(offtime);
 8001146:	68b8      	ldr	r0, [r7, #8]
 8001148:	f006 fe86 	bl	8007e58 <vTaskDelay>
	for(jj = 0; jj < ncycles; jj++)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	3301      	adds	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	7dfa      	ldrb	r2, [r7, #23]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	429a      	cmp	r2, r3
 8001158:	d3e6      	bcc.n	8001128 <start_buzzer+0x14>
	}

}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010c00 	.word	0x40010c00

08001168 <lcd_init>:
/* ===========================================*/



void lcd_init (I2C_HandleTypeDef *s)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	i2c = s;
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <lcd_init+0x8c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]

	// 4 bit initialization
	HAL_Delay(50);  		// wait for >40ms
 8001176:	2032      	movs	r0, #50	; 0x32
 8001178:	f001 fa0a 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x30);
 800117c:	2030      	movs	r0, #48	; 0x30
 800117e:	f000 f83b 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(5);  			// wait for >4.1ms
 8001182:	2005      	movs	r0, #5
 8001184:	f001 fa04 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001188:	2030      	movs	r0, #48	; 0x30
 800118a:	f000 f835 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(1);  			// wait for >100us
 800118e:	2001      	movs	r0, #1
 8001190:	f001 f9fe 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001194:	2030      	movs	r0, #48	; 0x30
 8001196:	f000 f82f 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f001 f9f8 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x20);  	// 4bit mode
 80011a0:	2020      	movs	r0, #32
 80011a2:	f000 f829 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f001 f9f2 	bl	8002590 <HAL_Delay>

	// display initialization
	lcd_send_cmd (0x28); 	// Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f000 f823 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f001 f9ec 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x08); 	//Display on/off control --> D=0,C=0, B=0  ---> display off
 80011b8:	2008      	movs	r0, #8
 80011ba:	f000 f81d 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f001 f9e6 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x01);  	// clear display
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f817 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f001 f9e0 	bl	8002590 <HAL_Delay>
	HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 f9dd 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x06); 	//Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011d6:	2006      	movs	r0, #6
 80011d8:	f000 f80e 	bl	80011f8 <lcd_send_cmd>
	HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f001 f9d7 	bl	8002590 <HAL_Delay>
	lcd_send_cmd (0x0C); 	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011e2:	200c      	movs	r0, #12
 80011e4:	f000 f808 	bl	80011f8 <lcd_send_cmd>
	lcd_clear ();
 80011e8:	f000 f836 	bl	8001258 <lcd_clear>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000294 	.word	0x20000294

080011f8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f023 030f 	bic.w	r3, r3, #15
 8001208:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	f043 030c 	orr.w	r3, r3, #12
 8001216:	b2db      	uxtb	r3, r3
 8001218:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	b2db      	uxtb	r3, r3
 8001222:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	f043 030c 	orr.w	r3, r3, #12
 800122a:	b2db      	uxtb	r3, r3
 800122c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c, LCD_ADDRESS_I2C,(uint8_t *) data_t, 4, 100);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <lcd_send_cmd+0x5c>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2304      	movs	r3, #4
 8001246:	214e      	movs	r1, #78	; 0x4e
 8001248:	f002 fc12 	bl	8003a70 <HAL_I2C_Master_Transmit>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000294 	.word	0x20000294

08001258 <lcd_clear>:
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (i2c, LCD_ADDRESS_I2C,(uint8_t *) data_t, 4, 100);
}

void lcd_clear (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01);  // clear display
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ffcb 	bl	80011f8 <lcd_send_cmd>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f001 f95d 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f8cf 	bl	8001414 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8001276:	2003      	movs	r0, #3
 8001278:	f001 fec6 	bl	8003008 <HAL_NVIC_SetPriorityGrouping>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 fa42 	bl	8001704 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f000 fa22 	bl	80016c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001284:	f000 f926 	bl	80014d4 <MX_ADC1_Init>
  MX_RTC_Init();
 8001288:	f000 f9a0 	bl	80015cc <MX_RTC_Init>
  MX_USART1_UART_Init();
 800128c:	f000 f9f0 	bl	8001670 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001290:	f000 f96e 	bl	8001570 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001294:	f000 f9b6 	bl	8001604 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f001 f979 	bl	8002590 <HAL_Delay>
  MFRC522_Init(&hspi2, SPI_NSS_GPIO_Port, SPI_NSS_Pin);
 800129e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a2:	4948      	ldr	r1, [pc, #288]	; (80013c4 <main+0x15c>)
 80012a4:	4848      	ldr	r0, [pc, #288]	; (80013c8 <main+0x160>)
 80012a6:	f7ff f95b 	bl	8000560 <MFRC522_Init>
  led_init();
 80012aa:	f7ff fefd 	bl	80010a8 <led_init>
  init_teclado();
 80012ae:	f001 f8a3 	bl	80023f8 <init_teclado>
  init_eeprom(&hi2c1);
 80012b2:	4846      	ldr	r0, [pc, #280]	; (80013cc <main+0x164>)
 80012b4:	f7ff fce0 	bl	8000c78 <init_eeprom>
  lcd_init (&hi2c1);
 80012b8:	4844      	ldr	r0, [pc, #272]	; (80013cc <main+0x164>)
 80012ba:	f7ff ff55 	bl	8001168 <lcd_init>
  adc_init (&hadc1);
 80012be:	4844      	ldr	r0, [pc, #272]	; (80013d0 <main+0x168>)
 80012c0:	f7ff fb52 	bl	8000968 <adc_init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  sem_state = xSemaphoreCreateMutex();
 80012c4:	2001      	movs	r0, #1
 80012c6:	f006 f872 	bl	80073ae <xQueueCreateMutex>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <main+0x16c>)
 80012ce:	6013      	str	r3, [r2, #0]
  sem_clave = xSemaphoreCreateMutex();
 80012d0:	2001      	movs	r0, #1
 80012d2:	f006 f86c 	bl	80073ae <xQueueCreateMutex>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <main+0x170>)
 80012da:	6013      	str	r3, [r2, #0]
  sem_eeprom = xSemaphoreCreateMutex();
 80012dc:	2001      	movs	r0, #1
 80012de:	f006 f866 	bl	80073ae <xQueueCreateMutex>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <main+0x174>)
 80012e6:	6013      	str	r3, [r2, #0]
  sem_DMA = xSemaphoreCreateBinary();
 80012e8:	2203      	movs	r2, #3
 80012ea:	2100      	movs	r1, #0
 80012ec:	2001      	movs	r0, #1
 80012ee:	f005 ffe7 	bl	80072c0 <xQueueGenericCreate>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <main+0x178>)
 80012f6:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(sem_DMA,0);
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <main+0x178>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f006 f9fa 	bl	80076f8 <xQueueSemaphoreTake>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <main+0x17c>)
 8001306:	1d3c      	adds	r4, r7, #4
 8001308:	461d      	mov	r5, r3
 800130a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fe58 	bl	8006fd0 <osThreadCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <main+0x180>)
 8001324:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
    if(xTaskCreate(checkear_teclado,
 8001326:	2300      	movs	r3, #0
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	2301      	movs	r3, #1
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	492e      	ldr	r1, [pc, #184]	; (80013ec <main+0x184>)
 8001334:	482e      	ldr	r0, [pc, #184]	; (80013f0 <main+0x188>)
 8001336:	f006 fc48 	bl	8007bca <xTaskCreate>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d001      	beq.n	8001344 <main+0xdc>
    		  	  "checkear_teclado",
  			  configMINIMAL_STACK_SIZE,
    			  NULL,
    			  1,
    			  NULL)!= pdPASS) Error_Handler();
 8001340:	f000 faae 	bl	80018a0 <Error_Handler>
    if(xTaskCreate(detectar_sensores,
 8001344:	2300      	movs	r3, #0
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	4928      	ldr	r1, [pc, #160]	; (80013f4 <main+0x18c>)
 8001352:	4829      	ldr	r0, [pc, #164]	; (80013f8 <main+0x190>)
 8001354:	f006 fc39 	bl	8007bca <xTaskCreate>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <main+0xfa>
  			  "detectar_sensores",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 800135e:	f000 fa9f 	bl	80018a0 <Error_Handler>
  //			  "lcd_update",
  //			  configMINIMAL_STACK_SIZE,
  //			  NULL,
  //			  1,
  //			  NULL)!= pdPASS) Error_Handler();
    if(xTaskCreate(detectar_rfid,
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2301      	movs	r3, #1
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	4922      	ldr	r1, [pc, #136]	; (80013fc <main+0x194>)
 8001372:	4823      	ldr	r0, [pc, #140]	; (8001400 <main+0x198>)
 8001374:	f006 fc29 	bl	8007bca <xTaskCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <main+0x11a>
    			  "detectar_rfid",
  			  configMINIMAL_STACK_SIZE*4,
    			  NULL,
    			  1,
    			  NULL)!= pdPASS) Error_Handler();
 800137e:	f000 fa8f 	bl	80018a0 <Error_Handler>

    if(xTaskCreate(tarea_conversiones,
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2301      	movs	r3, #1
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	491d      	ldr	r1, [pc, #116]	; (8001404 <main+0x19c>)
 8001390:	481d      	ldr	r0, [pc, #116]	; (8001408 <main+0x1a0>)
 8001392:	f006 fc1a 	bl	8007bca <xTaskCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d001      	beq.n	80013a0 <main+0x138>
  			  "tarea_conversiones",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 800139c:	f000 fa80 	bl	80018a0 <Error_Handler>
    if(xTaskCreate(checkear_power_supply,
 80013a0:	2300      	movs	r3, #0
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	4917      	ldr	r1, [pc, #92]	; (800140c <main+0x1a4>)
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <main+0x1a8>)
 80013b0:	f006 fc0b 	bl	8007bca <xTaskCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <main+0x156>
  			  "checkear_power_supply",
  			  configMINIMAL_STACK_SIZE,
  			  NULL,
  			  1,
  			  NULL)!= pdPASS) Error_Handler();
 80013ba:	f000 fa71 	bl	80018a0 <Error_Handler>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013be:	f005 fe00 	bl	8006fc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <main+0x15a>
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	20003bc0 	.word	0x20003bc0
 80013cc:	20003c18 	.word	0x20003c18
 80013d0:	20003cb4 	.word	0x20003cb4
 80013d4:	20003d90 	.word	0x20003d90
 80013d8:	20003c6c 	.word	0x20003c6c
 80013dc:	20003cb0 	.word	0x20003cb0
 80013e0:	20003d28 	.word	0x20003d28
 80013e4:	080095d8 	.word	0x080095d8
 80013e8:	20003bbc 	.word	0x20003bbc
 80013ec:	08009574 	.word	0x08009574
 80013f0:	08001d7d 	.word	0x08001d7d
 80013f4:	08009588 	.word	0x08009588
 80013f8:	080022a5 	.word	0x080022a5
 80013fc:	0800959c 	.word	0x0800959c
 8001400:	08002255 	.word	0x08002255
 8001404:	080095ac 	.word	0x080095ac
 8001408:	080009ed 	.word	0x080009ed
 800140c:	080095c0 	.word	0x080095c0
 8001410:	08002355 	.word	0x08002355

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	2228      	movs	r2, #40	; 0x28
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 ffb4 	bl	8009390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001444:	2309      	movs	r3, #9
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001452:	2301      	movs	r3, #1
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fb46 	bl	8004b00 <HAL_RCC_OscConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800147a:	f000 fa11 	bl	80018a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2102      	movs	r1, #2
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fdb2 	bl	8005004 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014a6:	f000 f9fb 	bl	80018a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80014aa:	2303      	movs	r3, #3
 80014ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ff6b 	bl	8005398 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80014c8:	f000 f9ea 	bl	80018a0 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	; 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_ADC1_Init+0x94>)
 80014e6:	4a21      	ldr	r2, [pc, #132]	; (800156c <MX_ADC1_Init+0x98>)
 80014e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_ADC1_Init+0x94>)
 80014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_ADC1_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_ADC1_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_ADC1_Init+0x94>)
 8001500:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001504:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_ADC1_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_ADC1_Init+0x94>)
 800150e:	2202      	movs	r2, #2
 8001510:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <MX_ADC1_Init+0x94>)
 8001514:	f001 f860 	bl	80025d8 <HAL_ADC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800151e:	f000 f9bf 	bl	80018a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001526:	2301      	movs	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_ADC1_Init+0x94>)
 8001534:	f001 fa18 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 f9af 	bl	80018a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_ADC1_Init+0x94>)
 8001550:	f001 fa0a 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800155a:	f000 f9a1 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20003cb4 	.word	0x20003cb4
 800156c:	40012400 	.word	0x40012400

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_I2C1_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C1_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_I2C1_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015ae:	f002 f91b 	bl	80037e8 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 f972 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20003c18 	.word	0x20003c18
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_RTC_Init+0x30>)
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <MX_RTC_Init+0x34>)
 80015d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_RTC_Init+0x30>)
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_RTC_Init+0x30>)
 80015e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_RTC_Init+0x30>)
 80015e8:	f004 f850 	bl	800568c <HAL_RTC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80015f2:	f000 f955 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20003d70 	.word	0x20003d70
 8001600:	40002800 	.word	0x40002800

08001604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_SPI2_Init+0x64>)
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <MX_SPI2_Init+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_SPI2_Init+0x64>)
 8001610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_SPI2_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_SPI2_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_SPI2_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_SPI2_Init+0x64>)
 8001630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001634:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_SPI2_Init+0x64>)
 8001638:	2220      	movs	r2, #32
 800163a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_SPI2_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_SPI2_Init+0x64>)
 8001650:	220a      	movs	r2, #10
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_SPI2_Init+0x64>)
 8001656:	f004 fc0b 	bl	8005e70 <HAL_SPI_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001660:	f000 f91e 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20003bc0 	.word	0x20003bc0
 800166c:	40003800 	.word	0x40003800

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_USART1_UART_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001688:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 80016ac:	f005 fb96 	bl	8006ddc <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80016b6:	f000 f8f3 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20003ce4 	.word	0x20003ce4
 80016c4:	40013800 	.word	0x40013800

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_DMA_Init+0x38>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <MX_DMA_Init+0x38>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6153      	str	r3, [r2, #20]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_DMA_Init+0x38>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	200b      	movs	r0, #11
 80016ec:	f001 fc97 	bl	800301e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f0:	200b      	movs	r0, #11
 80016f2:	f001 fcb0 	bl	8003056 <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <MX_GPIO_Init+0x158>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a4f      	ldr	r2, [pc, #316]	; (800185c <MX_GPIO_Init+0x158>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <MX_GPIO_Init+0x158>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <MX_GPIO_Init+0x158>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a49      	ldr	r2, [pc, #292]	; (800185c <MX_GPIO_Init+0x158>)
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <MX_GPIO_Init+0x158>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <MX_GPIO_Init+0x158>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <MX_GPIO_Init+0x158>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <MX_GPIO_Init+0x158>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <MX_GPIO_Init+0x158>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a3d      	ldr	r2, [pc, #244]	; (800185c <MX_GPIO_Init+0x158>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <MX_GPIO_Init+0x158>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	4838      	ldr	r0, [pc, #224]	; (8001860 <MX_GPIO_Init+0x15c>)
 8001780:	f002 f801 	bl	8003786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	216c      	movs	r1, #108	; 0x6c
 8001788:	4836      	ldr	r0, [pc, #216]	; (8001864 <MX_GPIO_Init+0x160>)
 800178a:	f001 fffc 	bl	8003786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	4834      	ldr	r0, [pc, #208]	; (8001864 <MX_GPIO_Init+0x160>)
 8001794:	f001 fff7 	bl	8003786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	4832      	ldr	r0, [pc, #200]	; (8001868 <MX_GPIO_Init+0x164>)
 800179e:	f001 fff2 	bl	8003786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80017a8:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x164>)
 80017aa:	f001 ffec 	bl	8003786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2302      	movs	r3, #2
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	4826      	ldr	r0, [pc, #152]	; (8001860 <MX_GPIO_Init+0x15c>)
 80017c8:	f001 fe42 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80017cc:	23ec      	movs	r3, #236	; 0xec
 80017ce:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	4619      	mov	r1, r3
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <MX_GPIO_Init+0x160>)
 80017e4:	f001 fe34 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12;
 80017e8:	f241 4302 	movw	r3, #5122	; 0x1402
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	4819      	ldr	r0, [pc, #100]	; (8001868 <MX_GPIO_Init+0x164>)
 8001802:	f001 fe25 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4812      	ldr	r0, [pc, #72]	; (8001864 <MX_GPIO_Init+0x160>)
 800181c:	f001 fe18 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <MX_GPIO_Init+0x160>)
 8001836:	f001 fe0b 	bl	8003450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800183a:	2338      	movs	r3, #56	; 0x38
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	4806      	ldr	r0, [pc, #24]	; (8001868 <MX_GPIO_Init+0x164>)
 800184e:	f001 fdff 	bl	8003450 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	40011000 	.word	0x40011000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00

0800186c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f005 fbf7 	bl	8007068 <osDelay>
 800187a:	e7fb      	b.n	8001874 <StartDefaultTask+0x8>

0800187c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800188e:	f000 fe63 	bl	8002558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012c00 	.word	0x40012c00

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <obtener_tiempo>:
#include "main.h"

extern RTC_HandleTypeDef hrtc;


RTC_TimeTypeDef obtener_tiempo(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef tiempo={0};
 80018b2:	463b      	mov	r3, r7
 80018b4:	2100      	movs	r1, #0
 80018b6:	460a      	mov	r2, r1
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	460a      	mov	r2, r1
 80018bc:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetTime(&hrtc,&tiempo,RTC_FORMAT_BIN);
 80018be:	463b      	mov	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <obtener_tiempo+0x4c>)
 80018c6:	f003 ff77 	bl	80057b8 <HAL_RTC_GetTime>

	return tiempo;
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	463a      	mov	r2, r7
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4611      	mov	r1, r2
 80018d2:	8019      	strh	r1, [r3, #0]
 80018d4:	3302      	adds	r3, #2
 80018d6:	0c12      	lsrs	r2, r2, #16
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	793a      	ldrb	r2, [r7, #4]
 80018de:	f362 0307 	bfi	r3, r2, #0, #8
 80018e2:	797a      	ldrb	r2, [r7, #5]
 80018e4:	f362 230f 	bfi	r3, r2, #8, #8
 80018e8:	79ba      	ldrb	r2, [r7, #6]
 80018ea:	f362 4317 	bfi	r3, r2, #16, #8
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20003d70 	.word	0x20003d70

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_MspInit+0x68>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_MspInit+0x68>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_MspInit+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_MspInit+0x68>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_MspInit+0x68>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x68>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	210f      	movs	r1, #15
 8001936:	f06f 0001 	mvn.w	r0, #1
 800193a:	f001 fb70 	bl	800301e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x6c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_MspInit+0x6c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <HAL_ADC_MspInit+0xbc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d149      	bne.n	8001a20 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019bc:	2303      	movs	r3, #3
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c0:	2303      	movs	r3, #3
 80019c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <HAL_ADC_MspInit+0xc4>)
 80019cc:	f001 fd40 	bl	8003450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019d2:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_ADC_MspInit+0xcc>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a04:	480b      	ldr	r0, [pc, #44]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 8001a06:	f001 fb35 	bl	8003074 <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001a10:	f7ff ff46 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 8001a18:	621a      	str	r2, [r3, #32]
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_ADC_MspInit+0xc8>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012400 	.word	0x40012400
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800
 8001a34:	20003d2c 	.word	0x20003d2c
 8001a38:	40020008 	.word	0x40020008

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_I2C_MspInit+0x90>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d132      	bne.n	8001ac2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7a:	2312      	movs	r3, #18
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <HAL_I2C_MspInit+0x98>)
 8001a8a:	f001 fce1 	bl	8003450 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_I2C_MspInit+0x9c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_I2C_MspInit+0x9c>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_I2C_MspInit+0x94>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40010000 	.word	0x40010000

08001adc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_RTC_MspInit+0x3c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d110      	bne.n	8001b10 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001aee:	f002 fffb 	bl	8004ae8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RTC_MspInit+0x40>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RTC_MspInit+0x40>)
 8001af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RTC_MspInit+0x40>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RTC_MspInit+0x44>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40002800 	.word	0x40002800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	4242043c 	.word	0x4242043c

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d131      	bne.n	8001ba8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	61d3      	str	r3, [r2, #28]
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_SPI_MspInit+0x90>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b74:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001b8a:	f001 fc61 	bl	8003450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_SPI_MspInit+0x94>)
 8001ba4:	f001 fc54 	bl	8003450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40003800 	.word	0x40003800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_UART_MspInit+0xa4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13d      	bne.n	8001c58 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_UART_MspInit+0xa8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4812      	ldr	r0, [pc, #72]	; (8001c68 <HAL_UART_MspInit+0xac>)
 8001c20:	f001 fc16 	bl	8003450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_UART_MspInit+0xac>)
 8001c38:	f001 fc0a 	bl	8003450 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_UART_MspInit+0xb0>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_UART_MspInit+0xb0>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40010000 	.word	0x40010000

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	2019      	movs	r0, #25
 8001c86:	f001 f9ca 	bl	800301e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c8a:	2019      	movs	r0, #25
 8001c8c:	f001 f9e3 	bl	8003056 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca8:	f107 0210 	add.w	r2, r7, #16
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fb22 	bl	80052fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cb8:	f003 fb0c 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8001cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <HAL_InitTick+0xa0>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_InitTick+0xa8>)
 8001cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_InitTick+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_InitTick+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cee:	f004 fe2b 	bl	8006948 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cfa:	f004 fe7d 	bl	80069f8 <HAL_TIM_Base_Start_IT>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3730      	adds	r7, #48	; 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	20003dd8 	.word	0x20003dd8
 8001d18:	40012c00 	.word	0x40012c00

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <NMI_Handler+0x4>

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA1_Channel1_IRQHandler+0x10>)
 8001d4e:	f001 fa4b 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20003d2c 	.word	0x20003d2c

08001d5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM1_UP_IRQHandler+0x10>)
 8001d62:	f004 fe9b 	bl	8006a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20003dd8 	.word	0x20003dd8

08001d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <checkear_teclado>:
 * ======== checkear_teclado =============
 * Tarea global.
 *
 *
 */
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint8_t tecla[LARGO_CLAVE+1] = {0}; //Cuento el # de cierre
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	733b      	strb	r3, [r7, #12]
	uint8_t i=0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

	uint8_t estado = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73bb      	strb	r3, [r7, #14]

	for(;;){

		//Chequeo si esta la clave y si funciona OK
		if (i == (LARGO_CLAVE+1)){
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d12c      	bne.n	8001df4 <checkear_teclado+0x78>
			i=0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
			if(chequear_clave(tecla) ){
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fae2 	bl	800236c <chequear_clave>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d011      	beq.n	8001dd2 <checkear_teclado+0x56>
				xSemaphoreTake(sem_state,portMAX_DELAY);
 8001dae:	4b95      	ldr	r3, [pc, #596]	; (8002004 <checkear_teclado+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 fc9e 	bl	80076f8 <xQueueSemaphoreTake>
				clave_ok = 1;
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <checkear_teclado+0x28c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(sem_state);
 8001dc2:	4b90      	ldr	r3, [pc, #576]	; (8002004 <checkear_teclado+0x288>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f005 fb08 	bl	80073e0 <xQueueGenericSend>
 8001dd0:	e010      	b.n	8001df4 <checkear_teclado+0x78>
			}
			else{
				xSemaphoreTake(sem_state,portMAX_DELAY);
 8001dd2:	4b8c      	ldr	r3, [pc, #560]	; (8002004 <checkear_teclado+0x288>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 fc8c 	bl	80076f8 <xQueueSemaphoreTake>
				clave_ok = 0;
 8001de0:	4b89      	ldr	r3, [pc, #548]	; (8002008 <checkear_teclado+0x28c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(sem_state);
 8001de6:	4b87      	ldr	r3, [pc, #540]	; (8002004 <checkear_teclado+0x288>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	f005 faf6 	bl	80073e0 <xQueueGenericSend>
			}
		}

		switch(estado){
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	f200 8214 	bhi.w	8002224 <checkear_teclado+0x4a8>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <checkear_teclado+0x88>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001f0d 	.word	0x08001f0d
 8001e0c:	08002035 	.word	0x08002035
 8001e10:	0800212d 	.word	0x0800212d
		case 0:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_SET );
 8001e14:	2201      	movs	r2, #1
 8001e16:	2104      	movs	r1, #4
 8001e18:	487c      	ldr	r0, [pc, #496]	; (800200c <checkear_teclado+0x290>)
 8001e1a:	f001 fcb4 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2108      	movs	r1, #8
 8001e22:	487a      	ldr	r0, [pc, #488]	; (800200c <checkear_teclado+0x290>)
 8001e24:	f001 fcaf 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	4877      	ldr	r0, [pc, #476]	; (800200c <checkear_teclado+0x290>)
 8001e2e:	f001 fcaa 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 8001e32:	2200      	movs	r2, #0
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	4875      	ldr	r0, [pc, #468]	; (800200c <checkear_teclado+0x290>)
 8001e38:	f001 fca5 	bl	8003786 <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[0][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4874      	ldr	r0, [pc, #464]	; (8002010 <checkear_teclado+0x294>)
 8001e40:	f001 fc8a 	bl	8003758 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4872      	ldr	r0, [pc, #456]	; (8002014 <checkear_teclado+0x298>)
 8001e4a:	f7fe fe7f 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][0])){
 8001e4e:	4871      	ldr	r0, [pc, #452]	; (8002014 <checkear_teclado+0x298>)
 8001e50:	f7fe fefe 	bl	8000c50 <hay_flanco_arrebote>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <checkear_teclado+0xf2>
					tecla[i] = '1';
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	f107 0210 	add.w	r2, r7, #16
 8001e60:	4413      	add	r3, r2
 8001e62:	2231      	movs	r2, #49	; 0x31
 8001e64:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[0][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 8001e6e:	2110      	movs	r1, #16
 8001e70:	4867      	ldr	r0, [pc, #412]	; (8002010 <checkear_teclado+0x294>)
 8001e72:	f001 fc71 	bl	8003758 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4867      	ldr	r0, [pc, #412]	; (8002018 <checkear_teclado+0x29c>)
 8001e7c:	f7fe fe66 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][1])){
 8001e80:	4865      	ldr	r0, [pc, #404]	; (8002018 <checkear_teclado+0x29c>)
 8001e82:	f7fe fee5 	bl	8000c50 <hay_flanco_arrebote>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <checkear_teclado+0x124>
					tecla[i] = '2';
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	f107 0210 	add.w	r2, r7, #16
 8001e92:	4413      	add	r3, r2
 8001e94:	2232      	movs	r2, #50	; 0x32
 8001e96:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[0][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	485b      	ldr	r0, [pc, #364]	; (8002010 <checkear_teclado+0x294>)
 8001ea4:	f001 fc58 	bl	8003758 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	485b      	ldr	r0, [pc, #364]	; (800201c <checkear_teclado+0x2a0>)
 8001eae:	f7fe fe4d 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][2]))
 8001eb2:	485a      	ldr	r0, [pc, #360]	; (800201c <checkear_teclado+0x2a0>)
 8001eb4:	f7fe fecc 	bl	8000c50 <hay_flanco_arrebote>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <checkear_teclado+0x156>
				{
					tecla[i] = '3';
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f107 0210 	add.w	r2, r7, #16
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2233      	movs	r2, #51	; 0x33
 8001ec8:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[0][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 8001ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed6:	484d      	ldr	r0, [pc, #308]	; (800200c <checkear_teclado+0x290>)
 8001ed8:	f001 fc3e 	bl	8003758 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	484f      	ldr	r0, [pc, #316]	; (8002020 <checkear_teclado+0x2a4>)
 8001ee2:	f7fe fe33 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[0][3])){
 8001ee6:	484e      	ldr	r0, [pc, #312]	; (8002020 <checkear_teclado+0x2a4>)
 8001ee8:	f7fe feb2 	bl	8000c50 <hay_flanco_arrebote>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <checkear_teclado+0x18a>
					tecla[i] = 'A';
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	f107 0210 	add.w	r2, r7, #16
 8001ef8:	4413      	add	r3, r2
 8001efa:	2241      	movs	r2, #65	; 0x41
 8001efc:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	3301      	adds	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
			}

			estado = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 8001f0a:	e18b      	b.n	8002224 <checkear_teclado+0x4a8>
		case 1:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2104      	movs	r1, #4
 8001f10:	483e      	ldr	r0, [pc, #248]	; (800200c <checkear_teclado+0x290>)
 8001f12:	f001 fc38 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_SET );
 8001f16:	2201      	movs	r2, #1
 8001f18:	2108      	movs	r1, #8
 8001f1a:	483c      	ldr	r0, [pc, #240]	; (800200c <checkear_teclado+0x290>)
 8001f1c:	f001 fc33 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 8001f20:	2200      	movs	r2, #0
 8001f22:	2120      	movs	r1, #32
 8001f24:	4839      	ldr	r0, [pc, #228]	; (800200c <checkear_teclado+0x290>)
 8001f26:	f001 fc2e 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2140      	movs	r1, #64	; 0x40
 8001f2e:	4837      	ldr	r0, [pc, #220]	; (800200c <checkear_teclado+0x290>)
 8001f30:	f001 fc29 	bl	8003786 <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[1][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 8001f34:	2120      	movs	r1, #32
 8001f36:	4836      	ldr	r0, [pc, #216]	; (8002010 <checkear_teclado+0x294>)
 8001f38:	f001 fc0e 	bl	8003758 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4838      	ldr	r0, [pc, #224]	; (8002024 <checkear_teclado+0x2a8>)
 8001f42:	f7fe fe03 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][0])){
 8001f46:	4837      	ldr	r0, [pc, #220]	; (8002024 <checkear_teclado+0x2a8>)
 8001f48:	f7fe fe82 	bl	8000c50 <hay_flanco_arrebote>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <checkear_teclado+0x1ea>
					tecla[i] = '4';
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	f107 0210 	add.w	r2, r7, #16
 8001f58:	4413      	add	r3, r2
 8001f5a:	2234      	movs	r2, #52	; 0x34
 8001f5c:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	3301      	adds	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[1][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 8001f66:	2110      	movs	r1, #16
 8001f68:	4829      	ldr	r0, [pc, #164]	; (8002010 <checkear_teclado+0x294>)
 8001f6a:	f001 fbf5 	bl	8003758 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	482d      	ldr	r0, [pc, #180]	; (8002028 <checkear_teclado+0x2ac>)
 8001f74:	f7fe fdea 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][1])){
 8001f78:	482b      	ldr	r0, [pc, #172]	; (8002028 <checkear_teclado+0x2ac>)
 8001f7a:	f7fe fe69 	bl	8000c50 <hay_flanco_arrebote>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <checkear_teclado+0x21c>
					tecla[i] = '5';
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	f107 0210 	add.w	r2, r7, #16
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2235      	movs	r2, #53	; 0x35
 8001f8e:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[1][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 8001f98:	2108      	movs	r1, #8
 8001f9a:	481d      	ldr	r0, [pc, #116]	; (8002010 <checkear_teclado+0x294>)
 8001f9c:	f001 fbdc 	bl	8003758 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	; (800202c <checkear_teclado+0x2b0>)
 8001fa6:	f7fe fdd1 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][2]))
 8001faa:	4820      	ldr	r0, [pc, #128]	; (800202c <checkear_teclado+0x2b0>)
 8001fac:	f7fe fe50 	bl	8000c50 <hay_flanco_arrebote>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <checkear_teclado+0x24e>
				{
					tecla[i] = '6';
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2236      	movs	r2, #54	; 0x36
 8001fc0:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[1][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 8001fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fce:	480f      	ldr	r0, [pc, #60]	; (800200c <checkear_teclado+0x290>)
 8001fd0:	f001 fbc2 	bl	8003758 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4815      	ldr	r0, [pc, #84]	; (8002030 <checkear_teclado+0x2b4>)
 8001fda:	f7fe fdb7 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[1][3])){
 8001fde:	4814      	ldr	r0, [pc, #80]	; (8002030 <checkear_teclado+0x2b4>)
 8001fe0:	f7fe fe36 	bl	8000c50 <hay_flanco_arrebote>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <checkear_teclado+0x282>
					tecla[i] = 'B';
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	f107 0210 	add.w	r2, r7, #16
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2242      	movs	r2, #66	; 0x42
 8001ff4:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
			}
			estado = 2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 8002002:	e10f      	b.n	8002224 <checkear_teclado+0x4a8>
 8002004:	20003d90 	.word	0x20003d90
 8002008:	20000298 	.word	0x20000298
 800200c:	40010800 	.word	0x40010800
 8002010:	40010c00 	.word	0x40010c00
 8002014:	20003e20 	.word	0x20003e20
 8002018:	20003e28 	.word	0x20003e28
 800201c:	20003e30 	.word	0x20003e30
 8002020:	20003e38 	.word	0x20003e38
 8002024:	20003e40 	.word	0x20003e40
 8002028:	20003e48 	.word	0x20003e48
 800202c:	20003e50 	.word	0x20003e50
 8002030:	20003e58 	.word	0x20003e58
		case 2:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 8002034:	2200      	movs	r2, #0
 8002036:	2104      	movs	r1, #4
 8002038:	487c      	ldr	r0, [pc, #496]	; (800222c <checkear_teclado+0x4b0>)
 800203a:	f001 fba4 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 800203e:	2200      	movs	r2, #0
 8002040:	2108      	movs	r1, #8
 8002042:	487a      	ldr	r0, [pc, #488]	; (800222c <checkear_teclado+0x4b0>)
 8002044:	f001 fb9f 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_SET );
 8002048:	2201      	movs	r2, #1
 800204a:	2120      	movs	r1, #32
 800204c:	4877      	ldr	r0, [pc, #476]	; (800222c <checkear_teclado+0x4b0>)
 800204e:	f001 fb9a 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_RESET );
 8002052:	2200      	movs	r2, #0
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	4875      	ldr	r0, [pc, #468]	; (800222c <checkear_teclado+0x4b0>)
 8002058:	f001 fb95 	bl	8003786 <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[2][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 800205c:	2120      	movs	r1, #32
 800205e:	4874      	ldr	r0, [pc, #464]	; (8002230 <checkear_teclado+0x4b4>)
 8002060:	f001 fb7a 	bl	8003758 <HAL_GPIO_ReadPin>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	4872      	ldr	r0, [pc, #456]	; (8002234 <checkear_teclado+0x4b8>)
 800206a:	f7fe fd6f 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][0])){
 800206e:	4871      	ldr	r0, [pc, #452]	; (8002234 <checkear_teclado+0x4b8>)
 8002070:	f7fe fdee 	bl	8000c50 <hay_flanco_arrebote>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <checkear_teclado+0x312>
					tecla[i] = '7';
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	f107 0210 	add.w	r2, r7, #16
 8002080:	4413      	add	r3, r2
 8002082:	2237      	movs	r2, #55	; 0x37
 8002084:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	3301      	adds	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[2][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 800208e:	2110      	movs	r1, #16
 8002090:	4867      	ldr	r0, [pc, #412]	; (8002230 <checkear_teclado+0x4b4>)
 8002092:	f001 fb61 	bl	8003758 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	4619      	mov	r1, r3
 800209a:	4867      	ldr	r0, [pc, #412]	; (8002238 <checkear_teclado+0x4bc>)
 800209c:	f7fe fd56 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][1])){
 80020a0:	4865      	ldr	r0, [pc, #404]	; (8002238 <checkear_teclado+0x4bc>)
 80020a2:	f7fe fdd5 	bl	8000c50 <hay_flanco_arrebote>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <checkear_teclado+0x344>
					tecla[i] = '8';
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	4413      	add	r3, r2
 80020b4:	2238      	movs	r2, #56	; 0x38
 80020b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
			}

			chequear_arrebote(&boton[2][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 80020c0:	2108      	movs	r1, #8
 80020c2:	485b      	ldr	r0, [pc, #364]	; (8002230 <checkear_teclado+0x4b4>)
 80020c4:	f001 fb48 	bl	8003758 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4619      	mov	r1, r3
 80020cc:	485b      	ldr	r0, [pc, #364]	; (800223c <checkear_teclado+0x4c0>)
 80020ce:	f7fe fd3d 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][2]))
 80020d2:	485a      	ldr	r0, [pc, #360]	; (800223c <checkear_teclado+0x4c0>)
 80020d4:	f7fe fdbc 	bl	8000c50 <hay_flanco_arrebote>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <checkear_teclado+0x376>
				{
					tecla[i] = '9';
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	4413      	add	r3, r2
 80020e6:	2239      	movs	r2, #57	; 0x39
 80020e8:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	3301      	adds	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[2][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 80020f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f6:	484d      	ldr	r0, [pc, #308]	; (800222c <checkear_teclado+0x4b0>)
 80020f8:	f001 fb2e 	bl	8003758 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	484f      	ldr	r0, [pc, #316]	; (8002240 <checkear_teclado+0x4c4>)
 8002102:	f7fe fd23 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[2][3])){
 8002106:	484e      	ldr	r0, [pc, #312]	; (8002240 <checkear_teclado+0x4c4>)
 8002108:	f7fe fda2 	bl	8000c50 <hay_flanco_arrebote>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <checkear_teclado+0x3aa>
					tecla[i] = 'C';
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f107 0210 	add.w	r2, r7, #16
 8002118:	4413      	add	r3, r2
 800211a:	2243      	movs	r2, #67	; 0x43
 800211c:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
			}
			estado = 3;
 8002126:	2303      	movs	r3, #3
 8002128:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 800212a:	e07b      	b.n	8002224 <checkear_teclado+0x4a8>
		case 3:
			HAL_GPIO_WritePin(PUERTO_FILA,FILA1,GPIO_PIN_RESET );
 800212c:	2200      	movs	r2, #0
 800212e:	2104      	movs	r1, #4
 8002130:	483e      	ldr	r0, [pc, #248]	; (800222c <checkear_teclado+0x4b0>)
 8002132:	f001 fb28 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA2,GPIO_PIN_RESET );
 8002136:	2200      	movs	r2, #0
 8002138:	2108      	movs	r1, #8
 800213a:	483c      	ldr	r0, [pc, #240]	; (800222c <checkear_teclado+0x4b0>)
 800213c:	f001 fb23 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA3,GPIO_PIN_RESET );
 8002140:	2200      	movs	r2, #0
 8002142:	2120      	movs	r1, #32
 8002144:	4839      	ldr	r0, [pc, #228]	; (800222c <checkear_teclado+0x4b0>)
 8002146:	f001 fb1e 	bl	8003786 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUERTO_FILA,FILA4,GPIO_PIN_SET );
 800214a:	2201      	movs	r2, #1
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	4837      	ldr	r0, [pc, #220]	; (800222c <checkear_teclado+0x4b0>)
 8002150:	f001 fb19 	bl	8003786 <HAL_GPIO_WritePin>
			//Leo las columnas
			chequear_arrebote(&boton[3][0], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA1));
 8002154:	2120      	movs	r1, #32
 8002156:	4836      	ldr	r0, [pc, #216]	; (8002230 <checkear_teclado+0x4b4>)
 8002158:	f001 fafe 	bl	8003758 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	4619      	mov	r1, r3
 8002160:	4838      	ldr	r0, [pc, #224]	; (8002244 <checkear_teclado+0x4c8>)
 8002162:	f7fe fcf3 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][0])){
 8002166:	4837      	ldr	r0, [pc, #220]	; (8002244 <checkear_teclado+0x4c8>)
 8002168:	f7fe fd72 	bl	8000c50 <hay_flanco_arrebote>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <checkear_teclado+0x40a>
					tecla[i] = '*';
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	f107 0210 	add.w	r2, r7, #16
 8002178:	4413      	add	r3, r2
 800217a:	222a      	movs	r2, #42	; 0x2a
 800217c:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	3301      	adds	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[3][1], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA2));
 8002186:	2110      	movs	r1, #16
 8002188:	4829      	ldr	r0, [pc, #164]	; (8002230 <checkear_teclado+0x4b4>)
 800218a:	f001 fae5 	bl	8003758 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	4619      	mov	r1, r3
 8002192:	482d      	ldr	r0, [pc, #180]	; (8002248 <checkear_teclado+0x4cc>)
 8002194:	f7fe fcda 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][1])){
 8002198:	482b      	ldr	r0, [pc, #172]	; (8002248 <checkear_teclado+0x4cc>)
 800219a:	f7fe fd59 	bl	8000c50 <hay_flanco_arrebote>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <checkear_teclado+0x43c>
					tecla[i] = '0';
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f107 0210 	add.w	r2, r7, #16
 80021aa:	4413      	add	r3, r2
 80021ac:	2230      	movs	r2, #48	; 0x30
 80021ae:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3301      	adds	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
			}
			chequear_arrebote(&boton[3][2], HAL_GPIO_ReadPin(PUERTO_COLUMNA123,COLUMNA3));
 80021b8:	2108      	movs	r1, #8
 80021ba:	481d      	ldr	r0, [pc, #116]	; (8002230 <checkear_teclado+0x4b4>)
 80021bc:	f001 facc 	bl	8003758 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4821      	ldr	r0, [pc, #132]	; (800224c <checkear_teclado+0x4d0>)
 80021c6:	f7fe fcc1 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][2]))
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <checkear_teclado+0x4d0>)
 80021cc:	f7fe fd40 	bl	8000c50 <hay_flanco_arrebote>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <checkear_teclado+0x46e>
				{
					tecla[i] = '#';
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	4413      	add	r3, r2
 80021de:	2223      	movs	r2, #35	; 0x23
 80021e0:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	3301      	adds	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
				}
			chequear_arrebote(&boton[3][3], HAL_GPIO_ReadPin(PUERTO_COLUMNA4,COLUMNA4));
 80021ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ee:	480f      	ldr	r0, [pc, #60]	; (800222c <checkear_teclado+0x4b0>)
 80021f0:	f001 fab2 	bl	8003758 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4815      	ldr	r0, [pc, #84]	; (8002250 <checkear_teclado+0x4d4>)
 80021fa:	f7fe fca7 	bl	8000b4c <chequear_arrebote>
			if(hay_flanco_arrebote(&boton[3][3])){
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <checkear_teclado+0x4d4>)
 8002200:	f7fe fd26 	bl	8000c50 <hay_flanco_arrebote>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <checkear_teclado+0x4a2>
					tecla[i] = 'D';
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f107 0210 	add.w	r2, r7, #16
 8002210:	4413      	add	r3, r2
 8002212:	2244      	movs	r2, #68	; 0x44
 8002214:	f803 2c08 	strb.w	r2, [r3, #-8]
					i++;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
			}
			estado = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	73bb      	strb	r3, [r7, #14]
			//vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
			break;
 8002222:	bf00      	nop
		}
		vTaskDelay(DEMORA_LECTURA / portTICK_RATE_MS);
 8002224:	2014      	movs	r0, #20
 8002226:	f005 fe17 	bl	8007e58 <vTaskDelay>
		if (i == (LARGO_CLAVE+1)){
 800222a:	e5b3      	b.n	8001d94 <checkear_teclado+0x18>
 800222c:	40010800 	.word	0x40010800
 8002230:	40010c00 	.word	0x40010c00
 8002234:	20003e60 	.word	0x20003e60
 8002238:	20003e68 	.word	0x20003e68
 800223c:	20003e70 	.word	0x20003e70
 8002240:	20003e78 	.word	0x20003e78
 8002244:	20003e80 	.word	0x20003e80
 8002248:	20003e88 	.word	0x20003e88
 800224c:	20003e90 	.word	0x20003e90
 8002250:	20003e98 	.word	0x20003e98

08002254 <detectar_rfid>:
 * 		IRQ	 ->		--
 * 		GND	 ->		G
 * 		RST	 ->		--
 * 		3.3V -> 	3.3
 */
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint32_t new_id;

	while(1)
	{
		switch(rfid_internal_state)
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <detectar_rfid+0x4c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <detectar_rfid+0x16>
 8002264:	2b01      	cmp	r3, #1
 8002266:	d003      	beq.n	8002270 <detectar_rfid+0x1c>
 8002268:	e015      	b.n	8002296 <detectar_rfid+0x42>
		{
			case WORKING_STATE:
				rfid_toggle_state();
 800226a:	f7fd ffbf 	bl	80001ec <rfid_toggle_state>
				break;
 800226e:	e012      	b.n	8002296 <detectar_rfid+0x42>
			case ADDING_CARD_STATE:
				while( rfid_find_card((uint8_t*) &new_id) != CARD_DETECTED);
 8002270:	bf00      	nop
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f87e 	bl	8000378 <rfid_find_card>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f7      	bne.n	8002272 <detectar_rfid+0x1e>
				status = rfid_add_id(new_id);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fd ff63 	bl	8000150 <rfid_add_id>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
				rfid_internal_state = WORKING_STATE;
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <detectar_rfid+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
				break;
 8002294:	bf00      	nop
		}

		vTaskDelay(10);
 8002296:	200a      	movs	r0, #10
 8002298:	f005 fdde 	bl	8007e58 <vTaskDelay>
		switch(rfid_internal_state)
 800229c:	e7de      	b.n	800225c <detectar_rfid+0x8>
 800229e:	bf00      	nop
 80022a0:	20000299 	.word	0x20000299

080022a4 <detectar_sensores>:
 * ======== detectar_sensores =============
 * Tarea global.
 *
 *
 */
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	// (Dependiendo del estado de la alarma, debe hacer sonar el buzzer)
	uint8_t estado=0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

	for(;;){
		switch(estado){
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <detectar_sensores+0x18>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d025      	beq.n	8002306 <detectar_sensores+0x62>
 80022ba:	e042      	b.n	8002342 <detectar_sensores+0x9e>
		case 0:				//APAGADO
			xSemaphoreTake(sem_state,portMAX_DELAY);
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <detectar_sensores+0xa8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fa17 	bl	80076f8 <xQueueSemaphoreTake>
			if(clave_ok){
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <detectar_sensores+0xac>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <detectar_sensores+0x52>
				estado=1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
				clave_ok = 0; //Bajo el flag
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <detectar_sensores+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
				toggle_led(LED_1);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe fef7 	bl	80010d0 <toggle_led>
				save_event(EVENT_ALARM_ON);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fe70 	bl	8000fc8 <save_event>
				start_buzzer(500, 500, 5);
 80022e8:	2205      	movs	r2, #5
 80022ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f2:	f7fe ff0f 	bl	8001114 <start_buzzer>
			}
			xSemaphoreGive(sem_state);
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <detectar_sensores+0xa8>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	f005 f86e 	bl	80073e0 <xQueueGenericSend>
			break;
 8002304:	e01d      	b.n	8002342 <detectar_sensores+0x9e>

			}
			if(leer_sensor(2)){

			}*/
			xSemaphoreTake(sem_state,portMAX_DELAY);
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <detectar_sensores+0xa8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230e:	4618      	mov	r0, r3
 8002310:	f005 f9f2 	bl	80076f8 <xQueueSemaphoreTake>
			if(clave_ok){
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <detectar_sensores+0xac>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <detectar_sensores+0x8e>
				estado=0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
				clave_ok = 0; //Bajo el flag
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <detectar_sensores+0xac>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				save_event(EVENT_ALARM_OFF);
 8002326:	2001      	movs	r0, #1
 8002328:	f7fe fe4e 	bl	8000fc8 <save_event>
				toggle_led(LED_1);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fecf 	bl	80010d0 <toggle_led>
			}
			xSemaphoreGive(sem_state);
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <detectar_sensores+0xa8>)
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	f005 f850 	bl	80073e0 <xQueueGenericSend>
			break;
 8002340:	bf00      	nop

		}
		vTaskDelay(DEMORA_SENSOR / portTICK_RATE_MS);
 8002342:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002346:	f005 fd87 	bl	8007e58 <vTaskDelay>
		switch(estado){
 800234a:	e7b1      	b.n	80022b0 <detectar_sensores+0xc>
 800234c:	20003d90 	.word	0x20003d90
 8002350:	20000298 	.word	0x20000298

08002354 <checkear_power_supply>:
	}
}

void checkear_power_supply(void *p)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		update_adc();
 800235c:	f7fe fb5a 	bl	8000a14 <update_adc>
		fsm_power_supply();
 8002360:	f7fe fb9e 	bl	8000aa0 <fsm_power_supply>

		vTaskDelay(10);
 8002364:	200a      	movs	r0, #10
 8002366:	f005 fd77 	bl	8007e58 <vTaskDelay>
		update_adc();
 800236a:	e7f7      	b.n	800235c <checkear_power_supply+0x8>

0800236c <chequear_clave>:

/* ---------  Variables de estado ------------*/

/* ===========================================*/

uint8_t chequear_clave(uint8_t *t){
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	uint8_t out = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]

	xSemaphoreTake(sem_clave,portMAX_DELAY);
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <chequear_clave+0x84>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002380:	4618      	mov	r0, r3
 8002382:	f005 f9b9 	bl	80076f8 <xQueueSemaphoreTake>
	if (t[LARGO_CLAVE] == '#'){
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b23      	cmp	r3, #35	; 0x23
 800238e:	d120      	bne.n	80023d2 <chequear_clave+0x66>
		if (t[0]==clave[0] && t[1]==clave[1] && t[2]==clave[2] && t[3]==clave[3]){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <chequear_clave+0x88>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d117      	bne.n	80023cc <chequear_clave+0x60>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3301      	adds	r3, #1
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <chequear_clave+0x88>)
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d110      	bne.n	80023cc <chequear_clave+0x60>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3302      	adds	r3, #2
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <chequear_clave+0x88>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d109      	bne.n	80023cc <chequear_clave+0x60>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3303      	adds	r3, #3
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <chequear_clave+0x88>)
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d102      	bne.n	80023cc <chequear_clave+0x60>
			out = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e004      	b.n	80023d6 <chequear_clave+0x6a>
		}
		else
			out = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e001      	b.n	80023d6 <chequear_clave+0x6a>
	}
	else
		out = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
	xSemaphoreGive(sem_clave);
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <chequear_clave+0x84>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	f004 fffe 	bl	80073e0 <xQueueGenericSend>
	return out;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20003c6c 	.word	0x20003c6c
 80023f4:	20003ea0 	.word	0x20003ea0

080023f8 <init_teclado>:


void init_teclado(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	//Fila 1
	inicializar_arrebote(&boton[0][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2100      	movs	r1, #0
 8002400:	4827      	ldr	r0, [pc, #156]	; (80024a0 <init_teclado+0xa8>)
 8002402:	f7fe fb7d 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002406:	2201      	movs	r2, #1
 8002408:	2100      	movs	r1, #0
 800240a:	4826      	ldr	r0, [pc, #152]	; (80024a4 <init_teclado+0xac>)
 800240c:	f7fe fb78 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002410:	2201      	movs	r2, #1
 8002412:	2100      	movs	r1, #0
 8002414:	4824      	ldr	r0, [pc, #144]	; (80024a8 <init_teclado+0xb0>)
 8002416:	f7fe fb73 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[0][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800241a:	2201      	movs	r2, #1
 800241c:	2100      	movs	r1, #0
 800241e:	4823      	ldr	r0, [pc, #140]	; (80024ac <init_teclado+0xb4>)
 8002420:	f7fe fb6e 	bl	8000b00 <inicializar_arrebote>

	//Fila 2
	inicializar_arrebote(&boton[1][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002424:	2201      	movs	r2, #1
 8002426:	2100      	movs	r1, #0
 8002428:	4821      	ldr	r0, [pc, #132]	; (80024b0 <init_teclado+0xb8>)
 800242a:	f7fe fb69 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800242e:	2201      	movs	r2, #1
 8002430:	2100      	movs	r1, #0
 8002432:	4820      	ldr	r0, [pc, #128]	; (80024b4 <init_teclado+0xbc>)
 8002434:	f7fe fb64 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002438:	2201      	movs	r2, #1
 800243a:	2100      	movs	r1, #0
 800243c:	481e      	ldr	r0, [pc, #120]	; (80024b8 <init_teclado+0xc0>)
 800243e:	f7fe fb5f 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[1][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002442:	2201      	movs	r2, #1
 8002444:	2100      	movs	r1, #0
 8002446:	481d      	ldr	r0, [pc, #116]	; (80024bc <init_teclado+0xc4>)
 8002448:	f7fe fb5a 	bl	8000b00 <inicializar_arrebote>

	//Fila 3
	inicializar_arrebote(&boton[2][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800244c:	2201      	movs	r2, #1
 800244e:	2100      	movs	r1, #0
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <init_teclado+0xc8>)
 8002452:	f7fe fb55 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002456:	2201      	movs	r2, #1
 8002458:	2100      	movs	r1, #0
 800245a:	481a      	ldr	r0, [pc, #104]	; (80024c4 <init_teclado+0xcc>)
 800245c:	f7fe fb50 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002460:	2201      	movs	r2, #1
 8002462:	2100      	movs	r1, #0
 8002464:	4818      	ldr	r0, [pc, #96]	; (80024c8 <init_teclado+0xd0>)
 8002466:	f7fe fb4b 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[2][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800246a:	2201      	movs	r2, #1
 800246c:	2100      	movs	r1, #0
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <init_teclado+0xd4>)
 8002470:	f7fe fb46 	bl	8000b00 <inicializar_arrebote>

	//Fila 4
	inicializar_arrebote(&boton[3][0],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002474:	2201      	movs	r2, #1
 8002476:	2100      	movs	r1, #0
 8002478:	4815      	ldr	r0, [pc, #84]	; (80024d0 <init_teclado+0xd8>)
 800247a:	f7fe fb41 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][1],0,DEMORA_REBOTE/DEMORA_LECTURA);
 800247e:	2201      	movs	r2, #1
 8002480:	2100      	movs	r1, #0
 8002482:	4814      	ldr	r0, [pc, #80]	; (80024d4 <init_teclado+0xdc>)
 8002484:	f7fe fb3c 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][2],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002488:	2201      	movs	r2, #1
 800248a:	2100      	movs	r1, #0
 800248c:	4812      	ldr	r0, [pc, #72]	; (80024d8 <init_teclado+0xe0>)
 800248e:	f7fe fb37 	bl	8000b00 <inicializar_arrebote>
	inicializar_arrebote(&boton[3][3],0,DEMORA_REBOTE/DEMORA_LECTURA);
 8002492:	2201      	movs	r2, #1
 8002494:	2100      	movs	r1, #0
 8002496:	4811      	ldr	r0, [pc, #68]	; (80024dc <init_teclado+0xe4>)
 8002498:	f7fe fb32 	bl	8000b00 <inicializar_arrebote>

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20003e20 	.word	0x20003e20
 80024a4:	20003e28 	.word	0x20003e28
 80024a8:	20003e30 	.word	0x20003e30
 80024ac:	20003e38 	.word	0x20003e38
 80024b0:	20003e40 	.word	0x20003e40
 80024b4:	20003e48 	.word	0x20003e48
 80024b8:	20003e50 	.word	0x20003e50
 80024bc:	20003e58 	.word	0x20003e58
 80024c0:	20003e60 	.word	0x20003e60
 80024c4:	20003e68 	.word	0x20003e68
 80024c8:	20003e70 	.word	0x20003e70
 80024cc:	20003e78 	.word	0x20003e78
 80024d0:	20003e80 	.word	0x20003e80
 80024d4:	20003e88 	.word	0x20003e88
 80024d8:	20003e90 	.word	0x20003e90
 80024dc:	20003e98 	.word	0x20003e98

080024e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e2:	490d      	ldr	r1, [pc, #52]	; (8002518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f8:	4c0a      	ldr	r4, [pc, #40]	; (8002524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002506:	f7ff fc33 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250a:	f006 feff 	bl	800930c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800250e:	f7fe feab 	bl	8001268 <main>
  bx lr
 8002512:	4770      	bx	lr
  ldr r0, =_sdata
 8002514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002518:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800251c:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 8002520:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002524:	20003eb4 	.word	0x20003eb4

08002528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC1_2_IRQHandler>
	...

0800252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_Init+0x28>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_Init+0x28>)
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 fd63 	bl	8003008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	200f      	movs	r0, #15
 8002544:	f7ff fb94 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff f9d8 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_IncTick+0x1c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x20>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a03      	ldr	r2, [pc, #12]	; (8002578 <HAL_IncTick+0x20>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	20000008 	.word	0x20000008
 8002578:	20003ea4 	.word	0x20003ea4

0800257c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <HAL_GetTick+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20003ea4 	.word	0x20003ea4

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff fff0 	bl	800257c <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffe0 	bl	800257c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0be      	b.n	8002778 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f9a8 	bl	800196c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 faf5 	bl	8002c0c <ADC_ConversionStop_Disable>
 8002622:	4603      	mov	r3, r0
 8002624:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8099 	bne.w	8002766 <HAL_ADC_Init+0x18e>
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8095 	bne.w	8002766 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	f043 0202 	orr.w	r2, r3, #2
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002658:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7b1b      	ldrb	r3, [r3, #12]
 800265e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002660:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	4313      	orrs	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d003      	beq.n	800267a <HAL_ADC_Init+0xa2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_ADC_Init+0xa8>
 800267a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267e:	e000      	b.n	8002682 <HAL_ADC_Init+0xaa>
 8002680:	2300      	movs	r3, #0
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7d1b      	ldrb	r3, [r3, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d119      	bne.n	80026c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	3b01      	subs	r3, #1
 800269e:	035a      	lsls	r2, r3, #13
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e00b      	b.n	80026c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_ADC_Init+0x1a8>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d003      	beq.n	80026fe <HAL_ADC_Init+0x126>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d104      	bne.n	8002708 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	3b01      	subs	r3, #1
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_ADC_Init+0x1ac>)
 8002724:	4013      	ands	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	d10b      	bne.n	8002744 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002742:	e018      	b.n	8002776 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f023 0312 	bic.w	r3, r3, #18
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002764:	e007      	b.n	8002776 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	ffe1f7fd 	.word	0xffe1f7fd
 8002784:	ff1f0efe 	.word	0xff1f0efe

08002788 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a64      	ldr	r2, [pc, #400]	; (8002930 <HAL_ADC_Start_DMA+0x1a8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_Start_DMA+0x24>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a63      	ldr	r2, [pc, #396]	; (8002934 <HAL_ADC_Start_DMA+0x1ac>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d106      	bne.n	80027ba <HAL_ADC_Start_DMA+0x32>
 80027ac:	4b60      	ldr	r3, [pc, #384]	; (8002930 <HAL_ADC_Start_DMA+0x1a8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 80b3 	bne.w	8002920 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x40>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0ae      	b.n	8002926 <HAL_ADC_Start_DMA+0x19e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f9c1 	bl	8002b58 <ADC_Enable>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 809a 	bne.w	8002916 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_ADC_Start_DMA+0x1ac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d105      	bne.n	800280c <HAL_ADC_Start_DMA+0x84>
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_ADC_Start_DMA+0x1a8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d115      	bne.n	8002838 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	2b00      	cmp	r3, #0
 8002824:	d026      	beq.n	8002874 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800282e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002836:	e01d      	b.n	8002874 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a39      	ldr	r2, [pc, #228]	; (8002930 <HAL_ADC_Start_DMA+0x1a8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_ADC_Start_DMA+0xd0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a38      	ldr	r2, [pc, #224]	; (8002934 <HAL_ADC_Start_DMA+0x1ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d10d      	bne.n	8002874 <HAL_ADC_Start_DMA+0xec>
 8002858:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_ADC_Start_DMA+0x1a8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800286c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f023 0206 	bic.w	r2, r3, #6
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
 800288c:	e002      	b.n	8002894 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_ADC_Start_DMA+0x1b0>)
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_ADC_Start_DMA+0x1b4>)
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_ADC_Start_DMA+0x1b8>)
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0202 	mvn.w	r2, #2
 80028bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a18      	ldr	r0, [r3, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	334c      	adds	r3, #76	; 0x4c
 80028d8:	4619      	mov	r1, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f000 fc23 	bl	8003128 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028f0:	d108      	bne.n	8002904 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002900:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002902:	e00f      	b.n	8002924 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002912:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002914:	e006      	b.n	8002924 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800291e:	e001      	b.n	8002924 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40012400 	.word	0x40012400
 8002934:	40012800 	.word	0x40012800
 8002938:	08002c8f 	.word	0x08002c8f
 800293c:	08002d0b 	.word	0x08002d0b
 8002940:	08002d27 	.word	0x08002d27

08002944 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x20>
 8002984:	2302      	movs	r3, #2
 8002986:	e0dc      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1da>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d81c      	bhi.n	80029d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b05      	subs	r3, #5
 80029aa:	221f      	movs	r2, #31
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4019      	ands	r1, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	fa00 f203 	lsl.w	r2, r0, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
 80029d0:	e03c      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d81c      	bhi.n	8002a14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b23      	subs	r3, #35	; 0x23
 80029ec:	221f      	movs	r2, #31
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4019      	ands	r1, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b23      	subs	r3, #35	; 0x23
 8002a06:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	e01b      	b.n	8002a4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b41      	subs	r3, #65	; 0x41
 8002a26:	221f      	movs	r2, #31
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4019      	ands	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b41      	subs	r3, #65	; 0x41
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	d91c      	bls.n	8002a8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	3b1e      	subs	r3, #30
 8002a66:	2207      	movs	r2, #7
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4019      	ands	r1, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6898      	ldr	r0, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b1e      	subs	r3, #30
 8002a80:	fa00 f203 	lsl.w	r2, r0, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e019      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4019      	ands	r1, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6898      	ldr	r0, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d003      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ace:	2b11      	cmp	r3, #17
 8002ad0:	d132      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d125      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d126      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002af8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d11a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9a      	lsrs	r2, r3, #18
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x1b2>
 8002b26:	e007      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40012400 	.word	0x40012400
 8002b50:	20000000 	.word	0x20000000
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d040      	beq.n	8002bf8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <ADC_Enable+0xac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <ADC_Enable+0xb0>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	0c9b      	lsrs	r3, r3, #18
 8002b92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b94:	e002      	b.n	8002b9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f9      	bne.n	8002b96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ba2:	f7ff fceb 	bl	800257c <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ba8:	e01f      	b.n	8002bea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002baa:	f7ff fce7 	bl	800257c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d918      	bls.n	8002bea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d011      	beq.n	8002bea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e007      	b.n	8002bfa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d1d8      	bne.n	8002baa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000000 	.word	0x20000000
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d12e      	bne.n	8002c84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c36:	f7ff fca1 	bl	800257c <HAL_GetTick>
 8002c3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c3c:	e01b      	b.n	8002c76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c3e:	f7ff fc9d 	bl	800257c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d914      	bls.n	8002c76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10d      	bne.n	8002c76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	f043 0210 	orr.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e007      	b.n	8002c86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d0dc      	beq.n	8002c3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d127      	bne.n	8002cf8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cbe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cc2:	d115      	bne.n	8002cf0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7fd fdfb 	bl	80008ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cf6:	e004      	b.n	8002d02 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fe13 	bl	8002944 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fe02 	bl	8002956 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADCEx_Calibration_Start+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e095      	b.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x14a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff42 	bl	8002c0c <ADC_ConversionStop_Disable>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 8084 	bne.w	8002e9c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d9c:	f023 0302 	bic.w	r3, r3, #2
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_ADCEx_Calibration_Start+0x154>)
 8002daa:	681c      	ldr	r4, [r3, #0]
 8002dac:	2002      	movs	r0, #2
 8002dae:	f002 fba9 	bl	8005504 <HAL_RCCEx_GetPeriphCLKFreq>
 8002db2:	4603      	mov	r3, r0
 8002db4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002db8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002dba:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002dbc:	e002      	b.n	8002dc4 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f9      	bne.n	8002dbe <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fec4 	bl	8002b58 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002de0:	f7ff fbcc 	bl	800257c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002de6:	e01b      	b.n	8002e20 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002de8:	f7ff fbc8 	bl	800257c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d914      	bls.n	8002e20 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f023 0312 	bic.w	r3, r3, #18
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e042      	b.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1dc      	bne.n	8002de8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0204 	orr.w	r2, r2, #4
 8002e3c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e3e:	f7ff fb9d 	bl	800257c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e44:	e01b      	b.n	8002e7e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e46:	f7ff fb99 	bl	800257c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d914      	bls.n	8002e7e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f023 0312 	bic.w	r3, r3, #18
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e013      	b.n	8002ea6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1dc      	bne.n	8002e46 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <__NVIC_EnableIRQ+0x34>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff4f 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003030:	f7ff ff64 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ffb2 	bl	8002fa4 <NVIC_EncodePriority>
 8003040:	4602      	mov	r2, r0
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff81 	bl	8002f50 <__NVIC_SetPriority>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff57 	bl	8002f18 <__NVIC_EnableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e043      	b.n	8003112 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_DMA_Init+0xa8>)
 8003092:	4413      	add	r3, r2
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <HAL_DMA_Init+0xac>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_DMA_Init+0xb0>)
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	bffdfff8 	.word	0xbffdfff8
 8003120:	cccccccd 	.word	0xcccccccd
 8003124:	40020000 	.word	0x40020000

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Start_IT+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e04a      	b.n	80031de <HAL_DMA_Start_IT+0xb6>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003156:	2b01      	cmp	r3, #1
 8003158:	d13a      	bne.n	80031d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f938 	bl	80033f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 020e 	orr.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e00f      	b.n	80031be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0204 	bic.w	r2, r2, #4
 80031ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 020a 	orr.w	r2, r2, #10
 80031bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e005      	b.n	80031dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2204      	movs	r2, #4
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d04f      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xc8>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <HAL_DMA_IRQHandler+0x1f0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d029      	beq.n	8003296 <HAL_DMA_IRQHandler+0xae>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_DMA_IRQHandler+0x1f4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0xaa>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a63      	ldr	r2, [pc, #396]	; (80033e0 <HAL_DMA_IRQHandler+0x1f8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01a      	beq.n	800328c <HAL_DMA_IRQHandler+0xa4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a62      	ldr	r2, [pc, #392]	; (80033e4 <HAL_DMA_IRQHandler+0x1fc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d012      	beq.n	8003286 <HAL_DMA_IRQHandler+0x9e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a60      	ldr	r2, [pc, #384]	; (80033e8 <HAL_DMA_IRQHandler+0x200>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x98>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5f      	ldr	r2, [pc, #380]	; (80033ec <HAL_DMA_IRQHandler+0x204>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d102      	bne.n	800327a <HAL_DMA_IRQHandler+0x92>
 8003274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003278:	e00e      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 800327a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800327e:	e00b      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 8003280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003284:	e008      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 8003286:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800328a:	e005      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 800328c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003290:	e002      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	e000      	b.n	8003298 <HAL_DMA_IRQHandler+0xb0>
 8003296:	2304      	movs	r3, #4
 8003298:	4a55      	ldr	r2, [pc, #340]	; (80033f0 <HAL_DMA_IRQHandler+0x208>)
 800329a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8094 	beq.w	80033ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032ae:	e08e      	b.n	80033ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2202      	movs	r2, #2
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d056      	beq.n	800336e <HAL_DMA_IRQHandler+0x186>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d051      	beq.n	800336e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 020a 	bic.w	r2, r2, #10
 80032e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_DMA_IRQHandler+0x1f0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d029      	beq.n	800334e <HAL_DMA_IRQHandler+0x166>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a37      	ldr	r2, [pc, #220]	; (80033dc <HAL_DMA_IRQHandler+0x1f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_DMA_IRQHandler+0x162>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a35      	ldr	r2, [pc, #212]	; (80033e0 <HAL_DMA_IRQHandler+0x1f8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x15c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <HAL_DMA_IRQHandler+0x1fc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d012      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_DMA_IRQHandler+0x200>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x150>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_DMA_IRQHandler+0x204>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d102      	bne.n	8003332 <HAL_DMA_IRQHandler+0x14a>
 800332c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003330:	e00e      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 8003332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003336:	e00b      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 8003338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333c:	e008      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 800333e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003342:	e005      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 8003344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003348:	e002      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 800334a:	2320      	movs	r3, #32
 800334c:	e000      	b.n	8003350 <HAL_DMA_IRQHandler+0x168>
 800334e:	2302      	movs	r3, #2
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_DMA_IRQHandler+0x208>)
 8003352:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d034      	beq.n	80033ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800336c:	e02f      	b.n	80033ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2208      	movs	r2, #8
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d028      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x1e8>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020e 	bic.w	r2, r2, #14
 8003396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
    }
  }
  return;
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
}
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40020008 	.word	0x40020008
 80033dc:	4002001c 	.word	0x4002001c
 80033e0:	40020030 	.word	0x40020030
 80033e4:	40020044 	.word	0x40020044
 80033e8:	40020058 	.word	0x40020058
 80033ec:	4002006c 	.word	0x4002006c
 80033f0:	40020000 	.word	0x40020000

080033f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f202 	lsl.w	r2, r1, r2
 8003410:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b10      	cmp	r3, #16
 8003420:	d108      	bne.n	8003434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003432:	e007      	b.n	8003444 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
	...

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003462:	e169      	b.n	8003738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003464:	2201      	movs	r2, #1
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	f040 8158 	bne.w	8003732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4a9a      	ldr	r2, [pc, #616]	; (80036f0 <HAL_GPIO_Init+0x2a0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d05e      	beq.n	800354a <HAL_GPIO_Init+0xfa>
 800348c:	4a98      	ldr	r2, [pc, #608]	; (80036f0 <HAL_GPIO_Init+0x2a0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d875      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 8003492:	4a98      	ldr	r2, [pc, #608]	; (80036f4 <HAL_GPIO_Init+0x2a4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d058      	beq.n	800354a <HAL_GPIO_Init+0xfa>
 8003498:	4a96      	ldr	r2, [pc, #600]	; (80036f4 <HAL_GPIO_Init+0x2a4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d86f      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 800349e:	4a96      	ldr	r2, [pc, #600]	; (80036f8 <HAL_GPIO_Init+0x2a8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d052      	beq.n	800354a <HAL_GPIO_Init+0xfa>
 80034a4:	4a94      	ldr	r2, [pc, #592]	; (80036f8 <HAL_GPIO_Init+0x2a8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d869      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 80034aa:	4a94      	ldr	r2, [pc, #592]	; (80036fc <HAL_GPIO_Init+0x2ac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d04c      	beq.n	800354a <HAL_GPIO_Init+0xfa>
 80034b0:	4a92      	ldr	r2, [pc, #584]	; (80036fc <HAL_GPIO_Init+0x2ac>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d863      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 80034b6:	4a92      	ldr	r2, [pc, #584]	; (8003700 <HAL_GPIO_Init+0x2b0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d046      	beq.n	800354a <HAL_GPIO_Init+0xfa>
 80034bc:	4a90      	ldr	r2, [pc, #576]	; (8003700 <HAL_GPIO_Init+0x2b0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d85d      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 80034c2:	2b12      	cmp	r3, #18
 80034c4:	d82a      	bhi.n	800351c <HAL_GPIO_Init+0xcc>
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d859      	bhi.n	800357e <HAL_GPIO_Init+0x12e>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_GPIO_Init+0x80>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	0800354b 	.word	0x0800354b
 80034d4:	08003525 	.word	0x08003525
 80034d8:	08003537 	.word	0x08003537
 80034dc:	08003579 	.word	0x08003579
 80034e0:	0800357f 	.word	0x0800357f
 80034e4:	0800357f 	.word	0x0800357f
 80034e8:	0800357f 	.word	0x0800357f
 80034ec:	0800357f 	.word	0x0800357f
 80034f0:	0800357f 	.word	0x0800357f
 80034f4:	0800357f 	.word	0x0800357f
 80034f8:	0800357f 	.word	0x0800357f
 80034fc:	0800357f 	.word	0x0800357f
 8003500:	0800357f 	.word	0x0800357f
 8003504:	0800357f 	.word	0x0800357f
 8003508:	0800357f 	.word	0x0800357f
 800350c:	0800357f 	.word	0x0800357f
 8003510:	0800357f 	.word	0x0800357f
 8003514:	0800352d 	.word	0x0800352d
 8003518:	08003541 	.word	0x08003541
 800351c:	4a79      	ldr	r2, [pc, #484]	; (8003704 <HAL_GPIO_Init+0x2b4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003522:	e02c      	b.n	800357e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e029      	b.n	8003580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	3304      	adds	r3, #4
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e024      	b.n	8003580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	3308      	adds	r3, #8
 800353c:	623b      	str	r3, [r7, #32]
          break;
 800353e:	e01f      	b.n	8003580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	330c      	adds	r3, #12
 8003546:	623b      	str	r3, [r7, #32]
          break;
 8003548:	e01a      	b.n	8003580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003552:	2304      	movs	r3, #4
 8003554:	623b      	str	r3, [r7, #32]
          break;
 8003556:	e013      	b.n	8003580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003560:	2308      	movs	r3, #8
 8003562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	611a      	str	r2, [r3, #16]
          break;
 800356a:	e009      	b.n	8003580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800356c:	2308      	movs	r3, #8
 800356e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	615a      	str	r2, [r3, #20]
          break;
 8003576:	e003      	b.n	8003580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003578:	2300      	movs	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
          break;
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x130>
          break;
 800357e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d801      	bhi.n	800358a <HAL_GPIO_Init+0x13a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	e001      	b.n	800358e <HAL_GPIO_Init+0x13e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2bff      	cmp	r3, #255	; 0xff
 8003594:	d802      	bhi.n	800359c <HAL_GPIO_Init+0x14c>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	e002      	b.n	80035a2 <HAL_GPIO_Init+0x152>
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	3b08      	subs	r3, #8
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	210f      	movs	r1, #15
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80b1 	beq.w	8003732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d0:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <HAL_GPIO_Init+0x2b8>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <HAL_GPIO_Init+0x2b8>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_GPIO_Init+0x2b8>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_GPIO_Init+0x2bc>)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a40      	ldr	r2, [pc, #256]	; (8003710 <HAL_GPIO_Init+0x2c0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_GPIO_Init+0x1ec>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <HAL_GPIO_Init+0x2c4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00d      	beq.n	8003638 <HAL_GPIO_Init+0x1e8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3e      	ldr	r2, [pc, #248]	; (8003718 <HAL_GPIO_Init+0x2c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <HAL_GPIO_Init+0x1e4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3d      	ldr	r2, [pc, #244]	; (800371c <HAL_GPIO_Init+0x2cc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_GPIO_Init+0x1e0>
 800362c:	2303      	movs	r3, #3
 800362e:	e006      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003630:	2304      	movs	r3, #4
 8003632:	e004      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003634:	2302      	movs	r3, #2
 8003636:	e002      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_GPIO_Init+0x1ee>
 800363c:	2300      	movs	r3, #0
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	f002 0203 	and.w	r2, r2, #3
 8003644:	0092      	lsls	r2, r2, #2
 8003646:	4093      	lsls	r3, r2
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800364e:	492f      	ldr	r1, [pc, #188]	; (800370c <HAL_GPIO_Init+0x2bc>)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	3302      	adds	r3, #2
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	492c      	ldr	r1, [pc, #176]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e006      	b.n	8003684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	43db      	mvns	r3, r3
 800367e:	4928      	ldr	r1, [pc, #160]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 8003680:	4013      	ands	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4922      	ldr	r1, [pc, #136]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	491e      	ldr	r1, [pc, #120]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4918      	ldr	r1, [pc, #96]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4914      	ldr	r1, [pc, #80]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d021      	beq.n	8003724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <HAL_GPIO_Init+0x2d0>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60cb      	str	r3, [r1, #12]
 80036ec:	e021      	b.n	8003732 <HAL_GPIO_Init+0x2e2>
 80036ee:	bf00      	nop
 80036f0:	10320000 	.word	0x10320000
 80036f4:	10310000 	.word	0x10310000
 80036f8:	10220000 	.word	0x10220000
 80036fc:	10210000 	.word	0x10210000
 8003700:	10120000 	.word	0x10120000
 8003704:	10110000 	.word	0x10110000
 8003708:	40021000 	.word	0x40021000
 800370c:	40010000 	.word	0x40010000
 8003710:	40010800 	.word	0x40010800
 8003714:	40010c00 	.word	0x40010c00
 8003718:	40011000 	.word	0x40011000
 800371c:	40011400 	.word	0x40011400
 8003720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_GPIO_Init+0x304>)
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	43db      	mvns	r3, r3
 800372c:	4909      	ldr	r1, [pc, #36]	; (8003754 <HAL_GPIO_Init+0x304>)
 800372e:	4013      	ands	r3, r2
 8003730:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	3301      	adds	r3, #1
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	f47f ae8e 	bne.w	8003464 <HAL_GPIO_Init+0x14>
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	372c      	adds	r7, #44	; 0x2c
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40010400 	.word	0x40010400

08003758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e001      	b.n	800377a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	807b      	strh	r3, [r7, #2]
 8003792:	4613      	mov	r3, r2
 8003794:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003796:	787b      	ldrb	r3, [r7, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037a2:	e003      	b.n	80037ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037a4:	887b      	ldrh	r3, [r7, #2]
 80037a6:	041a      	lsls	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	611a      	str	r2, [r3, #16]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4013      	ands	r3, r2
 80037ce:	041a      	lsls	r2, r3, #16
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	400b      	ands	r3, r1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e12b      	b.n	8003a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe f914 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800384c:	f001 fd2e 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a81      	ldr	r2, [pc, #516]	; (8003a5c <HAL_I2C_Init+0x274>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d807      	bhi.n	800386c <HAL_I2C_Init+0x84>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a80      	ldr	r2, [pc, #512]	; (8003a60 <HAL_I2C_Init+0x278>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e006      	b.n	800387a <HAL_I2C_Init+0x92>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a7d      	ldr	r2, [pc, #500]	; (8003a64 <HAL_I2C_Init+0x27c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0e7      	b.n	8003a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a78      	ldr	r2, [pc, #480]	; (8003a68 <HAL_I2C_Init+0x280>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a6a      	ldr	r2, [pc, #424]	; (8003a5c <HAL_I2C_Init+0x274>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d802      	bhi.n	80038bc <HAL_I2C_Init+0xd4>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	e009      	b.n	80038d0 <HAL_I2C_Init+0xe8>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <HAL_I2C_Init+0x284>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	3301      	adds	r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	495c      	ldr	r1, [pc, #368]	; (8003a5c <HAL_I2C_Init+0x274>)
 80038ec:	428b      	cmp	r3, r1
 80038ee:	d819      	bhi.n	8003924 <HAL_I2C_Init+0x13c>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e59      	subs	r1, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003904:	400b      	ands	r3, r1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_I2C_Init+0x138>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e59      	subs	r1, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fbb1 f3f3 	udiv	r3, r1, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	e051      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 8003920:	2304      	movs	r3, #4
 8003922:	e04f      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d111      	bne.n	8003950 <HAL_I2C_Init+0x168>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e012      	b.n	8003976 <HAL_I2C_Init+0x18e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x196>
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_I2C_Init+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e58      	subs	r0, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	440b      	add	r3, r1
 8003994:	fbb0 f3f3 	udiv	r3, r0, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Init+0x1dc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	0099      	lsls	r1, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	6809      	ldr	r1, [r1, #0]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6911      	ldr	r1, [r2, #16]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	000186a0 	.word	0x000186a0
 8003a60:	001e847f 	.word	0x001e847f
 8003a64:	003d08ff 	.word	0x003d08ff
 8003a68:	431bde83 	.word	0x431bde83
 8003a6c:	10624dd3 	.word	0x10624dd3

08003a70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	817b      	strh	r3, [r7, #10]
 8003a80:	4613      	mov	r3, r2
 8003a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7fe fd7a 	bl	800257c <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	f040 80e0 	bne.w	8003c58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4970      	ldr	r1, [pc, #448]	; (8003c64 <HAL_I2C_Master_Transmit+0x1f4>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fe44 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0d3      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2C_Master_Transmit+0x50>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0cc      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d007      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2221      	movs	r2, #33	; 0x21
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2210      	movs	r2, #16
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a50      	ldr	r2, [pc, #320]	; (8003c68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fbfe 	bl	8004330 <I2C_MasterRequestWrite>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e08d      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b54:	e066      	b.n	8003c24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	6a39      	ldr	r1, [r7, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 febe 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06b      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_I2C_Master_Transmit+0x188>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	6a39      	ldr	r1, [r7, #32]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 feae 	bl	800495e <I2C_WaitOnBTFFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d107      	bne.n	8003c20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01a      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d194      	bne.n	8003b56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	00100002 	.word	0x00100002
 8003c68:	ffff0000 	.word	0xffff0000

08003c6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	817b      	strh	r3, [r7, #10]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	813b      	strh	r3, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c86:	f7fe fc79 	bl	800257c <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	f040 80d9 	bne.w	8003e4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2319      	movs	r3, #25
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	496d      	ldr	r1, [pc, #436]	; (8003e58 <HAL_I2C_Mem_Write+0x1ec>)
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fd43 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0cc      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Mem_Write+0x56>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0c5      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d007      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a4d      	ldr	r2, [pc, #308]	; (8003e5c <HAL_I2C_Mem_Write+0x1f0>)
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2a:	88f8      	ldrh	r0, [r7, #6]
 8003d2c:	893a      	ldrh	r2, [r7, #8]
 8003d2e:	8979      	ldrh	r1, [r7, #10]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4603      	mov	r3, r0
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fb7a 	bl	8004434 <I2C_RequestMemoryWrite>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d052      	beq.n	8003dec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e081      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fdc4 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06b      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d11b      	bne.n	8003dec <HAL_I2C_Mem_Write+0x180>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d017      	beq.n	8003dec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1aa      	bne.n	8003d4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fdb0 	bl	800495e <I2C_WaitOnBTFFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d107      	bne.n	8003e1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e016      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	00100002 	.word	0x00100002
 8003e5c:	ffff0000 	.word	0xffff0000

08003e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08c      	sub	sp, #48	; 0x30
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	817b      	strh	r3, [r7, #10]
 8003e72:	460b      	mov	r3, r1
 8003e74:	813b      	strh	r3, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7fe fb7d 	bl	800257c <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 8244 	bne.w	800431a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2319      	movs	r3, #25
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4982      	ldr	r1, [pc, #520]	; (80040a4 <HAL_I2C_Mem_Read+0x244>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fc47 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e237      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Mem_Read+0x5a>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e230      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d007      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2222      	movs	r2, #34	; 0x22
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a62      	ldr	r2, [pc, #392]	; (80040a8 <HAL_I2C_Mem_Read+0x248>)
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f22:	88f8      	ldrh	r0, [r7, #6]
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fb14 	bl	8004560 <I2C_RequestMemoryRead>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e1ec      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e1c0      	b.n	80042f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d11e      	bne.n	8003fb8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f8a:	b672      	cpsid	i
}
 8003f8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fb4:	b662      	cpsie	i
}
 8003fb6:	e035      	b.n	8004024 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11e      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i
}
 8003fd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ffa:	b662      	cpsie	i
}
 8003ffc:	e012      	b.n	8004024 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800400c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004024:	e166      	b.n	80042f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	2b03      	cmp	r3, #3
 800402c:	f200 811f 	bhi.w	800426e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	2b01      	cmp	r3, #1
 8004036:	d123      	bne.n	8004080 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fccf 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e167      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800407e:	e139      	b.n	80042f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b02      	cmp	r3, #2
 8004086:	d152      	bne.n	800412e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	2200      	movs	r2, #0
 8004090:	4906      	ldr	r1, [pc, #24]	; (80040ac <HAL_I2C_Mem_Read+0x24c>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fb4c 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e13c      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
 80040a2:	bf00      	nop
 80040a4:	00100002 	.word	0x00100002
 80040a8:	ffff0000 	.word	0xffff0000
 80040ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040b0:	b672      	cpsid	i
}
 80040b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040f6:	b662      	cpsie	i
}
 80040f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800412c:	e0e2      	b.n	80042f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2200      	movs	r2, #0
 8004136:	497b      	ldr	r1, [pc, #492]	; (8004324 <HAL_I2C_Mem_Read+0x4c4>)
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 faf9 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0e9      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004156:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800418e:	4b66      	ldr	r3, [pc, #408]	; (8004328 <HAL_I2C_Mem_Read+0x4c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	08db      	lsrs	r3, r3, #3
 8004194:	4a65      	ldr	r2, [pc, #404]	; (800432c <HAL_I2C_Mem_Read+0x4cc>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0a1a      	lsrs	r2, r3, #8
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00da      	lsls	r2, r3, #3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d118      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041d6:	b662      	cpsie	i
}
 80041d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e09a      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d1d9      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004236:	b662      	cpsie	i
}
 8004238:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426c:	e042      	b.n	80042f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fbb4 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e04c      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d118      	bne.n	80042f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f ae94 	bne.w	8004026 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010004 	.word	0x00010004
 8004328:	20000000 	.word	0x20000000
 800432c:	14f8b589 	.word	0x14f8b589

08004330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	460b      	mov	r3, r1
 800433e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d006      	beq.n	800435a <I2C_MasterRequestWrite+0x2a>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d003      	beq.n	800435a <I2C_MasterRequestWrite+0x2a>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004358:	d108      	bne.n	800436c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e00b      	b.n	8004384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	2b12      	cmp	r3, #18
 8004372:	d107      	bne.n	8004384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f9cd 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d103      	bne.n	80043b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e035      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d108      	bne.n	80043d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	e01b      	b.n	800440c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	11db      	asrs	r3, r3, #7
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0306 	and.w	r3, r3, #6
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f063 030f 	orn	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	490e      	ldr	r1, [pc, #56]	; (800442c <I2C_MasterRequestWrite+0xfc>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f9f3 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e010      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <I2C_MasterRequestWrite+0x100>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f9e3 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010008 	.word	0x00010008
 8004430:	00010002 	.word	0x00010002

08004434 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2200      	movs	r2, #0
 8004466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f960 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004484:	d103      	bne.n	800448e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e05f      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	492d      	ldr	r1, [pc, #180]	; (800455c <I2C_RequestMemoryWrite+0x128>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f998 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04c      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fa02 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02b      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e021      	b.n	8004550 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f9dc 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e005      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004546:	893b      	ldrh	r3, [r7, #8]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	00010002 	.word	0x00010002

08004560 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004588:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f8c2 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c0:	d103      	bne.n	80045ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0aa      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	4952      	ldr	r1, [pc, #328]	; (800472c <I2C_RequestMemoryRead+0x1cc>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f8fa 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e097      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f964 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e076      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]
 8004646:	e021      	b.n	800468c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b29b      	uxth	r3, r3
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f93e 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b04      	cmp	r3, #4
 800466c:	d107      	bne.n	800467e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e050      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004682:	893b      	ldrh	r3, [r7, #8]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	6a39      	ldr	r1, [r7, #32]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f923 	bl	80048dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d107      	bne.n	80046b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e035      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f82b 	bl	8004730 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d103      	bne.n	80046f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e013      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	4906      	ldr	r1, [pc, #24]	; (800472c <I2C_RequestMemoryRead+0x1cc>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f863 	bl	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00010002 	.word	0x00010002

08004730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004740:	e025      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d021      	beq.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fd ff17 	bl	800257c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e023      	b.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10d      	bne.n	80047b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	e00c      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d0b6      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ec:	e051      	b.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d123      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e046      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484c:	d021      	beq.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fd fe95 	bl	800257c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e020      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10c      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e00b      	b.n	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d18d      	bne.n	80047ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e8:	e02d      	b.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f8ce 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e02d      	b.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d021      	beq.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd fe3b 	bl	800257c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e007      	b.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d1ca      	bne.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496a:	e02d      	b.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f88d 	bl	8004a8c <I2C_IsAcknowledgeFailed>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e02d      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004982:	d021      	beq.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	f7fd fdfa 	bl	800257c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d1ca      	bne.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ec:	e042      	b.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d119      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e029      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fd fda4 	bl	800257c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d1b5      	bne.n	80049ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d11b      	bne.n	8004adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0204 	orr.w	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_PWR_EnableBkUpAccess+0x14>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	420e0020 	.word	0x420e0020

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e26e      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8089 	beq.w	8004c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b20:	4b93      	ldr	r3, [pc, #588]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d00c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b2c:	4b90      	ldr	r3, [pc, #576]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d112      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
 8004b38:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b46:	4b8a      	ldr	r3, [pc, #552]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d06e      	beq.n	8004c30 <HAL_RCC_OscConfig+0x130>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d16a      	bne.n	8004c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e248      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x76>
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e02e      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b7c      	ldr	r3, [pc, #496]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7b      	ldr	r2, [pc, #492]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b79      	ldr	r3, [pc, #484]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a78      	ldr	r2, [pc, #480]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0xbc>
 8004ba2:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a72      	ldr	r2, [pc, #456]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6f      	ldr	r2, [pc, #444]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004bbc:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6b      	ldr	r2, [pc, #428]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b69      	ldr	r3, [pc, #420]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a68      	ldr	r2, [pc, #416]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fcce 	bl	800257c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	e009      	b.n	8004bf8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fd fcca 	bl	800257c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1fb      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf8:	4b5d      	ldr	r3, [pc, #372]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe4>
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fd fcb9 	bl	800257c <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0c:	e009      	b.n	8004c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0e:	f7fd fcb5 	bl	800257c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1e6      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ef      	bne.n	8004c0e <HAL_RCC_OscConfig+0x10e>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_OscConfig+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3e:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c4a:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1ba      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4939      	ldr	r1, [pc, #228]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e03a      	b.n	8004d06 <HAL_RCC_OscConfig+0x206>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_OscConfig+0x1da>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fc6d 	bl	800257c <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fd fc69 	bl	800257c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x1b8>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e19b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1a6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4927      	ldr	r1, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x206>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fc4c 	bl	800257c <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7fd fc48 	bl	800257c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e17a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x1e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03a      	beq.n	8004d88 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d019      	beq.n	8004d4e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <HAL_RCC_OscConfig+0x278>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fd fc2c 	bl	800257c <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x23a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd fc28 	bl	800257c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e15a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <HAL_RCC_OscConfig+0x270>)
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x228>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f000 fb08 	bl	800535c <RCC_Delay>
 8004d4c:	e01c      	b.n	8004d88 <HAL_RCC_OscConfig+0x288>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_RCC_OscConfig+0x278>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d54:	f7fd fc12 	bl	800257c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5a:	e00f      	b.n	8004d7c <HAL_RCC_OscConfig+0x27c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7fd fc0e 	bl	800257c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d908      	bls.n	8004d7c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e140      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
 8004d6e:	bf00      	nop
 8004d70:	40021000 	.word	0x40021000
 8004d74:	42420000 	.word	0x42420000
 8004d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	4b9e      	ldr	r3, [pc, #632]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e9      	bne.n	8004d5c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a6 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x3e2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b97      	ldr	r3, [pc, #604]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x2c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	4b94      	ldr	r3, [pc, #592]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4a93      	ldr	r2, [pc, #588]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	61d3      	str	r3, [r2, #28]
 8004db2:	4b91      	ldr	r3, [pc, #580]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc2:	4b8e      	ldr	r3, [pc, #568]	; (8004ffc <HAL_RCC_OscConfig+0x4fc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d118      	bne.n	8004e00 <HAL_RCC_OscConfig+0x300>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dce:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <HAL_RCC_OscConfig+0x4fc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a8a      	ldr	r2, [pc, #552]	; (8004ffc <HAL_RCC_OscConfig+0x4fc>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dda:	f7fd fbcf 	bl	800257c <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de2:	f7fd fbcb 	bl	800257c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	; 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0fd      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df4:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCC_OscConfig+0x4fc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x2e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d106      	bne.n	8004e16 <HAL_RCC_OscConfig+0x316>
 8004e08:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4a7a      	ldr	r2, [pc, #488]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6213      	str	r3, [r2, #32]
 8004e14:	e02d      	b.n	8004e72 <HAL_RCC_OscConfig+0x372>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x338>
 8004e1e:	4b76      	ldr	r3, [pc, #472]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4a75      	ldr	r2, [pc, #468]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6213      	str	r3, [r2, #32]
 8004e2a:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a72      	ldr	r2, [pc, #456]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	e01c      	b.n	8004e72 <HAL_RCC_OscConfig+0x372>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d10c      	bne.n	8004e5a <HAL_RCC_OscConfig+0x35a>
 8004e40:	4b6d      	ldr	r3, [pc, #436]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a6c      	ldr	r2, [pc, #432]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	6213      	str	r3, [r2, #32]
 8004e4c:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a69      	ldr	r2, [pc, #420]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	e00b      	b.n	8004e72 <HAL_RCC_OscConfig+0x372>
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a66      	ldr	r2, [pc, #408]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	4b64      	ldr	r3, [pc, #400]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a63      	ldr	r2, [pc, #396]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d015      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd fb7f 	bl	800257c <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x398>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fd fb7b 	bl	800257c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0ab      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e98:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ee      	beq.n	8004e82 <HAL_RCC_OscConfig+0x382>
 8004ea4:	e014      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fb69 	bl	800257c <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eae:	f7fd fb65 	bl	800257c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e095      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3e2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed6:	4b48      	ldr	r3, [pc, #288]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	4a47      	ldr	r2, [pc, #284]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8081 	beq.w	8004fee <HAL_RCC_OscConfig+0x4ee>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eec:	4b42      	ldr	r3, [pc, #264]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d061      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d146      	bne.n	8004f8e <HAL_RCC_OscConfig+0x48e>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <HAL_RCC_OscConfig+0x500>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd fb39 	bl	800257c <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x420>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fb35 	bl	800257c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x420>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e067      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x40e>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d108      	bne.n	8004f48 <HAL_RCC_OscConfig+0x448>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f36:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	492d      	ldr	r1, [pc, #180]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a19      	ldr	r1, [r3, #32]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	4927      	ldr	r1, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f60:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCC_OscConfig+0x500>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fd fb09 	bl	800257c <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x480>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fd fb05 	bl	800257c <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e037      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f80:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x46e>
 8004f8c:	e02f      	b.n	8004fee <HAL_RCC_OscConfig+0x4ee>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_RCC_OscConfig+0x500>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd faf2 	bl	800257c <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x4ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fd faee 	bl	800257c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x4ae>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e020      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x49c>
 8004fba:	e018      	b.n	8004fee <HAL_RCC_OscConfig+0x4ee>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x4c8>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e013      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d106      	bne.n	8004fea <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_OscConfig+0x4ee>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_RCC_OscConfig+0x4f0>
        }
      }
    }
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40007000 	.word	0x40007000
 8005000:	42420060 	.word	0x42420060

08005004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0d0      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d910      	bls.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 0207 	bic.w	r2, r3, #7
 800502e:	4965      	ldr	r1, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800506a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d040      	beq.n	8005124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d115      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e073      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06b      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f023 0203 	bic.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4936      	ldr	r1, [pc, #216]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f4:	f7fd fa42 	bl	800257c <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fd fa3e 	bl	800257c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e053      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 020c 	and.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	429a      	cmp	r2, r3
 8005122:	d1eb      	bne.n	80050fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d210      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 0207 	bic.w	r2, r3, #7
 800513a:	4922      	ldr	r1, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c8>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1cc>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1d0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fc fd5c 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40021000 	.word	0x40021000
 80051cc:	0800961c 	.word	0x0800961c
 80051d0:	20000000 	.word	0x20000000
 80051d4:	20000004 	.word	0x20000004

080051d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	b490      	push	{r4, r7}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051de:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051e0:	1d3c      	adds	r4, r7, #4
 80051e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051e8:	f240 2301 	movw	r3, #513	; 0x201
 80051ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b04      	cmp	r3, #4
 8005210:	d002      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x46>
 8005216:	e02d      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521a:	623b      	str	r3, [r7, #32]
      break;
 800521c:	e02d      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	0c9b      	lsrs	r3, r3, #18
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800522a:	4413      	add	r3, r2
 800522c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800523c:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_RCC_GetSysClockFreq+0xb4>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	0c5b      	lsrs	r3, r3, #17
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800524a:	4413      	add	r3, r2
 800524c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005256:	fb02 f203 	mul.w	r2, r2, r3
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	e004      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	623b      	str	r3, [r7, #32]
      break;
 8005272:	e002      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005276:	623b      	str	r3, [r7, #32]
      break;
 8005278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800527a:	6a3b      	ldr	r3, [r7, #32]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bc90      	pop	{r4, r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	080095f4 	.word	0x080095f4
 800528c:	40021000 	.word	0x40021000
 8005290:	007a1200 	.word	0x007a1200
 8005294:	003d0900 	.word	0x003d0900

08005298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	20000000 	.word	0x20000000

080052ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052b0:	f7ff fff2 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4903      	ldr	r1, [pc, #12]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	0800962c 	.word	0x0800962c

080052d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052d8:	f7ff ffde 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	0adb      	lsrs	r3, r3, #11
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4903      	ldr	r1, [pc, #12]	; (80052f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40021000 	.word	0x40021000
 80052f8:	0800962c 	.word	0x0800962c

080052fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	220f      	movs	r2, #15
 800530a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_RCC_GetClockConfig+0x58>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0203 	and.w	r2, r3, #3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_RCC_GetClockConfig+0x58>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_GetClockConfig+0x58>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_RCC_GetClockConfig+0x58>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	08db      	lsrs	r3, r3, #3
 8005336:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_GetClockConfig+0x5c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0207 	and.w	r2, r3, #7
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	40021000 	.word	0x40021000
 8005358:	40022000 	.word	0x40022000

0800535c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <RCC_Delay+0x34>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <RCC_Delay+0x38>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0a5b      	lsrs	r3, r3, #9
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005378:	bf00      	nop
  }
  while (Delay --);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	60fa      	str	r2, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f9      	bne.n	8005378 <RCC_Delay+0x1c>
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	20000000 	.word	0x20000000
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d07d      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053b4:	2300      	movs	r3, #0
 80053b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b8:	4b4f      	ldr	r3, [pc, #316]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10d      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c4:	4b4c      	ldr	r3, [pc, #304]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	4a4b      	ldr	r2, [pc, #300]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ce:	61d3      	str	r3, [r2, #28]
 80053d0:	4b49      	ldr	r3, [pc, #292]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d118      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ec:	4b43      	ldr	r3, [pc, #268]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a42      	ldr	r2, [pc, #264]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f8:	f7fd f8c0 	bl	800257c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005400:	f7fd f8bc 	bl	800257c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e06d      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005412:	4b3a      	ldr	r3, [pc, #232]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d027      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800543c:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005444:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800544c:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d014      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd f88b 	bl	800257c <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fd f887 	bl	800257c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e036      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ee      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4917      	ldr	r1, [pc, #92]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549a:	4313      	orrs	r3, r2
 800549c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	490b      	ldr	r1, [pc, #44]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4904      	ldr	r1, [pc, #16]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40007000 	.word	0x40007000
 8005500:	42420440 	.word	0x42420440

08005504 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b08d      	sub	sp, #52	; 0x34
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800550c:	4b5a      	ldr	r3, [pc, #360]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800550e:	f107 040c 	add.w	r4, r7, #12
 8005512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005518:	f240 2301 	movw	r3, #513	; 0x201
 800551c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005526:	2300      	movs	r3, #0
 8005528:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	2300      	movs	r3, #0
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b10      	cmp	r3, #16
 800553c:	f200 8091 	bhi.w	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d04c      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d07c      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800554c:	e089      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800554e:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005554:	4b49      	ldr	r3, [pc, #292]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8082 	beq.w	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	0c9b      	lsrs	r3, r3, #18
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800556e:	4413      	add	r3, r2
 8005570:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005574:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d018      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	0c5b      	lsrs	r3, r3, #17
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800558e:	4413      	add	r3, r2
 8005590:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80055a0:	4a37      	ldr	r2, [pc, #220]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	4a33      	ldr	r2, [pc, #204]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c8:	d102      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055ce:	e04a      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055de:	e042      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f0:	d108      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80055fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
 8005602:	e01f      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560e:	d109      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800561c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
 8005622:	e00f      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562e:	d11c      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d016      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800563c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005642:	e012      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005644:	e011      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005646:	f7ff fe45 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	0b9b      	lsrs	r3, r3, #14
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	3301      	adds	r3, #1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005660:	e004      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800566a:	bf00      	nop
    }
  }
  return (frequency);
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800566e:	4618      	mov	r0, r3
 8005670:	3734      	adds	r7, #52	; 0x34
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	08009604 	.word	0x08009604
 800567c:	40021000 	.word	0x40021000
 8005680:	007a1200 	.word	0x007a1200
 8005684:	003d0900 	.word	0x003d0900
 8005688:	aaaaaaab 	.word	0xaaaaaaab

0800568c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e084      	b.n	80057ac <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7c5b      	ldrb	r3, [r3, #17]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc fa12 	bl	8001adc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f952 	bl	8005968 <HAL_RTC_WaitForSynchro>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e06b      	b.n	80057ac <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa0b 	bl	8005af0 <RTC_EnterInitMode>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2204      	movs	r2, #4
 80056e4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e060      	b.n	80057ac <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0207 	bic.w	r2, r2, #7
 80056f8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_RTC_Init+0x128>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <HAL_RTC_Init+0x128>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <HAL_RTC_Init+0x128>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4926      	ldr	r1, [pc, #152]	; (80057b4 <HAL_RTC_Init+0x128>)
 800571c:	4313      	orrs	r3, r2
 800571e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d003      	beq.n	8005732 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e00e      	b.n	8005750 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005732:	2001      	movs	r0, #1
 8005734:	f7ff fee6 	bl	8005504 <HAL_RCCEx_GetPeriphCLKFreq>
 8005738:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e030      	b.n	80057ac <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b01      	subs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 010f 	bic.w	r1, r3, #15
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	0c1a      	lsrs	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	b291      	uxth	r1, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	430b      	orrs	r3, r1
 800577a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9df 	bl	8005b40 <RTC_ExitInitMode>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2204      	movs	r2, #4
 800578c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00c      	b.n	80057ac <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
  }
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40006c00 	.word	0x40006c00

080057b8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_RTC_GetTime+0x28>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0b5      	b.n	8005950 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0ac      	b.n	8005950 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8e3 	bl	80059c2 <RTC_ReadTimeCounter>
 80057fc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4a55      	ldr	r2, [pc, #340]	; (8005958 <HAL_RTC_GetTime+0x1a0>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0adb      	lsrs	r3, r3, #11
 8005808:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4b52      	ldr	r3, [pc, #328]	; (8005958 <HAL_RTC_GetTime+0x1a0>)
 800580e:	fba3 1302 	umull	r1, r3, r3, r2
 8005812:	0adb      	lsrs	r3, r3, #11
 8005814:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	4a4f      	ldr	r2, [pc, #316]	; (800595c <HAL_RTC_GetTime+0x1a4>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4a4a      	ldr	r2, [pc, #296]	; (8005958 <HAL_RTC_GetTime+0x1a0>)
 8005830:	fba2 1203 	umull	r1, r2, r2, r3
 8005834:	0ad2      	lsrs	r2, r2, #11
 8005836:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800583a:	fb01 f202 	mul.w	r2, r1, r2
 800583e:	1a9a      	subs	r2, r3, r2
 8005840:	4b46      	ldr	r3, [pc, #280]	; (800595c <HAL_RTC_GetTime+0x1a4>)
 8005842:	fba3 1302 	umull	r1, r3, r3, r2
 8005846:	0959      	lsrs	r1, r3, #5
 8005848:	460b      	mov	r3, r1
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a5b      	subs	r3, r3, r1
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	1ad1      	subs	r1, r2, r3
 8005852:	b2ca      	uxtb	r2, r1
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b17      	cmp	r3, #23
 800585c:	d955      	bls.n	800590a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a3f      	ldr	r2, [pc, #252]	; (8005960 <HAL_RTC_GetTime+0x1a8>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800586a:	6939      	ldr	r1, [r7, #16]
 800586c:	4b3c      	ldr	r3, [pc, #240]	; (8005960 <HAL_RTC_GetTime+0x1a8>)
 800586e:	fba3 2301 	umull	r2, r3, r3, r1
 8005872:	091a      	lsrs	r2, r3, #4
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	1aca      	subs	r2, r1, r3
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f8f3 	bl	8005a70 <RTC_ReadAlarmCounter>
 800588a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005892:	d008      	beq.n	80058a6 <HAL_RTC_GetTime+0xee>
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	d904      	bls.n	80058a6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e002      	b.n	80058ac <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058aa:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <HAL_RTC_GetTime+0x1ac>)
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80058ba:	69b9      	ldr	r1, [r7, #24]
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f8b0 	bl	8005a22 <RTC_WriteTimeCounter>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e041      	b.n	8005950 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d2:	d00c      	beq.n	80058ee <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f8df 	bl	8005aa2 <RTC_WriteAlarmCounter>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e030      	b.n	8005950 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058ee:	69f9      	ldr	r1, [r7, #28]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f8d6 	bl	8005aa2 <RTC_WriteAlarmCounter>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e027      	b.n	8005950 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005900:	6979      	ldr	r1, [r7, #20]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f961 	bl	8005bca <RTC_DateUpdate>
 8005908:	e003      	b.n	8005912 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01a      	beq.n	800594e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f937 	bl	8005b90 <RTC_ByteToBcd2>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f92e 	bl	8005b90 <RTC_ByteToBcd2>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	789b      	ldrb	r3, [r3, #2]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 f925 	bl	8005b90 <RTC_ByteToBcd2>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	91a2b3c5 	.word	0x91a2b3c5
 800595c:	88888889 	.word	0x88888889
 8005960:	aaaaaaab 	.word	0xaaaaaaab
 8005964:	00015180 	.word	0x00015180

08005968 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e01d      	b.n	80059ba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0208 	bic.w	r2, r2, #8
 800598c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800598e:	f7fc fdf5 	bl	800257c <HAL_GetTick>
 8005992:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005994:	e009      	b.n	80059aa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005996:	f7fc fdf1 	bl	800257c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a4:	d901      	bls.n	80059aa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e007      	b.n	80059ba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ee      	beq.n	8005996 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b087      	sub	sp, #28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	827b      	strh	r3, [r7, #18]
 80059ce:	2300      	movs	r3, #0
 80059d0:	823b      	strh	r3, [r7, #16]
 80059d2:	2300      	movs	r3, #0
 80059d4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80059f2:	8a7a      	ldrh	r2, [r7, #18]
 80059f4:	8a3b      	ldrh	r3, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d008      	beq.n	8005a0c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80059fa:	8a3b      	ldrh	r3, [r7, #16]
 80059fc:	041a      	lsls	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e004      	b.n	8005a16 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a0c:	8a7b      	ldrh	r3, [r7, #18]
 8005a0e:	041a      	lsls	r2, r3, #16
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f85d 	bl	8005af0 <RTC_EnterInitMode>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e011      	b.n	8005a66 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	0c12      	lsrs	r2, r2, #16
 8005a4a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	b292      	uxth	r2, r2
 8005a54:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f872 	bl	8005b40 <RTC_ExitInitMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	81fb      	strh	r3, [r7, #14]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	041a      	lsls	r2, r3, #16
 8005a94:	89bb      	ldrh	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f81d 	bl	8005af0 <RTC_EnterInitMode>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	e011      	b.n	8005ae6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	0c12      	lsrs	r2, r2, #16
 8005aca:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b292      	uxth	r2, r2
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f832 	bl	8005b40 <RTC_ExitInitMode>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005afc:	f7fc fd3e 	bl	800257c <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b02:	e009      	b.n	8005b18 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b04:	f7fc fd3a 	bl	800257c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b12:	d901      	bls.n	8005b18 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e00f      	b.n	8005b38 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ee      	beq.n	8005b04 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0210 	orr.w	r2, r2, #16
 8005b34:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005b5c:	f7fc fd0e 	bl	800257c <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b62:	e009      	b.n	8005b78 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b64:	f7fc fd0a 	bl	800257c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b72:	d901      	bls.n	8005b78 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e007      	b.n	8005b88 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0ee      	beq.n	8005b64 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005b9e:	e005      	b.n	8005bac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	3b0a      	subs	r3, #10
 8005baa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d8f6      	bhi.n	8005ba0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b2db      	uxtb	r3, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	7bdb      	ldrb	r3, [r3, #15]
 8005be8:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7b5b      	ldrb	r3, [r3, #13]
 8005bee:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7b9b      	ldrb	r3, [r3, #14]
 8005bf4:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	e06f      	b.n	8005cdc <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d011      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d00e      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d00b      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	d008      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d005      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b0a      	cmp	r3, #10
 8005c1e:	d002      	beq.n	8005c26 <RTC_DateUpdate+0x5c>
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b0c      	cmp	r3, #12
 8005c24:	d117      	bne.n	8005c56 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b1e      	cmp	r3, #30
 8005c2a:	d803      	bhi.n	8005c34 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c32:	e050      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b0c      	cmp	r3, #12
 8005c38:	d005      	beq.n	8005c46 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c44:	e047      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005c46:	2301      	movs	r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
          year++;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	3301      	adds	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005c54:	e03f      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d008      	beq.n	8005c6e <RTC_DateUpdate+0xa4>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d005      	beq.n	8005c6e <RTC_DateUpdate+0xa4>
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	d002      	beq.n	8005c6e <RTC_DateUpdate+0xa4>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b0b      	cmp	r3, #11
 8005c6c:	d10c      	bne.n	8005c88 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b1d      	cmp	r3, #29
 8005c72:	d803      	bhi.n	8005c7c <RTC_DateUpdate+0xb2>
      {
        day++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005c7a:	e02c      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005c82:	2301      	movs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005c86:	e026      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d123      	bne.n	8005cd6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b1b      	cmp	r3, #27
 8005c92:	d803      	bhi.n	8005c9c <RTC_DateUpdate+0xd2>
      {
        day++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e01c      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b1c      	cmp	r3, #28
 8005ca0:	d111      	bne.n	8005cc6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f838 	bl	8005d1c <RTC_IsLeapYear>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <RTC_DateUpdate+0xf0>
        {
          day++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e00d      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e007      	b.n	8005cd6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b1d      	cmp	r3, #29
 8005cca:	d104      	bne.n	8005cd6 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d38b      	bcc.n	8005bfc <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	6978      	ldr	r0, [r7, #20]
 8005d08:	f000 f83a 	bl	8005d80 <RTC_WeekDayNum>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	731a      	strb	r2, [r3, #12]
}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e01d      	b.n	8005d72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <RTC_IsLeapYear+0x60>)
 8005d3a:	fba2 1203 	umull	r1, r2, r2, r3
 8005d3e:	0952      	lsrs	r2, r2, #5
 8005d40:	2164      	movs	r1, #100	; 0x64
 8005d42:	fb01 f202 	mul.w	r2, r1, r2
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e00f      	b.n	8005d72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <RTC_IsLeapYear+0x60>)
 8005d56:	fba2 1203 	umull	r1, r2, r2, r3
 8005d5a:	09d2      	lsrs	r2, r2, #7
 8005d5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d60:	fb01 f202 	mul.w	r2, r1, r2
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005d70:	2300      	movs	r3, #0
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	51eb851f 	.word	0x51eb851f

08005d80 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005d9e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d82d      	bhi.n	8005e02 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <RTC_WeekDayNum+0xe4>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	085a      	lsrs	r2, r3, #1
 8005dba:	78bb      	ldrb	r3, [r7, #2]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4926      	ldr	r1, [pc, #152]	; (8005e68 <RTC_WeekDayNum+0xe8>)
 8005dd0:	fba1 1303 	umull	r1, r3, r1, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	4922      	ldr	r1, [pc, #136]	; (8005e68 <RTC_WeekDayNum+0xe8>)
 8005dde:	fba1 1303 	umull	r1, r3, r1, r3
 8005de2:	09db      	lsrs	r3, r3, #7
 8005de4:	4413      	add	r3, r2
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <RTC_WeekDayNum+0xec>)
 8005dea:	fba3 1302 	umull	r1, r3, r3, r2
 8005dee:	1ad1      	subs	r1, r2, r3
 8005df0:	0849      	lsrs	r1, r1, #1
 8005df2:	440b      	add	r3, r1
 8005df4:	0899      	lsrs	r1, r3, #2
 8005df6:	460b      	mov	r3, r1
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	1a5b      	subs	r3, r3, r1
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e029      	b.n	8005e56 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <RTC_WeekDayNum+0xe4>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	085a      	lsrs	r2, r3, #1
 8005e16:	78bb      	ldrb	r3, [r7, #2]
 8005e18:	441a      	add	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4910      	ldr	r1, [pc, #64]	; (8005e68 <RTC_WeekDayNum+0xe8>)
 8005e28:	fba1 1303 	umull	r1, r3, r1, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	490d      	ldr	r1, [pc, #52]	; (8005e68 <RTC_WeekDayNum+0xe8>)
 8005e34:	fba1 1303 	umull	r1, r3, r1, r3
 8005e38:	09db      	lsrs	r3, r3, #7
 8005e3a:	4413      	add	r3, r2
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <RTC_WeekDayNum+0xec>)
 8005e40:	fba3 1302 	umull	r1, r3, r3, r2
 8005e44:	1ad1      	subs	r1, r2, r3
 8005e46:	0849      	lsrs	r1, r1, #1
 8005e48:	440b      	add	r3, r1
 8005e4a:	0899      	lsrs	r1, r3, #2
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	1a5b      	subs	r3, r3, r1
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	b2db      	uxtb	r3, r3
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	38e38e39 	.word	0x38e38e39
 8005e68:	51eb851f 	.word	0x51eb851f
 8005e6c:	24924925 	.word	0x24924925

08005e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e076      	b.n	8005f70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e92:	d009      	beq.n	8005ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
 8005e9a:	e005      	b.n	8005ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fe2e 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	ea42 0103 	orr.w	r1, r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	0c1a      	lsrs	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f002 0204 	and.w	r2, r2, #4
 8005f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_SPI_Transmit+0x22>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e126      	b.n	80061e8 <HAL_SPI_Transmit+0x270>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa2:	f7fc faeb 	bl	800257c <HAL_GetTick>
 8005fa6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fbc:	e10b      	b.n	80061d6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_SPI_Transmit+0x52>
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fce:	e102      	b.n	80061d6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006016:	d10f      	bne.n	8006038 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006026:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006036:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d007      	beq.n	8006056 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605e:	d14b      	bne.n	80060f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_SPI_Transmit+0xf6>
 8006068:	8afb      	ldrh	r3, [r7, #22]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d13e      	bne.n	80060ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	1c9a      	adds	r2, r3, #2
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006092:	e02b      	b.n	80060ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d112      	bne.n	80060c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	881a      	ldrh	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	1c9a      	adds	r2, r3, #2
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80060c6:	e011      	b.n	80060ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c8:	f7fc fa58 	bl	800257c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d803      	bhi.n	80060e0 <HAL_SPI_Transmit+0x168>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060de:	d102      	bne.n	80060e6 <HAL_SPI_Transmit+0x16e>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060ea:	e074      	b.n	80061d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ce      	bne.n	8006094 <HAL_SPI_Transmit+0x11c>
 80060f6:	e04c      	b.n	8006192 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_SPI_Transmit+0x18e>
 8006100:	8afb      	ldrh	r3, [r7, #22]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d140      	bne.n	8006188 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800612c:	e02c      	b.n	8006188 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d113      	bne.n	8006164 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	86da      	strh	r2, [r3, #54]	; 0x36
 8006162:	e011      	b.n	8006188 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006164:	f7fc fa0a 	bl	800257c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d803      	bhi.n	800617c <HAL_SPI_Transmit+0x204>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800617a:	d102      	bne.n	8006182 <HAL_SPI_Transmit+0x20a>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006186:	e026      	b.n	80061d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1cd      	bne.n	800612e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fbb8 	bl	800690c <SPI_EndRxTxTransaction>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e000      	b.n	80061d6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620c:	d112      	bne.n	8006234 <HAL_SPI_Receive+0x44>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10e      	bne.n	8006234 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2204      	movs	r2, #4
 800621a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f8f1 	bl	8006412 <HAL_SPI_TransmitReceive>
 8006230:	4603      	mov	r3, r0
 8006232:	e0ea      	b.n	800640a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Receive+0x52>
 800623e:	2302      	movs	r3, #2
 8006240:	e0e3      	b.n	800640a <HAL_SPI_Receive+0x21a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800624a:	f7fc f997 	bl	800257c <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d002      	beq.n	8006262 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006260:	e0ca      	b.n	80063f8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_Receive+0x7e>
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006272:	e0c1      	b.n	80063f8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2204      	movs	r2, #4
 8006278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ba:	d10f      	bne.n	80062dc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d007      	beq.n	80062fa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d162      	bne.n	80063c8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006302:	e02e      	b.n	8006362 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d115      	bne.n	800633e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f103 020c 	add.w	r2, r3, #12
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800633c:	e011      	b.n	8006362 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633e:	f7fc f91d 	bl	800257c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_Receive+0x166>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d102      	bne.n	800635c <HAL_SPI_Receive+0x16c>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006360:	e04a      	b.n	80063f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1cb      	bne.n	8006304 <HAL_SPI_Receive+0x114>
 800636c:	e031      	b.n	80063d2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d113      	bne.n	80063a4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	b292      	uxth	r2, r2
 8006388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	1c9a      	adds	r2, r3, #2
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063a2:	e011      	b.n	80063c8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a4:	f7fc f8ea 	bl	800257c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d803      	bhi.n	80063bc <HAL_SPI_Receive+0x1cc>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_Receive+0x1d2>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063c6:	e017      	b.n	80063f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1cd      	bne.n	800636e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fa46 	bl	8006868 <SPI_EndRxTransaction>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
 80063f4:	e000      	b.n	80063f8 <HAL_SPI_Receive+0x208>
  }

error :
 80063f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b08c      	sub	sp, #48	; 0x30
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006420:	2301      	movs	r3, #1
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x26>
 8006434:	2302      	movs	r3, #2
 8006436:	e18a      	b.n	800674e <HAL_SPI_TransmitReceive+0x33c>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006440:	f7fc f89c 	bl	800257c <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800644c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800645a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800645e:	2b01      	cmp	r3, #1
 8006460:	d00f      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x70>
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006468:	d107      	bne.n	800647a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x68>
 8006472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006476:	2b04      	cmp	r3, #4
 8006478:	d003      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800647a:	2302      	movs	r3, #2
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006480:	e15b      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x82>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x82>
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800649a:	e14e      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d003      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2205      	movs	r2, #5
 80064ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	887a      	ldrh	r2, [r7, #2]
 80064c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	887a      	ldrh	r2, [r7, #2]
 80064d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d007      	beq.n	8006504 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650c:	d178      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SPI_TransmitReceive+0x10a>
 8006516:	8b7b      	ldrh	r3, [r7, #26]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d166      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006540:	e053      	b.n	80065ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d11b      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x176>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x176>
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d113      	bne.n	8006588 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	881a      	ldrh	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	1c9a      	adds	r2, r3, #2
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d119      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x1b8>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d014      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	b292      	uxth	r2, r2
 80065ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065c6:	2301      	movs	r3, #1
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065ca:	f7fb ffd7 	bl	800257c <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d807      	bhi.n	80065ea <HAL_SPI_TransmitReceive+0x1d8>
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e0:	d003      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065e8:	e0a7      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1a6      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x130>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1a1      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x130>
 80065fe:	e07c      	b.n	80066fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_SPI_TransmitReceive+0x1fc>
 8006608:	8b7b      	ldrh	r3, [r7, #26]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d16b      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006634:	e057      	b.n	80066e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d11c      	bne.n	800667e <HAL_SPI_TransmitReceive+0x26c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d017      	beq.n	800667e <HAL_SPI_TransmitReceive+0x26c>
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d114      	bne.n	800667e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d119      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x2ae>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066bc:	2301      	movs	r3, #1
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066c0:	f7fb ff5c 	bl	800257c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d803      	bhi.n	80066d8 <HAL_SPI_TransmitReceive+0x2c6>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d6:	d102      	bne.n	80066de <HAL_SPI_TransmitReceive+0x2cc>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066e4:	e029      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1a2      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x224>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d19d      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f904 	bl	800690c <SPI_EndRxTxTransaction>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006716:	e010      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	e000      	b.n	800673a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006738:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800674a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800674e:	4618      	mov	r0, r3
 8006750:	3730      	adds	r7, #48	; 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006768:	f7fb ff08 	bl	800257c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4413      	add	r3, r2
 8006776:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006778:	f7fb ff00 	bl	800257c <HAL_GetTick>
 800677c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677e:	4b39      	ldr	r3, [pc, #228]	; (8006864 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	015b      	lsls	r3, r3, #5
 8006784:	0d1b      	lsrs	r3, r3, #20
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678e:	e054      	b.n	800683a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006796:	d050      	beq.n	800683a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006798:	f7fb fef0 	bl	800257c <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d902      	bls.n	80067ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d13d      	bne.n	800682a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c6:	d111      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d0:	d004      	beq.n	80067dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d107      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f4:	d10f      	bne.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e017      	b.n	800685a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3b01      	subs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d19b      	bne.n	8006790 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000000 	.word	0x20000000

08006868 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687c:	d111      	bne.n	80068a2 <SPI_EndRxTransaction+0x3a>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d004      	beq.n	8006892 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d107      	bne.n	80068a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068aa:	d117      	bne.n	80068dc <SPI_EndRxTransaction+0x74>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d112      	bne.n	80068dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2200      	movs	r2, #0
 80068be:	2101      	movs	r1, #1
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff ff49 	bl	8006758 <SPI_WaitFlagStateUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e013      	b.n	8006904 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff ff36 	bl	8006758 <SPI_WaitFlagStateUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e000      	b.n	8006904 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff ff18 	bl	8006758 <SPI_WaitFlagStateUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f043 0220 	orr.w	r2, r3, #32
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e000      	b.n	8006940 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e041      	b.n	80069de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f839 	bl	80069e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f000 f9b4 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d001      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e03a      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a18      	ldr	r2, [pc, #96]	; (8006a90 <HAL_TIM_Base_Start_IT+0x98>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x58>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x58>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a14      	ldr	r2, [pc, #80]	; (8006a94 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x58>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d010      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800

08006a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0202 	mvn.w	r2, #2
 8006ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8ed 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8e0 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8ef 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0204 	mvn.w	r2, #4
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8c3 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f8b6 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8c5 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d122      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d11b      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0208 	mvn.w	r2, #8
 8006b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2204      	movs	r2, #4
 8006b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f899 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f88c 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f89b 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d122      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d11b      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0210 	mvn.w	r2, #16
 8006bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f86f 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 8006be0:	e005      	b.n	8006bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f862 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f871 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0201 	mvn.w	r2, #1
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fa fe2e 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c38:	2b80      	cmp	r3, #128	; 0x80
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f8bf 	bl	8006dca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f835 	bl	8006ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0220 	mvn.w	r2, #32
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f88a 	bl	8006db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a29      	ldr	r2, [pc, #164]	; (8006dac <TIM_Base_SetConfig+0xb8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_Base_SetConfig+0x30>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d007      	beq.n	8006d24 <TIM_Base_SetConfig+0x30>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <TIM_Base_SetConfig+0xbc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_Base_SetConfig+0x30>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <TIM_Base_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d108      	bne.n	8006d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <TIM_Base_SetConfig+0xb8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <TIM_Base_SetConfig+0x62>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d44:	d007      	beq.n	8006d56 <TIM_Base_SetConfig+0x62>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <TIM_Base_SetConfig+0xbc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0x62>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <TIM_Base_SetConfig+0xc0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d108      	bne.n	8006d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a07      	ldr	r2, [pc, #28]	; (8006dac <TIM_Base_SetConfig+0xb8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d103      	bne.n	8006d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	615a      	str	r2, [r3, #20]
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800

08006db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e03f      	b.n	8006e6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7fa feda 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2224      	movs	r2, #36	; 0x24
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f829 	bl	8006e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006eb2:	f023 030c 	bic.w	r3, r3, #12
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a2c      	ldr	r2, [pc, #176]	; (8006f8c <UART_SetConfig+0x114>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d103      	bne.n	8006ee8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ee0:	f7fe f9f8 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	e002      	b.n	8006eee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fe f9e0 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
 8006eec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009a      	lsls	r2, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	4a22      	ldr	r2, [pc, #136]	; (8006f90 <UART_SetConfig+0x118>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	0119      	lsls	r1, r3, #4
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009a      	lsls	r2, r3, #2
 8006f18:	441a      	add	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <UART_SetConfig+0x118>)
 8006f26:	fba3 0302 	umull	r0, r3, r3, r2
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	2064      	movs	r0, #100	; 0x64
 8006f2e:	fb00 f303 	mul.w	r3, r0, r3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	3332      	adds	r3, #50	; 0x32
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <UART_SetConfig+0x118>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f44:	4419      	add	r1, r3
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009a      	lsls	r2, r3, #2
 8006f50:	441a      	add	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <UART_SetConfig+0x118>)
 8006f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2064      	movs	r0, #100	; 0x64
 8006f66:	fb00 f303 	mul.w	r3, r0, r3
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	3332      	adds	r3, #50	; 0x32
 8006f70:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <UART_SetConfig+0x118>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	440a      	add	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40013800 	.word	0x40013800
 8006f90:	51eb851f 	.word	0x51eb851f

08006f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fa6:	2b84      	cmp	r3, #132	; 0x84
 8006fa8:	d005      	beq.n	8006fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3303      	adds	r3, #3
 8006fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr

08006fc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fc6:	f000 ff7b 	bl	8007ec0 <vTaskStartScheduler>
  
  return osOK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	af04      	add	r7, sp, #16
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d020      	beq.n	8007024 <osThreadCreate+0x54>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01c      	beq.n	8007024 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685c      	ldr	r4, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691e      	ldr	r6, [r3, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ffc9 	bl	8006f94 <makeFreeRtosPriority>
 8007002:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	9100      	str	r1, [sp, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	4632      	mov	r2, r6
 8007016:	4629      	mov	r1, r5
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fd7a 	bl	8007b12 <xTaskCreateStatic>
 800701e:	4603      	mov	r3, r0
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e01c      	b.n	800705e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685c      	ldr	r4, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007030:	b29e      	uxth	r6, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ffab 	bl	8006f94 <makeFreeRtosPriority>
 800703e:	4602      	mov	r2, r0
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	9200      	str	r2, [sp, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4632      	mov	r2, r6
 800704c:	4629      	mov	r1, r5
 800704e:	4620      	mov	r0, r4
 8007050:	f000 fdbb 	bl	8007bca <xTaskCreate>
 8007054:	4603      	mov	r3, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	d001      	beq.n	800705e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800705e:	68fb      	ldr	r3, [r7, #12]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007068 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <osDelay+0x16>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	e000      	b.n	8007080 <osDelay+0x18>
 800707e:	2301      	movs	r3, #1
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fee9 	bl	8007e58 <vTaskDelay>
  
  return osOK;
 8007086:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0208 	add.w	r2, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f103 0208 	add.w	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
}
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr

0800712c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007142:	d103      	bne.n	800714c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e00c      	b.n	8007166 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3308      	adds	r3, #8
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e002      	b.n	800715a <vListInsert+0x2e>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d2f6      	bcs.n	8007154 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr

0800719c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6892      	ldr	r2, [r2, #8]
 80071b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6852      	ldr	r2, [r2, #4]
 80071bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d103      	bne.n	80071d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	1e5a      	subs	r2, r3, #1
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr
	...

080071f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800721a:	f001 fd9f 	bl	8008d5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	68f9      	ldr	r1, [r7, #12]
 8007228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	441a      	add	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	3b01      	subs	r3, #1
 800724c:	68f9      	ldr	r1, [r7, #12]
 800724e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	441a      	add	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d114      	bne.n	800729a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3310      	adds	r3, #16
 800727c:	4618      	mov	r0, r3
 800727e:	f001 f877 	bl	8008370 <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d012      	beq.n	80072ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <xQueueGenericReset+0xcc>)
 800728a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	e009      	b.n	80072ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3310      	adds	r3, #16
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fef6 	bl	8007090 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff fef1 	bl	8007090 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072ae:	f001 fd85 	bl	8008dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072b2:	2301      	movs	r3, #1
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	; 0x28
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	613b      	str	r3, [r7, #16]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e004      	b.n	8007300 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	3348      	adds	r3, #72	; 0x48
 8007304:	4618      	mov	r0, r3
 8007306:	f001 fe29 	bl	8008f5c <pvPortMalloc>
 800730a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3348      	adds	r3, #72	; 0x48
 8007316:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007320:	79fa      	ldrb	r2, [r7, #7]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f805 	bl	800733c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007332:	69bb      	ldr	r3, [r7, #24]
	}
 8007334:	4618      	mov	r0, r3
 8007336:	3720      	adds	r7, #32
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e002      	b.n	800735e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800736a:	2101      	movs	r1, #1
 800736c:	69b8      	ldr	r0, [r7, #24]
 800736e:	f7ff ff3f 	bl	80071f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f81d 	bl	80073e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	4603      	mov	r3, r0
 80073b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073b8:	2301      	movs	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6939      	ldr	r1, [r7, #16]
 80073c6:	6978      	ldr	r0, [r7, #20]
 80073c8:	f7ff ff7a 	bl	80072c0 <xQueueGenericCreate>
 80073cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff ffd3 	bl	800737a <prvInitialiseMutex>

		return pxNewQueue;
 80073d4:	68fb      	ldr	r3, [r7, #12]
	}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	; 0x38
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericSend+0x32>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <xQueueGenericSend+0x40>
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueGenericSend+0x44>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueGenericSend+0x46>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueGenericSend+0x60>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d103      	bne.n	800744e <xQueueGenericSend+0x6e>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <xQueueGenericSend+0x72>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueGenericSend+0x74>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xQueueGenericSend+0x8e>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800746e:	f001 f943 	bl	80086f8 <xTaskGetSchedulerState>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <xQueueGenericSend+0x9e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <xQueueGenericSend+0xa2>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <xQueueGenericSend+0xa4>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xQueueGenericSend+0xbe>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61fb      	str	r3, [r7, #28]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800749e:	f001 fc5d 	bl	8008d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <xQueueGenericSend+0xd4>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d129      	bne.n	8007508 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ba:	f000 fa40 	bl	800793e <prvCopyDataToQueue>
 80074be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d010      	beq.n	80074ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 ff4f 	bl	8008370 <xTaskRemoveFromEventList>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d013      	beq.n	8007500 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074d8:	4b3f      	ldr	r3, [pc, #252]	; (80075d8 <xQueueGenericSend+0x1f8>)
 80074da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	e00a      	b.n	8007500 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074f0:	4b39      	ldr	r3, [pc, #228]	; (80075d8 <xQueueGenericSend+0x1f8>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007500:	f001 fc5c 	bl	8008dbc <vPortExitCritical>
				return pdPASS;
 8007504:	2301      	movs	r3, #1
 8007506:	e063      	b.n	80075d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800750e:	f001 fc55 	bl	8008dbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007512:	2300      	movs	r3, #0
 8007514:	e05c      	b.n	80075d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4618      	mov	r0, r3
 8007522:	f000 ff87 	bl	8008434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007526:	2301      	movs	r3, #1
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800752a:	f001 fc47 	bl	8008dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800752e:	f000 fd31 	bl	8007f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007532:	f001 fc13 	bl	8008d5c <vPortEnterCritical>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800753c:	b25b      	sxtb	r3, r3
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007542:	d103      	bne.n	800754c <xQueueGenericSend+0x16c>
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007552:	b25b      	sxtb	r3, r3
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007558:	d103      	bne.n	8007562 <xQueueGenericSend+0x182>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007562:	f001 fc2b 	bl	8008dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007566:	1d3a      	adds	r2, r7, #4
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f000 ff76 	bl	8008460 <xTaskCheckForTimeOut>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d124      	bne.n	80075c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800757a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800757c:	f000 fab1 	bl	8007ae2 <prvIsQueueFull>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	3310      	adds	r3, #16
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f000 feca 	bl	8008328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007596:	f000 fa3c 	bl	8007a12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800759a:	f000 fd09 	bl	8007fb0 <xTaskResumeAll>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f47f af7c 	bne.w	800749e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <xQueueGenericSend+0x1f8>)
 80075a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	e772      	b.n	800749e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ba:	f000 fa2a 	bl	8007a12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075be:	f000 fcf7 	bl	8007fb0 <xTaskResumeAll>
 80075c2:	e76c      	b.n	800749e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c6:	f000 fa24 	bl	8007a12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075ca:	f000 fcf1 	bl	8007fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075ce:	2300      	movs	r3, #0
		}
	}
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3738      	adds	r7, #56	; 0x38
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08e      	sub	sp, #56	; 0x38
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	623b      	str	r3, [r7, #32]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <xQueueGiveFromISR+0x48>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	61fb      	str	r3, [r7, #28]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <xQueueGiveFromISR+0x58>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <xQueueGiveFromISR+0x5c>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <xQueueGiveFromISR+0x5e>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <xQueueGiveFromISR+0x78>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	61bb      	str	r3, [r7, #24]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007654:	f001 fc44 	bl	8008ee0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007658:	f3ef 8211 	mrs	r2, BASEPRI
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	617a      	str	r2, [r7, #20]
 800766e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007670:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007680:	429a      	cmp	r2, r3
 8007682:	d22b      	bcs.n	80076dc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800768a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007696:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769e:	d112      	bne.n	80076c6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d016      	beq.n	80076d6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fe5f 	bl	8008370 <xTaskRemoveFromEventList>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00e      	beq.n	80076d6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e007      	b.n	80076d6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	b25a      	sxtb	r2, r3
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076d6:	2301      	movs	r3, #1
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
 80076da:	e001      	b.n	80076e0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3738      	adds	r7, #56	; 0x38
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08e      	sub	sp, #56	; 0x38
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	623b      	str	r3, [r7, #32]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61fb      	str	r3, [r7, #28]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007748:	f000 ffd6 	bl	80086f8 <xTaskGetSchedulerState>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <xQueueSemaphoreTake+0x60>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <xQueueSemaphoreTake+0x64>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <xQueueSemaphoreTake+0x66>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	61bb      	str	r3, [r7, #24]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007778:	f001 faf0 	bl	8008d5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	d024      	beq.n	80077d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	1e5a      	subs	r2, r3, #1
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007798:	f001 f978 	bl	8008a8c <pvTaskIncrementMutexHeldCount>
 800779c:	4602      	mov	r2, r0
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fdde 	bl	8008370 <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ba:	4b54      	ldr	r3, [pc, #336]	; (800790c <xQueueSemaphoreTake+0x214>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ca:	f001 faf7 	bl	8008dbc <vPortExitCritical>
				return pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e097      	b.n	8007902 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d111      	bne.n	80077fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077f4:	f001 fae2 	bl	8008dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e082      	b.n	8007902 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007802:	f107 030c 	add.w	r3, r7, #12
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fe14 	bl	8008434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007810:	f001 fad4 	bl	8008dbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007814:	f000 fbbe 	bl	8007f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007818:	f001 faa0 	bl	8008d5c <vPortEnterCritical>
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007822:	b25b      	sxtb	r3, r3
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007828:	d103      	bne.n	8007832 <xQueueSemaphoreTake+0x13a>
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007838:	b25b      	sxtb	r3, r3
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d103      	bne.n	8007848 <xQueueSemaphoreTake+0x150>
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007848:	f001 fab8 	bl	8008dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800784c:	463a      	mov	r2, r7
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fe03 	bl	8008460 <xTaskCheckForTimeOut>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d132      	bne.n	80078c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007862:	f000 f928 	bl	8007ab6 <prvIsQueueEmpty>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d026      	beq.n	80078ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007874:	f001 fa72 	bl	8008d5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 ff59 	bl	8008734 <xTaskPriorityInherit>
 8007882:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007884:	f001 fa9a 	bl	8008dbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fd49 	bl	8008328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007898:	f000 f8bb 	bl	8007a12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800789c:	f000 fb88 	bl	8007fb0 <xTaskResumeAll>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f47f af68 	bne.w	8007778 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <xQueueSemaphoreTake+0x214>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	e75e      	b.n	8007778 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078bc:	f000 f8a9 	bl	8007a12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078c0:	f000 fb76 	bl	8007fb0 <xTaskResumeAll>
 80078c4:	e758      	b.n	8007778 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c8:	f000 f8a3 	bl	8007a12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078cc:	f000 fb70 	bl	8007fb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078d2:	f000 f8f0 	bl	8007ab6 <prvIsQueueEmpty>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f43f af4d 	beq.w	8007778 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078e4:	f001 fa3a 	bl	8008d5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ea:	f000 f811 	bl	8007910 <prvGetDisinheritPriorityAfterTimeout>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 f828 	bl	800894c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078fc:	f001 fa5e 	bl	8008dbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007902:	4618      	mov	r0, r3
 8007904:	3738      	adds	r7, #56	; 0x38
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1c3 0307 	rsb	r3, r3, #7
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e001      	b.n	8007932 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007932:	68fb      	ldr	r3, [r7, #12]
	}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr

0800793e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10d      	bne.n	8007978 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d14d      	bne.n	8007a00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 ff69 	bl	8008840 <xTaskPriorityDisinherit>
 800796e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	e043      	b.n	8007a00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d119      	bne.n	80079b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6898      	ldr	r0, [r3, #8]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	461a      	mov	r2, r3
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	f001 fcf3 	bl	8009374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d32b      	bcc.n	8007a00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	e026      	b.n	8007a00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68d8      	ldr	r0, [r3, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	461a      	mov	r2, r3
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	f001 fcd9 	bl	8009374 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	425b      	negs	r3, r3
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d207      	bcs.n	80079ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	425b      	negs	r3, r3
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d105      	bne.n	8007a00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a08:	697b      	ldr	r3, [r7, #20]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a1a:	f001 f99f 	bl	8008d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a26:	e011      	b.n	8007a4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d012      	beq.n	8007a56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fc9b 	bl	8008370 <xTaskRemoveFromEventList>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a40:	f000 fd70 	bl	8008524 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dce9      	bgt.n	8007a28 <prvUnlockQueue+0x16>
 8007a54:	e000      	b.n	8007a58 <prvUnlockQueue+0x46>
					break;
 8007a56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a60:	f001 f9ac 	bl	8008dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a64:	f001 f97a 	bl	8008d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a70:	e011      	b.n	8007a96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d012      	beq.n	8007aa0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fc76 	bl	8008370 <xTaskRemoveFromEventList>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a8a:	f000 fd4b 	bl	8008524 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dce9      	bgt.n	8007a72 <prvUnlockQueue+0x60>
 8007a9e:	e000      	b.n	8007aa2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aa0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007aaa:	f001 f987 	bl	8008dbc <vPortExitCritical>
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007abe:	f001 f94d 	bl	8008d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e001      	b.n	8007ad4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ad4:	f001 f972 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007aea:	f001 f937 	bl	8008d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d102      	bne.n	8007b00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e001      	b.n	8007b04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b04:	f001 f95a 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b08e      	sub	sp, #56	; 0x38
 8007b16:	af04      	add	r7, sp, #16
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	623b      	str	r3, [r7, #32]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	61fb      	str	r3, [r7, #28]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b58:	23e0      	movs	r3, #224	; 0xe0
 8007b5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2be0      	cmp	r3, #224	; 0xe0
 8007b60:	d00a      	beq.n	8007b78 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	61bb      	str	r3, [r7, #24]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01e      	beq.n	8007bbc <xTaskCreateStatic+0xaa>
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01b      	beq.n	8007bbc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b96:	2300      	movs	r3, #0
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	9302      	str	r3, [sp, #8]
 8007b9e:	f107 0314 	add.w	r3, r7, #20
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f850 	bl	8007c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bb6:	f000 f8e5 	bl	8007d84 <prvAddNewTaskToReadyList>
 8007bba:	e001      	b.n	8007bc0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bc0:	697b      	ldr	r3, [r7, #20]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3728      	adds	r7, #40	; 0x28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b08c      	sub	sp, #48	; 0x30
 8007bce:	af04      	add	r7, sp, #16
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	603b      	str	r3, [r7, #0]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 f9bc 	bl	8008f5c <pvPortMalloc>
 8007be4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00e      	beq.n	8007c0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007bec:	20e0      	movs	r0, #224	; 0xe0
 8007bee:	f001 f9b5 	bl	8008f5c <pvPortMalloc>
 8007bf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8007c00:	e005      	b.n	8007c0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c02:	6978      	ldr	r0, [r7, #20]
 8007c04:	f001 fa6e 	bl	80090e4 <vPortFree>
 8007c08:	e001      	b.n	8007c0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f80e 	bl	8007c54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c38:	69f8      	ldr	r0, [r7, #28]
 8007c3a:	f000 f8a3 	bl	8007d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e002      	b.n	8007c4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
	}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f023 0307 	bic.w	r3, r3, #7
 8007c7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	617b      	str	r3, [r7, #20]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	e012      	b.n	8007cc8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	7819      	ldrb	r1, [r3, #0]
 8007caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	4413      	add	r3, r2
 8007cb0:	3334      	adds	r3, #52	; 0x34
 8007cb2:	460a      	mov	r2, r1
 8007cb4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d006      	beq.n	8007cd0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b3b      	cmp	r3, #59	; 0x3b
 8007ccc:	d9e9      	bls.n	8007ca2 <prvInitialiseNewTask+0x4e>
 8007cce:	e000      	b.n	8007cd2 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007cd0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	d901      	bls.n	8007ce4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cee:	671a      	str	r2, [r3, #112]	; 0x70
		pxNewTCB->uxMutexesHeld = 0;
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	675a      	str	r2, [r3, #116]	; 0x74
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff f9e7 	bl	80070ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	3318      	adds	r3, #24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff f9e2 	bl	80070ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	f1c3 0207 	rsb	r2, r3, #7
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	3378      	adds	r3, #120	; 0x78
 8007d34:	2260      	movs	r2, #96	; 0x60
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fb29 	bl	8009390 <memset>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <prvInitialiseNewTask+0x124>)
 8007d42:	67da      	str	r2, [r3, #124]	; 0x7c
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <prvInitialiseNewTask+0x128>)
 8007d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <prvInitialiseNewTask+0x12c>)
 8007d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	69b8      	ldr	r0, [r7, #24]
 8007d5a:	f000 ff11 	bl	8008b80 <pxPortInitialiseStack>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d70:	bf00      	nop
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08009654 	.word	0x08009654
 8007d7c:	08009674 	.word	0x08009674
 8007d80:	08009634 	.word	0x08009634

08007d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d8c:	f000 ffe6 	bl	8008d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d90:	4b2a      	ldr	r3, [pc, #168]	; (8007e3c <prvAddNewTaskToReadyList+0xb8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <prvAddNewTaskToReadyList+0xb8>)
 8007d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d9a:	4b29      	ldr	r3, [pc, #164]	; (8007e40 <prvAddNewTaskToReadyList+0xbc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007da2:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <prvAddNewTaskToReadyList+0xbc>)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007da8:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <prvAddNewTaskToReadyList+0xb8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d110      	bne.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007db0:	f000 fbdc 	bl	800856c <prvInitialiseTaskLists>
 8007db4:	e00d      	b.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007db6:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <prvAddNewTaskToReadyList+0xc0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <prvAddNewTaskToReadyList+0xbc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d802      	bhi.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dcc:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <prvAddNewTaskToReadyList+0xbc>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <prvAddNewTaskToReadyList+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	4a1b      	ldr	r2, [pc, #108]	; (8007e48 <prvAddNewTaskToReadyList+0xc4>)
 8007dda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	2201      	movs	r2, #1
 8007de2:	409a      	lsls	r2, r3
 8007de4:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <prvAddNewTaskToReadyList+0xcc>)
 8007dfc:	441a      	add	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7ff f96e 	bl	80070e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e0a:	f000 ffd7 	bl	8008dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <prvAddNewTaskToReadyList+0xc0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <prvAddNewTaskToReadyList+0xbc>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d207      	bcs.n	8007e34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <prvAddNewTaskToReadyList+0xd0>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	2000039c 	.word	0x2000039c
 8007e40:	2000029c 	.word	0x2000029c
 8007e44:	200003a8 	.word	0x200003a8
 8007e48:	200003b8 	.word	0x200003b8
 8007e4c:	200003a4 	.word	0x200003a4
 8007e50:	200002a0 	.word	0x200002a0
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d017      	beq.n	8007e9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <vTaskDelay+0x60>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <vTaskDelay+0x30>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e88:	f000 f884 	bl	8007f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fe10 	bl	8008ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e94:	f000 f88c 	bl	8007fb0 <xTaskResumeAll>
 8007e98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <vTaskDelay+0x64>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200003c4 	.word	0x200003c4
 8007ebc:	e000ed04 	.word	0xe000ed04

08007ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ece:	463a      	mov	r2, r7
 8007ed0:	1d39      	adds	r1, r7, #4
 8007ed2:	f107 0308 	add.w	r3, r7, #8
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f9 f8ce 	bl	8001078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	9202      	str	r2, [sp, #8]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	460a      	mov	r2, r1
 8007eee:	4921      	ldr	r1, [pc, #132]	; (8007f74 <vTaskStartScheduler+0xb4>)
 8007ef0:	4821      	ldr	r0, [pc, #132]	; (8007f78 <vTaskStartScheduler+0xb8>)
 8007ef2:	f7ff fe0e 	bl	8007b12 <xTaskCreateStatic>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4a20      	ldr	r2, [pc, #128]	; (8007f7c <vTaskStartScheduler+0xbc>)
 8007efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <vTaskStartScheduler+0xbc>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f04:	2301      	movs	r3, #1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e001      	b.n	8007f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d11b      	bne.n	8007f4c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	613b      	str	r3, [r7, #16]
}
 8007f26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <vTaskStartScheduler+0xc0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3378      	adds	r3, #120	; 0x78
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <vTaskStartScheduler+0xc4>)
 8007f30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <vTaskStartScheduler+0xc8>)
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f3a:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <vTaskStartScheduler+0xcc>)
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f40:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <vTaskStartScheduler+0xd0>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f46:	f000 fe97 	bl	8008c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f4a:	e00e      	b.n	8007f6a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f52:	d10a      	bne.n	8007f6a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	60fb      	str	r3, [r7, #12]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <vTaskStartScheduler+0xa8>
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	08009614 	.word	0x08009614
 8007f78:	0800853d 	.word	0x0800853d
 8007f7c:	200003c0 	.word	0x200003c0
 8007f80:	2000029c 	.word	0x2000029c
 8007f84:	20000010 	.word	0x20000010
 8007f88:	200003bc 	.word	0x200003bc
 8007f8c:	200003a8 	.word	0x200003a8
 8007f90:	200003a0 	.word	0x200003a0

08007f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <vTaskSuspendAll+0x18>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	4a03      	ldr	r2, [pc, #12]	; (8007fac <vTaskSuspendAll+0x18>)
 8007fa0:	6013      	str	r3, [r2, #0]
}
 8007fa2:	bf00      	nop
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	200003c4 	.word	0x200003c4

08007fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fbe:	4b41      	ldr	r3, [pc, #260]	; (80080c4 <xTaskResumeAll+0x114>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <xTaskResumeAll+0x2c>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	603b      	str	r3, [r7, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fdc:	f000 febe 	bl	8008d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fe0:	4b38      	ldr	r3, [pc, #224]	; (80080c4 <xTaskResumeAll+0x114>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	4a37      	ldr	r2, [pc, #220]	; (80080c4 <xTaskResumeAll+0x114>)
 8007fe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fea:	4b36      	ldr	r3, [pc, #216]	; (80080c4 <xTaskResumeAll+0x114>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d161      	bne.n	80080b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ff2:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <xTaskResumeAll+0x118>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d05d      	beq.n	80080b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ffa:	e02e      	b.n	800805a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ffc:	4b33      	ldr	r3, [pc, #204]	; (80080cc <xTaskResumeAll+0x11c>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3318      	adds	r3, #24
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff f8c7 	bl	800719c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff f8c2 	bl	800719c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	2201      	movs	r2, #1
 800801e:	409a      	lsls	r2, r3
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <xTaskResumeAll+0x120>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4313      	orrs	r3, r2
 8008026:	4a2a      	ldr	r2, [pc, #168]	; (80080d0 <xTaskResumeAll+0x120>)
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4a27      	ldr	r2, [pc, #156]	; (80080d4 <xTaskResumeAll+0x124>)
 8008038:	441a      	add	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7ff f850 	bl	80070e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <xTaskResumeAll+0x128>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008054:	4b21      	ldr	r3, [pc, #132]	; (80080dc <xTaskResumeAll+0x12c>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <xTaskResumeAll+0x11c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1cc      	bne.n	8007ffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008068:	f000 fb22 	bl	80086b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800806c:	4b1c      	ldr	r3, [pc, #112]	; (80080e0 <xTaskResumeAll+0x130>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d010      	beq.n	800809a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008078:	f000 f836 	bl	80080e8 <xTaskIncrementTick>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <xTaskResumeAll+0x12c>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3b01      	subs	r3, #1
 800808c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f1      	bne.n	8008078 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008094:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <xTaskResumeAll+0x130>)
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <xTaskResumeAll+0x12c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <xTaskResumeAll+0x134>)
 80080a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080b6:	f000 fe81 	bl	8008dbc <vPortExitCritical>

	return xAlreadyYielded;
 80080ba:	68bb      	ldr	r3, [r7, #8]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	200003c4 	.word	0x200003c4
 80080c8:	2000039c 	.word	0x2000039c
 80080cc:	2000035c 	.word	0x2000035c
 80080d0:	200003a4 	.word	0x200003a4
 80080d4:	200002a0 	.word	0x200002a0
 80080d8:	2000029c 	.word	0x2000029c
 80080dc:	200003b0 	.word	0x200003b0
 80080e0:	200003ac 	.word	0x200003ac
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f2:	4b51      	ldr	r3, [pc, #324]	; (8008238 <xTaskIncrementTick+0x150>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f040 808d 	bne.w	8008216 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080fc:	4b4f      	ldr	r3, [pc, #316]	; (800823c <xTaskIncrementTick+0x154>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008104:	4a4d      	ldr	r2, [pc, #308]	; (800823c <xTaskIncrementTick+0x154>)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d120      	bne.n	8008152 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008110:	4b4b      	ldr	r3, [pc, #300]	; (8008240 <xTaskIncrementTick+0x158>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <xTaskIncrementTick+0x48>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	603b      	str	r3, [r7, #0]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xTaskIncrementTick+0x46>
 8008130:	4b43      	ldr	r3, [pc, #268]	; (8008240 <xTaskIncrementTick+0x158>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	4b43      	ldr	r3, [pc, #268]	; (8008244 <xTaskIncrementTick+0x15c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a41      	ldr	r2, [pc, #260]	; (8008240 <xTaskIncrementTick+0x158>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4a41      	ldr	r2, [pc, #260]	; (8008244 <xTaskIncrementTick+0x15c>)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	4b40      	ldr	r3, [pc, #256]	; (8008248 <xTaskIncrementTick+0x160>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3301      	adds	r3, #1
 800814a:	4a3f      	ldr	r2, [pc, #252]	; (8008248 <xTaskIncrementTick+0x160>)
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	f000 faaf 	bl	80086b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008152:	4b3e      	ldr	r3, [pc, #248]	; (800824c <xTaskIncrementTick+0x164>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	429a      	cmp	r2, r3
 800815a:	d34d      	bcc.n	80081f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815c:	4b38      	ldr	r3, [pc, #224]	; (8008240 <xTaskIncrementTick+0x158>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xTaskIncrementTick+0x82>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xTaskIncrementTick+0x84>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	4b36      	ldr	r3, [pc, #216]	; (800824c <xTaskIncrementTick+0x164>)
 8008172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008176:	601a      	str	r2, [r3, #0]
					break;
 8008178:	e03e      	b.n	80081f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <xTaskIncrementTick+0x158>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d203      	bcs.n	800819a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008192:	4a2e      	ldr	r2, [pc, #184]	; (800824c <xTaskIncrementTick+0x164>)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6013      	str	r3, [r2, #0]
						break;
 8008198:	e02e      	b.n	80081f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fffc 	bl	800719c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3318      	adds	r3, #24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fff3 	bl	800719c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	2201      	movs	r2, #1
 80081bc:	409a      	lsls	r2, r3
 80081be:	4b24      	ldr	r3, [pc, #144]	; (8008250 <xTaskIncrementTick+0x168>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	4a22      	ldr	r2, [pc, #136]	; (8008250 <xTaskIncrementTick+0x168>)
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <xTaskIncrementTick+0x16c>)
 80081d6:	441a      	add	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	3304      	adds	r3, #4
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f7fe ff81 	bl	80070e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <xTaskIncrementTick+0x170>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d3b4      	bcc.n	800815c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081f2:	2301      	movs	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f6:	e7b1      	b.n	800815c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081f8:	4b17      	ldr	r3, [pc, #92]	; (8008258 <xTaskIncrementTick+0x170>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fe:	4915      	ldr	r1, [pc, #84]	; (8008254 <xTaskIncrementTick+0x16c>)
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d907      	bls.n	8008220 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008210:	2301      	movs	r3, #1
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e004      	b.n	8008220 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <xTaskIncrementTick+0x174>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	4a0f      	ldr	r2, [pc, #60]	; (800825c <xTaskIncrementTick+0x174>)
 800821e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008220:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <xTaskIncrementTick+0x178>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800822c:	697b      	ldr	r3, [r7, #20]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200003c4 	.word	0x200003c4
 800823c:	200003a0 	.word	0x200003a0
 8008240:	20000354 	.word	0x20000354
 8008244:	20000358 	.word	0x20000358
 8008248:	200003b4 	.word	0x200003b4
 800824c:	200003bc 	.word	0x200003bc
 8008250:	200003a4 	.word	0x200003a4
 8008254:	200002a0 	.word	0x200002a0
 8008258:	2000029c 	.word	0x2000029c
 800825c:	200003ac 	.word	0x200003ac
 8008260:	200003b0 	.word	0x200003b0

08008264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800826a:	4b29      	ldr	r3, [pc, #164]	; (8008310 <vTaskSwitchContext+0xac>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008272:	4b28      	ldr	r3, [pc, #160]	; (8008314 <vTaskSwitchContext+0xb0>)
 8008274:	2201      	movs	r2, #1
 8008276:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008278:	e044      	b.n	8008304 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800827a:	4b26      	ldr	r3, [pc, #152]	; (8008314 <vTaskSwitchContext+0xb0>)
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <vTaskSwitchContext+0xb4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	fab3 f383 	clz	r3, r3
 800828c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	f1c3 031f 	rsb	r3, r3, #31
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	4921      	ldr	r1, [pc, #132]	; (800831c <vTaskSwitchContext+0xb8>)
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <vTaskSwitchContext+0x5a>
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a14      	ldr	r2, [pc, #80]	; (800831c <vTaskSwitchContext+0xb8>)
 80082cc:	4413      	add	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3308      	adds	r3, #8
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d104      	bne.n	80082f0 <vTaskSwitchContext+0x8c>
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	605a      	str	r2, [r3, #4]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <vTaskSwitchContext+0xbc>)
 80082f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <vTaskSwitchContext+0xbc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3378      	adds	r3, #120	; 0x78
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <vTaskSwitchContext+0xc0>)
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200003c4 	.word	0x200003c4
 8008314:	200003b0 	.word	0x200003b0
 8008318:	200003a4 	.word	0x200003a4
 800831c:	200002a0 	.word	0x200002a0
 8008320:	2000029c 	.word	0x2000029c
 8008324:	20000010 	.word	0x20000010

08008328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	60fb      	str	r3, [r7, #12]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <vTaskPlaceOnEventList+0x44>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3318      	adds	r3, #24
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fe fee8 	bl	800712c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800835c:	2101      	movs	r1, #1
 800835e:	6838      	ldr	r0, [r7, #0]
 8008360:	f000 fba8 	bl	8008ab4 <prvAddCurrentTaskToDelayedList>
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	2000029c 	.word	0x2000029c

08008370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	3318      	adds	r3, #24
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fefb 	bl	800719c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <xTaskRemoveFromEventList+0xac>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11c      	bne.n	80083e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fef2 	bl	800719c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	2201      	movs	r2, #1
 80083be:	409a      	lsls	r2, r3
 80083c0:	4b17      	ldr	r3, [pc, #92]	; (8008420 <xTaskRemoveFromEventList+0xb0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	4a16      	ldr	r2, [pc, #88]	; (8008420 <xTaskRemoveFromEventList+0xb0>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a13      	ldr	r2, [pc, #76]	; (8008424 <xTaskRemoveFromEventList+0xb4>)
 80083d8:	441a      	add	r2, r3
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3304      	adds	r3, #4
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f7fe fe80 	bl	80070e6 <vListInsertEnd>
 80083e6:	e005      	b.n	80083f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3318      	adds	r3, #24
 80083ec:	4619      	mov	r1, r3
 80083ee:	480e      	ldr	r0, [pc, #56]	; (8008428 <xTaskRemoveFromEventList+0xb8>)
 80083f0:	f7fe fe79 	bl	80070e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <xTaskRemoveFromEventList+0xbc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	429a      	cmp	r2, r3
 8008400:	d905      	bls.n	800840e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008402:	2301      	movs	r3, #1
 8008404:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008406:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <xTaskRemoveFromEventList+0xc0>)
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e001      	b.n	8008412 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008412:	697b      	ldr	r3, [r7, #20]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	200003c4 	.word	0x200003c4
 8008420:	200003a4 	.word	0x200003a4
 8008424:	200002a0 	.word	0x200002a0
 8008428:	2000035c 	.word	0x2000035c
 800842c:	2000029c 	.word	0x2000029c
 8008430:	200003b0 	.word	0x200003b0

08008434 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <vTaskInternalSetTimeOutState+0x24>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <vTaskInternalSetTimeOutState+0x28>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	605a      	str	r2, [r3, #4]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200003b4 	.word	0x200003b4
 800845c:	200003a0 	.word	0x200003a0

08008460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	613b      	str	r3, [r7, #16]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60fb      	str	r3, [r7, #12]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084a2:	f000 fc5b 	bl	8008d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084a6:	4b1d      	ldr	r3, [pc, #116]	; (800851c <xTaskCheckForTimeOut+0xbc>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084be:	d102      	bne.n	80084c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e023      	b.n	800850e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	4b15      	ldr	r3, [pc, #84]	; (8008520 <xTaskCheckForTimeOut+0xc0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d007      	beq.n	80084e2 <xTaskCheckForTimeOut+0x82>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	e015      	b.n	800850e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d20b      	bcs.n	8008504 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad2      	subs	r2, r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff9b 	bl	8008434 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	e004      	b.n	800850e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800850a:	2301      	movs	r3, #1
 800850c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800850e:	f000 fc55 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 8008512:	69fb      	ldr	r3, [r7, #28]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	200003a0 	.word	0x200003a0
 8008520:	200003b4 	.word	0x200003b4

08008524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <vTaskMissedYield+0x14>)
 800852a:	2201      	movs	r2, #1
 800852c:	601a      	str	r2, [r3, #0]
}
 800852e:	bf00      	nop
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	200003b0 	.word	0x200003b0

0800853c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008544:	f000 f852 	bl	80085ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <prvIdleTask+0x28>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d9f9      	bls.n	8008544 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <prvIdleTask+0x2c>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008560:	e7f0      	b.n	8008544 <prvIdleTask+0x8>
 8008562:	bf00      	nop
 8008564:	200002a0 	.word	0x200002a0
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	e00c      	b.n	8008592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4a12      	ldr	r2, [pc, #72]	; (80085cc <prvInitialiseTaskLists+0x60>)
 8008584:	4413      	add	r3, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fd82 	bl	8007090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3301      	adds	r3, #1
 8008590:	607b      	str	r3, [r7, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b06      	cmp	r3, #6
 8008596:	d9ef      	bls.n	8008578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008598:	480d      	ldr	r0, [pc, #52]	; (80085d0 <prvInitialiseTaskLists+0x64>)
 800859a:	f7fe fd79 	bl	8007090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800859e:	480d      	ldr	r0, [pc, #52]	; (80085d4 <prvInitialiseTaskLists+0x68>)
 80085a0:	f7fe fd76 	bl	8007090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085a4:	480c      	ldr	r0, [pc, #48]	; (80085d8 <prvInitialiseTaskLists+0x6c>)
 80085a6:	f7fe fd73 	bl	8007090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085aa:	480c      	ldr	r0, [pc, #48]	; (80085dc <prvInitialiseTaskLists+0x70>)
 80085ac:	f7fe fd70 	bl	8007090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085b0:	480b      	ldr	r0, [pc, #44]	; (80085e0 <prvInitialiseTaskLists+0x74>)
 80085b2:	f7fe fd6d 	bl	8007090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <prvInitialiseTaskLists+0x78>)
 80085b8:	4a05      	ldr	r2, [pc, #20]	; (80085d0 <prvInitialiseTaskLists+0x64>)
 80085ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085bc:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <prvInitialiseTaskLists+0x7c>)
 80085be:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <prvInitialiseTaskLists+0x68>)
 80085c0:	601a      	str	r2, [r3, #0]
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200002a0 	.word	0x200002a0
 80085d0:	2000032c 	.word	0x2000032c
 80085d4:	20000340 	.word	0x20000340
 80085d8:	2000035c 	.word	0x2000035c
 80085dc:	20000370 	.word	0x20000370
 80085e0:	20000388 	.word	0x20000388
 80085e4:	20000354 	.word	0x20000354
 80085e8:	20000358 	.word	0x20000358

080085ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085f2:	e019      	b.n	8008628 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085f4:	f000 fbb2 	bl	8008d5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085f8:	4b10      	ldr	r3, [pc, #64]	; (800863c <prvCheckTasksWaitingTermination+0x50>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fdc9 	bl	800719c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800860a:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <prvCheckTasksWaitingTermination+0x54>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3b01      	subs	r3, #1
 8008610:	4a0b      	ldr	r2, [pc, #44]	; (8008640 <prvCheckTasksWaitingTermination+0x54>)
 8008612:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <prvCheckTasksWaitingTermination+0x58>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3b01      	subs	r3, #1
 800861a:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <prvCheckTasksWaitingTermination+0x58>)
 800861c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800861e:	f000 fbcd 	bl	8008dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f810 	bl	8008648 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <prvCheckTasksWaitingTermination+0x58>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e1      	bne.n	80085f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000370 	.word	0x20000370
 8008640:	2000039c 	.word	0x2000039c
 8008644:	20000384 	.word	0x20000384

08008648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3378      	adds	r3, #120	; 0x78
 8008654:	4618      	mov	r0, r3
 8008656:	f000 feb1 	bl	80093bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fd3b 	bl	80090e4 <vPortFree>
				vPortFree( pxTCB );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fd38 	bl	80090e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008674:	e018      	b.n	80086a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800867c:	2b01      	cmp	r3, #1
 800867e:	d103      	bne.n	8008688 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fd2f 	bl	80090e4 <vPortFree>
	}
 8008686:	e00f      	b.n	80086a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800868e:	2b02      	cmp	r3, #2
 8008690:	d00a      	beq.n	80086a8 <prvDeleteTCB+0x60>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <prvDeleteTCB+0x5e>
	}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <prvResetNextTaskUnblockTime+0x40>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <prvResetNextTaskUnblockTime+0x14>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <prvResetNextTaskUnblockTime+0x16>
 80086c4:	2300      	movs	r3, #0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvResetNextTaskUnblockTime+0x44>)
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086d2:	e008      	b.n	80086e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <prvResetNextTaskUnblockTime+0x40>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <prvResetNextTaskUnblockTime+0x44>)
 80086e4:	6013      	str	r3, [r2, #0]
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	20000354 	.word	0x20000354
 80086f4:	200003bc 	.word	0x200003bc

080086f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086fe:	4b0b      	ldr	r3, [pc, #44]	; (800872c <xTaskGetSchedulerState+0x34>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008706:	2301      	movs	r3, #1
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	e008      	b.n	800871e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870c:	4b08      	ldr	r3, [pc, #32]	; (8008730 <xTaskGetSchedulerState+0x38>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008714:	2302      	movs	r3, #2
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	e001      	b.n	800871e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800871a:	2300      	movs	r3, #0
 800871c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800871e:	687b      	ldr	r3, [r7, #4]
	}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	200003a8 	.word	0x200003a8
 8008730:	200003c4 	.word	0x200003c4

08008734 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d06e      	beq.n	8008828 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874e:	4b39      	ldr	r3, [pc, #228]	; (8008834 <xTaskPriorityInherit+0x100>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d25e      	bcs.n	8008816 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	db06      	blt.n	800876e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008760:	4b34      	ldr	r3, [pc, #208]	; (8008834 <xTaskPriorityInherit+0x100>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	f1c3 0207 	rsb	r2, r3, #7
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6959      	ldr	r1, [r3, #20]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4a2e      	ldr	r2, [pc, #184]	; (8008838 <xTaskPriorityInherit+0x104>)
 8008780:	4413      	add	r3, r2
 8008782:	4299      	cmp	r1, r3
 8008784:	d101      	bne.n	800878a <xTaskPriorityInherit+0x56>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xTaskPriorityInherit+0x58>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d03a      	beq.n	8008806 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fd01 	bl	800719c <uxListRemove>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d115      	bne.n	80087cc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4924      	ldr	r1, [pc, #144]	; (8008838 <xTaskPriorityInherit+0x104>)
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <xTaskPriorityInherit+0x98>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	2201      	movs	r2, #1
 80087bc:	fa02 f303 	lsl.w	r3, r2, r3
 80087c0:	43da      	mvns	r2, r3
 80087c2:	4b1e      	ldr	r3, [pc, #120]	; (800883c <xTaskPriorityInherit+0x108>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4013      	ands	r3, r2
 80087c8:	4a1c      	ldr	r2, [pc, #112]	; (800883c <xTaskPriorityInherit+0x108>)
 80087ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087cc:	4b19      	ldr	r3, [pc, #100]	; (8008834 <xTaskPriorityInherit+0x100>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	2201      	movs	r2, #1
 80087dc:	409a      	lsls	r2, r3
 80087de:	4b17      	ldr	r3, [pc, #92]	; (800883c <xTaskPriorityInherit+0x108>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <xTaskPriorityInherit+0x108>)
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4a10      	ldr	r2, [pc, #64]	; (8008838 <xTaskPriorityInherit+0x104>)
 80087f6:	441a      	add	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe fc71 	bl	80070e6 <vListInsertEnd>
 8008804:	e004      	b.n	8008810 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <xTaskPriorityInherit+0x100>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e008      	b.n	8008828 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <xTaskPriorityInherit+0x100>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	429a      	cmp	r2, r3
 8008822:	d201      	bcs.n	8008828 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008828:	68fb      	ldr	r3, [r7, #12]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	2000029c 	.word	0x2000029c
 8008838:	200002a0 	.word	0x200002a0
 800883c:	200003a4 	.word	0x200003a4

08008840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d06e      	beq.n	8008934 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008856:	4b3a      	ldr	r3, [pc, #232]	; (8008940 <xTaskPriorityDisinherit+0x100>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	429a      	cmp	r2, r3
 800885e:	d00a      	beq.n	8008876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60bb      	str	r3, [r7, #8]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008898:	1e5a      	subs	r2, r3, #1
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	675a      	str	r2, [r3, #116]	; 0x74

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d044      	beq.n	8008934 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d140      	bne.n	8008934 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc70 	bl	800719c <uxListRemove>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d115      	bne.n	80088ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	491f      	ldr	r1, [pc, #124]	; (8008944 <xTaskPriorityDisinherit+0x104>)
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	440b      	add	r3, r1
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xTaskPriorityDisinherit+0xae>
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	2201      	movs	r2, #1
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43da      	mvns	r2, r3
 80088e4:	4b18      	ldr	r3, [pc, #96]	; (8008948 <xTaskPriorityDisinherit+0x108>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4013      	ands	r3, r2
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <xTaskPriorityDisinherit+0x108>)
 80088ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	f1c3 0207 	rsb	r2, r3, #7
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	2201      	movs	r2, #1
 8008908:	409a      	lsls	r2, r3
 800890a:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <xTaskPriorityDisinherit+0x108>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	4a0d      	ldr	r2, [pc, #52]	; (8008948 <xTaskPriorityDisinherit+0x108>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4a08      	ldr	r2, [pc, #32]	; (8008944 <xTaskPriorityDisinherit+0x104>)
 8008922:	441a      	add	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fbdb 	bl	80070e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008934:	697b      	ldr	r3, [r7, #20]
	}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	2000029c 	.word	0x2000029c
 8008944:	200002a0 	.word	0x200002a0
 8008948:	200003a4 	.word	0x200003a4

0800894c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800895a:	2301      	movs	r3, #1
 800895c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 8088 	beq.w	8008a76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	60fb      	str	r3, [r7, #12]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d902      	bls.n	8008994 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e002      	b.n	800899a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d068      	beq.n	8008a76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d163      	bne.n	8008a76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089ae:	4b34      	ldr	r3, [pc, #208]	; (8008a80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d10a      	bne.n	80089ce <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60bb      	str	r3, [r7, #8]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	db04      	blt.n	80089ec <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f1c3 0207 	rsb	r2, r3, #7
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	6959      	ldr	r1, [r3, #20]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4a22      	ldr	r2, [pc, #136]	; (8008a84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80089fc:	4413      	add	r3, r2
 80089fe:	4299      	cmp	r1, r3
 8008a00:	d101      	bne.n	8008a06 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d034      	beq.n	8008a76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fbc3 	bl	800719c <uxListRemove>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d115      	bne.n	8008a48 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4918      	ldr	r1, [pc, #96]	; (8008a84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	2201      	movs	r2, #1
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	43da      	mvns	r2, r3
 8008a3e:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4013      	ands	r3, r2
 8008a44:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008a46:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	4a0c      	ldr	r2, [pc, #48]	; (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4a07      	ldr	r2, [pc, #28]	; (8008a84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a68:	441a      	add	r2, r3
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f7fe fb38 	bl	80070e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a76:	bf00      	nop
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	2000029c 	.word	0x2000029c
 8008a84:	200002a0 	.word	0x200002a0
 8008a88:	200003a4 	.word	0x200003a4

08008a8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d004      	beq.n	8008aa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	675a      	str	r2, [r3, #116]	; 0x74
		}

		return pxCurrentTCB;
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
	}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	2000029c 	.word	0x2000029c

08008ab4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008abe:	4b29      	ldr	r3, [pc, #164]	; (8008b64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac4:	4b28      	ldr	r3, [pc, #160]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fb66 	bl	800719c <uxListRemove>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10b      	bne.n	8008aee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008ad6:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	2201      	movs	r2, #1
 8008ade:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae2:	43da      	mvns	r2, r3
 8008ae4:	4b21      	ldr	r3, [pc, #132]	; (8008b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	4a20      	ldr	r2, [pc, #128]	; (8008b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008aec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af4:	d10a      	bne.n	8008b0c <prvAddCurrentTaskToDelayedList+0x58>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008afc:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	481a      	ldr	r0, [pc, #104]	; (8008b70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b06:	f7fe faee 	bl	80070e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b0a:	e026      	b.n	8008b5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b14:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d209      	bcs.n	8008b38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b24:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7fe fafb 	bl	800712c <vListInsert>
}
 8008b36:	e010      	b.n	8008b5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b38:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7fe faf1 	bl	800712c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d202      	bcs.n	8008b5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b54:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6013      	str	r3, [r2, #0]
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200003a0 	.word	0x200003a0
 8008b68:	2000029c 	.word	0x2000029c
 8008b6c:	200003a4 	.word	0x200003a4
 8008b70:	20000388 	.word	0x20000388
 8008b74:	20000358 	.word	0x20000358
 8008b78:	20000354 	.word	0x20000354
 8008b7c:	200003bc 	.word	0x200003bc

08008b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f023 0201 	bic.w	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <pxPortInitialiseStack+0x54>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b14      	subs	r3, #20
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b20      	subs	r3, #32
 8008bc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr
 8008bd4:	08008bd9 	.word	0x08008bd9

08008bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008be2:	4b12      	ldr	r3, [pc, #72]	; (8008c2c <prvTaskExitError+0x54>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bea:	d00a      	beq.n	8008c02 <prvTaskExitError+0x2a>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60fb      	str	r3, [r7, #12]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <prvTaskExitError+0x28>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
}
 8008c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c16:	bf00      	nop
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0fc      	beq.n	8008c18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	2000000c 	.word	0x2000000c

08008c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <pxCurrentTCBConst2>)
 8008c32:	6819      	ldr	r1, [r3, #0]
 8008c34:	6808      	ldr	r0, [r1, #0]
 8008c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c3a:	f380 8809 	msr	PSP, r0
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008c4e:	4770      	bx	lr

08008c50 <pxCurrentTCBConst2>:
 8008c50:	2000029c 	.word	0x2000029c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop

08008c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <prvPortStartFirstTask+0x1c>)
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f380 8808 	msr	MSP, r0
 8008c62:	b662      	cpsie	i
 8008c64:	b661      	cpsie	f
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	df00      	svc	0
 8008c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c72:	bf00      	nop
 8008c74:	e000ed08 	.word	0xe000ed08

08008c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c7e:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <xPortStartScheduler+0xd0>)
 8008c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	4b2a      	ldr	r3, [pc, #168]	; (8008d4c <xPortStartScheduler+0xd4>)
 8008ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ca6:	4b2a      	ldr	r3, [pc, #168]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008ca8:	2207      	movs	r2, #7
 8008caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cac:	e009      	b.n	8008cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cae:	4b28      	ldr	r3, [pc, #160]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cca:	2b80      	cmp	r3, #128	; 0x80
 8008ccc:	d0ef      	beq.n	8008cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cce:	4b20      	ldr	r3, [pc, #128]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1c3 0307 	rsb	r3, r3, #7
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d00a      	beq.n	8008cf0 <xPortStartScheduler+0x78>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	60bb      	str	r3, [r7, #8]
}
 8008cec:	bf00      	nop
 8008cee:	e7fe      	b.n	8008cee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cf0:	4b17      	ldr	r3, [pc, #92]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cf8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cfa:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d02:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <xPortStartScheduler+0xd8>)
 8008d04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <xPortStartScheduler+0xdc>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <xPortStartScheduler+0xdc>)
 8008d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <xPortStartScheduler+0xdc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <xPortStartScheduler+0xdc>)
 8008d20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d26:	f000 f8b9 	bl	8008e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d2a:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <xPortStartScheduler+0xe0>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d30:	f7ff ff92 	bl	8008c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d34:	f7ff fa96 	bl	8008264 <vTaskSwitchContext>
	prvTaskExitError();
 8008d38:	f7ff ff4e 	bl	8008bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	e000e400 	.word	0xe000e400
 8008d4c:	200003c8 	.word	0x200003c8
 8008d50:	200003cc 	.word	0x200003cc
 8008d54:	e000ed20 	.word	0xe000ed20
 8008d58:	2000000c 	.word	0x2000000c

08008d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <vPortEnterCritical+0x58>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	4a0d      	ldr	r2, [pc, #52]	; (8008db4 <vPortEnterCritical+0x58>)
 8008d7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <vPortEnterCritical+0x58>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d10f      	bne.n	8008da8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d88:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <vPortEnterCritical+0x5c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	603b      	str	r3, [r7, #0]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <vPortEnterCritical+0x4a>
	}
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	2000000c 	.word	0x2000000c
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dc2:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <vPortExitCritical+0x4c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <vPortExitCritical+0x24>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	607b      	str	r3, [r7, #4]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <vPortExitCritical+0x4c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <vPortExitCritical+0x4c>)
 8008de8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dea:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <vPortExitCritical+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <vPortExitCritical+0x42>
 8008df2:	2300      	movs	r3, #0
 8008df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	f383 8811 	msr	BASEPRI, r3
}
 8008dfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bc80      	pop	{r7}
 8008e06:	4770      	bx	lr
 8008e08:	2000000c 	.word	0x2000000c
 8008e0c:	00000000 	.word	0x00000000

08008e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e20:	6010      	str	r0, [r2, #0]
 8008e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e2a:	f380 8811 	msr	BASEPRI, r0
 8008e2e:	f7ff fa19 	bl	8008264 <vTaskSwitchContext>
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e46:	f380 8809 	msr	PSP, r0
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	4770      	bx	lr

08008e50 <pxCurrentTCBConst>:
 8008e50:	2000029c 	.word	0x2000029c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7ff f939 	bl	80080e8 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <SysTick_Handler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	e000e010 	.word	0xe000e010
 8008ed0:	e000e018 	.word	0xe000e018
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ee6:	f3ef 8305 	mrs	r3, IPSR
 8008eea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d914      	bls.n	8008f1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ef2:	4a16      	ldr	r2, [pc, #88]	; (8008f4c <vPortValidateInterruptPriority+0x6c>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008efc:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <vPortValidateInterruptPriority+0x70>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	7afa      	ldrb	r2, [r7, #11]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d20a      	bcs.n	8008f1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	607b      	str	r3, [r7, #4]
}
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <vPortValidateInterruptPriority+0x74>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <vPortValidateInterruptPriority+0x78>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d90a      	bls.n	8008f42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	603b      	str	r3, [r7, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <vPortValidateInterruptPriority+0x60>
	}
 8008f42:	bf00      	nop
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr
 8008f4c:	e000e3f0 	.word	0xe000e3f0
 8008f50:	200003c8 	.word	0x200003c8
 8008f54:	e000ed0c 	.word	0xe000ed0c
 8008f58:	200003cc 	.word	0x200003cc

08008f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f68:	f7ff f814 	bl	8007f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f6c:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <pvPortMalloc+0x174>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f74:	f000 f910 	bl	8009198 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f78:	4b56      	ldr	r3, [pc, #344]	; (80090d4 <pvPortMalloc+0x178>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f040 808e 	bne.w	80090a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01d      	beq.n	8008fc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d014      	beq.n	8008fc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f023 0307 	bic.w	r3, r3, #7
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f003 0307 	and.w	r3, r3, #7
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <pvPortMalloc+0x6c>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	617b      	str	r3, [r7, #20]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d069      	beq.n	80090a2 <pvPortMalloc+0x146>
 8008fce:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <pvPortMalloc+0x17c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d864      	bhi.n	80090a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fd8:	4b40      	ldr	r3, [pc, #256]	; (80090dc <pvPortMalloc+0x180>)
 8008fda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fdc:	4b3f      	ldr	r3, [pc, #252]	; (80090dc <pvPortMalloc+0x180>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fe2:	e004      	b.n	8008fee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d903      	bls.n	8009000 <pvPortMalloc+0xa4>
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1f1      	bne.n	8008fe4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009000:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <pvPortMalloc+0x174>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009006:	429a      	cmp	r2, r3
 8009008:	d04b      	beq.n	80090a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2208      	movs	r2, #8
 8009010:	4413      	add	r3, r2
 8009012:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	2308      	movs	r3, #8
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	429a      	cmp	r2, r3
 800902a:	d91f      	bls.n	800906c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <pvPortMalloc+0xf8>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	613b      	str	r3, [r7, #16]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009066:	69b8      	ldr	r0, [r7, #24]
 8009068:	f000 f8f8 	bl	800925c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800906c:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <pvPortMalloc+0x17c>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <pvPortMalloc+0x17c>)
 8009078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800907a:	4b17      	ldr	r3, [pc, #92]	; (80090d8 <pvPortMalloc+0x17c>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <pvPortMalloc+0x184>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d203      	bcs.n	800908e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <pvPortMalloc+0x17c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <pvPortMalloc+0x184>)
 800908c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <pvPortMalloc+0x178>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	431a      	orrs	r2, r3
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090a2:	f7fe ff85 	bl	8007fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <pvPortMalloc+0x16a>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <pvPortMalloc+0x168>
	return pvReturn;
 80090c6:	69fb      	ldr	r3, [r7, #28]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3728      	adds	r7, #40	; 0x28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20003ba8 	.word	0x20003ba8
 80090d4:	20003bb4 	.word	0x20003bb4
 80090d8:	20003bac 	.word	0x20003bac
 80090dc:	20003ba0 	.word	0x20003ba0
 80090e0:	20003bb0 	.word	0x20003bb0

080090e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d048      	beq.n	8009188 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090f6:	2308      	movs	r3, #8
 80090f8:	425b      	negs	r3, r3
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4413      	add	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	4b21      	ldr	r3, [pc, #132]	; (8009190 <vPortFree+0xac>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4013      	ands	r3, r2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <vPortFree+0x44>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	60fb      	str	r3, [r7, #12]
}
 8009124:	bf00      	nop
 8009126:	e7fe      	b.n	8009126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <vPortFree+0x62>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60bb      	str	r3, [r7, #8]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <vPortFree+0xac>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4013      	ands	r3, r2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d019      	beq.n	8009188 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d115      	bne.n	8009188 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortFree+0xac>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	43db      	mvns	r3, r3
 8009166:	401a      	ands	r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800916c:	f7fe ff12 	bl	8007f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <vPortFree+0xb0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4413      	add	r3, r2
 800917a:	4a06      	ldr	r2, [pc, #24]	; (8009194 <vPortFree+0xb0>)
 800917c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800917e:	6938      	ldr	r0, [r7, #16]
 8009180:	f000 f86c 	bl	800925c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009184:	f7fe ff14 	bl	8007fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20003bb4 	.word	0x20003bb4
 8009194:	20003bac 	.word	0x20003bac

08009198 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800919e:	f243 73d0 	movw	r3, #14288	; 0x37d0
 80091a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091a4:	4b27      	ldr	r3, [pc, #156]	; (8009244 <prvHeapInit+0xac>)
 80091a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00c      	beq.n	80091cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3307      	adds	r3, #7
 80091b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0307 	bic.w	r3, r3, #7
 80091be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <prvHeapInit+0xac>)
 80091c8:	4413      	add	r3, r2
 80091ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <prvHeapInit+0xb0>)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091d6:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <prvHeapInit+0xb0>)
 80091d8:	2200      	movs	r2, #0
 80091da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4413      	add	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091e4:	2208      	movs	r2, #8
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f023 0307 	bic.w	r3, r3, #7
 80091f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a15      	ldr	r2, [pc, #84]	; (800924c <prvHeapInit+0xb4>)
 80091f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <prvHeapInit+0xb4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009202:	4b12      	ldr	r3, [pc, #72]	; (800924c <prvHeapInit+0xb4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	1ad2      	subs	r2, r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009218:	4b0c      	ldr	r3, [pc, #48]	; (800924c <prvHeapInit+0xb4>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <prvHeapInit+0xb8>)
 8009226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <prvHeapInit+0xbc>)
 800922e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009230:	4b09      	ldr	r3, [pc, #36]	; (8009258 <prvHeapInit+0xc0>)
 8009232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009236:	601a      	str	r2, [r3, #0]
}
 8009238:	bf00      	nop
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	200003d0 	.word	0x200003d0
 8009248:	20003ba0 	.word	0x20003ba0
 800924c:	20003ba8 	.word	0x20003ba8
 8009250:	20003bb0 	.word	0x20003bb0
 8009254:	20003bac 	.word	0x20003bac
 8009258:	20003bb4 	.word	0x20003bb4

0800925c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009264:	4b27      	ldr	r3, [pc, #156]	; (8009304 <prvInsertBlockIntoFreeList+0xa8>)
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e002      	b.n	8009270 <prvInsertBlockIntoFreeList+0x14>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d8f7      	bhi.n	800926a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	4413      	add	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	429a      	cmp	r2, r3
 800928a:	d108      	bne.n	800929e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	441a      	add	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d118      	bne.n	80092e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <prvInsertBlockIntoFreeList+0xac>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d00d      	beq.n	80092da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	441a      	add	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e008      	b.n	80092ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <prvInsertBlockIntoFreeList+0xac>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e003      	b.n	80092ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d002      	beq.n	80092fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr
 8009304:	20003ba0 	.word	0x20003ba0
 8009308:	20003ba8 	.word	0x20003ba8

0800930c <__libc_init_array>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	2600      	movs	r6, #0
 8009310:	4d0c      	ldr	r5, [pc, #48]	; (8009344 <__libc_init_array+0x38>)
 8009312:	4c0d      	ldr	r4, [pc, #52]	; (8009348 <__libc_init_array+0x3c>)
 8009314:	1b64      	subs	r4, r4, r5
 8009316:	10a4      	asrs	r4, r4, #2
 8009318:	42a6      	cmp	r6, r4
 800931a:	d109      	bne.n	8009330 <__libc_init_array+0x24>
 800931c:	f000 f902 	bl	8009524 <_init>
 8009320:	2600      	movs	r6, #0
 8009322:	4d0a      	ldr	r5, [pc, #40]	; (800934c <__libc_init_array+0x40>)
 8009324:	4c0a      	ldr	r4, [pc, #40]	; (8009350 <__libc_init_array+0x44>)
 8009326:	1b64      	subs	r4, r4, r5
 8009328:	10a4      	asrs	r4, r4, #2
 800932a:	42a6      	cmp	r6, r4
 800932c:	d105      	bne.n	800933a <__libc_init_array+0x2e>
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	f855 3b04 	ldr.w	r3, [r5], #4
 8009334:	4798      	blx	r3
 8009336:	3601      	adds	r6, #1
 8009338:	e7ee      	b.n	8009318 <__libc_init_array+0xc>
 800933a:	f855 3b04 	ldr.w	r3, [r5], #4
 800933e:	4798      	blx	r3
 8009340:	3601      	adds	r6, #1
 8009342:	e7f2      	b.n	800932a <__libc_init_array+0x1e>
 8009344:	08009694 	.word	0x08009694
 8009348:	08009694 	.word	0x08009694
 800934c:	08009694 	.word	0x08009694
 8009350:	08009698 	.word	0x08009698

08009354 <__retarget_lock_acquire_recursive>:
 8009354:	4770      	bx	lr

08009356 <__retarget_lock_release_recursive>:
 8009356:	4770      	bx	lr

08009358 <memcmp>:
 8009358:	b530      	push	{r4, r5, lr}
 800935a:	2400      	movs	r4, #0
 800935c:	3901      	subs	r1, #1
 800935e:	42a2      	cmp	r2, r4
 8009360:	d101      	bne.n	8009366 <memcmp+0xe>
 8009362:	2000      	movs	r0, #0
 8009364:	e005      	b.n	8009372 <memcmp+0x1a>
 8009366:	5d03      	ldrb	r3, [r0, r4]
 8009368:	3401      	adds	r4, #1
 800936a:	5d0d      	ldrb	r5, [r1, r4]
 800936c:	42ab      	cmp	r3, r5
 800936e:	d0f6      	beq.n	800935e <memcmp+0x6>
 8009370:	1b58      	subs	r0, r3, r5
 8009372:	bd30      	pop	{r4, r5, pc}

08009374 <memcpy>:
 8009374:	440a      	add	r2, r1
 8009376:	4291      	cmp	r1, r2
 8009378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800937c:	d100      	bne.n	8009380 <memcpy+0xc>
 800937e:	4770      	bx	lr
 8009380:	b510      	push	{r4, lr}
 8009382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009386:	4291      	cmp	r1, r2
 8009388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800938c:	d1f9      	bne.n	8009382 <memcpy+0xe>
 800938e:	bd10      	pop	{r4, pc}

08009390 <memset>:
 8009390:	4603      	mov	r3, r0
 8009392:	4402      	add	r2, r0
 8009394:	4293      	cmp	r3, r2
 8009396:	d100      	bne.n	800939a <memset+0xa>
 8009398:	4770      	bx	lr
 800939a:	f803 1b01 	strb.w	r1, [r3], #1
 800939e:	e7f9      	b.n	8009394 <memset+0x4>

080093a0 <cleanup_glue>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	460c      	mov	r4, r1
 80093a4:	6809      	ldr	r1, [r1, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	b109      	cbz	r1, 80093ae <cleanup_glue+0xe>
 80093aa:	f7ff fff9 	bl	80093a0 <cleanup_glue>
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b6:	f000 b869 	b.w	800948c <_free_r>
	...

080093bc <_reclaim_reent>:
 80093bc:	4b2c      	ldr	r3, [pc, #176]	; (8009470 <_reclaim_reent+0xb4>)
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4604      	mov	r4, r0
 80093c4:	4283      	cmp	r3, r0
 80093c6:	d051      	beq.n	800946c <_reclaim_reent+0xb0>
 80093c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093ca:	b143      	cbz	r3, 80093de <_reclaim_reent+0x22>
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d14a      	bne.n	8009468 <_reclaim_reent+0xac>
 80093d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d4:	6819      	ldr	r1, [r3, #0]
 80093d6:	b111      	cbz	r1, 80093de <_reclaim_reent+0x22>
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 f857 	bl	800948c <_free_r>
 80093de:	6961      	ldr	r1, [r4, #20]
 80093e0:	b111      	cbz	r1, 80093e8 <_reclaim_reent+0x2c>
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 f852 	bl	800948c <_free_r>
 80093e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093ea:	b111      	cbz	r1, 80093f2 <_reclaim_reent+0x36>
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 f84d 	bl	800948c <_free_r>
 80093f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093f4:	b111      	cbz	r1, 80093fc <_reclaim_reent+0x40>
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f848 	bl	800948c <_free_r>
 80093fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80093fe:	b111      	cbz	r1, 8009406 <_reclaim_reent+0x4a>
 8009400:	4620      	mov	r0, r4
 8009402:	f000 f843 	bl	800948c <_free_r>
 8009406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009408:	b111      	cbz	r1, 8009410 <_reclaim_reent+0x54>
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f83e 	bl	800948c <_free_r>
 8009410:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009412:	b111      	cbz	r1, 800941a <_reclaim_reent+0x5e>
 8009414:	4620      	mov	r0, r4
 8009416:	f000 f839 	bl	800948c <_free_r>
 800941a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800941c:	b111      	cbz	r1, 8009424 <_reclaim_reent+0x68>
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f834 	bl	800948c <_free_r>
 8009424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009426:	b111      	cbz	r1, 800942e <_reclaim_reent+0x72>
 8009428:	4620      	mov	r0, r4
 800942a:	f000 f82f 	bl	800948c <_free_r>
 800942e:	69a3      	ldr	r3, [r4, #24]
 8009430:	b1e3      	cbz	r3, 800946c <_reclaim_reent+0xb0>
 8009432:	4620      	mov	r0, r4
 8009434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009436:	4798      	blx	r3
 8009438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800943a:	b1b9      	cbz	r1, 800946c <_reclaim_reent+0xb0>
 800943c:	4620      	mov	r0, r4
 800943e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009442:	f7ff bfad 	b.w	80093a0 <cleanup_glue>
 8009446:	5949      	ldr	r1, [r1, r5]
 8009448:	b941      	cbnz	r1, 800945c <_reclaim_reent+0xa0>
 800944a:	3504      	adds	r5, #4
 800944c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800944e:	2d80      	cmp	r5, #128	; 0x80
 8009450:	68d9      	ldr	r1, [r3, #12]
 8009452:	d1f8      	bne.n	8009446 <_reclaim_reent+0x8a>
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f819 	bl	800948c <_free_r>
 800945a:	e7ba      	b.n	80093d2 <_reclaim_reent+0x16>
 800945c:	680e      	ldr	r6, [r1, #0]
 800945e:	4620      	mov	r0, r4
 8009460:	f000 f814 	bl	800948c <_free_r>
 8009464:	4631      	mov	r1, r6
 8009466:	e7ef      	b.n	8009448 <_reclaim_reent+0x8c>
 8009468:	2500      	movs	r5, #0
 800946a:	e7ef      	b.n	800944c <_reclaim_reent+0x90>
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	bf00      	nop
 8009470:	20000010 	.word	0x20000010

08009474 <__malloc_lock>:
 8009474:	4801      	ldr	r0, [pc, #4]	; (800947c <__malloc_lock+0x8>)
 8009476:	f7ff bf6d 	b.w	8009354 <__retarget_lock_acquire_recursive>
 800947a:	bf00      	nop
 800947c:	20003eac 	.word	0x20003eac

08009480 <__malloc_unlock>:
 8009480:	4801      	ldr	r0, [pc, #4]	; (8009488 <__malloc_unlock+0x8>)
 8009482:	f7ff bf68 	b.w	8009356 <__retarget_lock_release_recursive>
 8009486:	bf00      	nop
 8009488:	20003eac 	.word	0x20003eac

0800948c <_free_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4605      	mov	r5, r0
 8009490:	2900      	cmp	r1, #0
 8009492:	d043      	beq.n	800951c <_free_r+0x90>
 8009494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009498:	1f0c      	subs	r4, r1, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfb8      	it	lt
 800949e:	18e4      	addlt	r4, r4, r3
 80094a0:	f7ff ffe8 	bl	8009474 <__malloc_lock>
 80094a4:	4a1e      	ldr	r2, [pc, #120]	; (8009520 <_free_r+0x94>)
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	4610      	mov	r0, r2
 80094aa:	b933      	cbnz	r3, 80094ba <_free_r+0x2e>
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	6014      	str	r4, [r2, #0]
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b6:	f7ff bfe3 	b.w	8009480 <__malloc_unlock>
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d90a      	bls.n	80094d4 <_free_r+0x48>
 80094be:	6821      	ldr	r1, [r4, #0]
 80094c0:	1862      	adds	r2, r4, r1
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf01      	itttt	eq
 80094c6:	681a      	ldreq	r2, [r3, #0]
 80094c8:	685b      	ldreq	r3, [r3, #4]
 80094ca:	1852      	addeq	r2, r2, r1
 80094cc:	6022      	streq	r2, [r4, #0]
 80094ce:	6063      	str	r3, [r4, #4]
 80094d0:	6004      	str	r4, [r0, #0]
 80094d2:	e7ed      	b.n	80094b0 <_free_r+0x24>
 80094d4:	461a      	mov	r2, r3
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	b10b      	cbz	r3, 80094de <_free_r+0x52>
 80094da:	42a3      	cmp	r3, r4
 80094dc:	d9fa      	bls.n	80094d4 <_free_r+0x48>
 80094de:	6811      	ldr	r1, [r2, #0]
 80094e0:	1850      	adds	r0, r2, r1
 80094e2:	42a0      	cmp	r0, r4
 80094e4:	d10b      	bne.n	80094fe <_free_r+0x72>
 80094e6:	6820      	ldr	r0, [r4, #0]
 80094e8:	4401      	add	r1, r0
 80094ea:	1850      	adds	r0, r2, r1
 80094ec:	4283      	cmp	r3, r0
 80094ee:	6011      	str	r1, [r2, #0]
 80094f0:	d1de      	bne.n	80094b0 <_free_r+0x24>
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4401      	add	r1, r0
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	6053      	str	r3, [r2, #4]
 80094fc:	e7d8      	b.n	80094b0 <_free_r+0x24>
 80094fe:	d902      	bls.n	8009506 <_free_r+0x7a>
 8009500:	230c      	movs	r3, #12
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	e7d4      	b.n	80094b0 <_free_r+0x24>
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1821      	adds	r1, r4, r0
 800950a:	428b      	cmp	r3, r1
 800950c:	bf01      	itttt	eq
 800950e:	6819      	ldreq	r1, [r3, #0]
 8009510:	685b      	ldreq	r3, [r3, #4]
 8009512:	1809      	addeq	r1, r1, r0
 8009514:	6021      	streq	r1, [r4, #0]
 8009516:	6063      	str	r3, [r4, #4]
 8009518:	6054      	str	r4, [r2, #4]
 800951a:	e7c9      	b.n	80094b0 <_free_r+0x24>
 800951c:	bd38      	pop	{r3, r4, r5, pc}
 800951e:	bf00      	nop
 8009520:	20003bb8 	.word	0x20003bb8

08009524 <_init>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr

08009530 <_fini>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr
